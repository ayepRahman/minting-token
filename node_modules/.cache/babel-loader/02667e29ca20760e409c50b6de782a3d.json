{"ast":null,"code":"import { getLastItem } from \"./array\";\nimport { isNumber, isObject } from \"./assertion\";\nimport { fromEntries } from \"./object\";\n\nfunction analyzeCSSValue(value) {\n  var num = parseFloat(value.toString());\n  var unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n}\n\nexport function px(value) {\n  if (value == null) return value;\n  var {\n    unitless\n  } = analyzeCSSValue(value);\n  return unitless || isNumber(value) ? value + \"px\" : value;\n}\n\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\n\nvar sortBps = breakpoints => fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\n\nfunction normalize(breakpoints) {\n  var sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\n\nfunction keys(breakpoints) {\n  var value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\n\nfunction subtract(value) {\n  var _px;\n\n  if (!value) return value;\n  value = (_px = px(value)) != null ? _px : value;\n  var factor = value.endsWith(\"px\") ? -1 : // the equivalent of 1px in em using a 16px base\n  -0.0635;\n  return isNumber(value) ? \"\" + (value + factor) : value.replace(/([0-9]+\\.?[0-9]*)/, m => \"\" + (parseFloat(m) + factor));\n}\n\nfunction queryString(min, max) {\n  var query = [];\n  if (min) query.push(\"@media screen and (min-width: \" + px(min) + \")\");\n  if (query.length > 0 && max) query.push(\"and\");\n  if (max) query.push(\"@media screen and (max-width: \" + px(max) + \")\");\n  return query.join(\" \");\n}\n\nexport function analyzeBreakpoints(breakpoints) {\n  var _breakpoints$base;\n\n  if (!breakpoints) return null;\n  breakpoints.base = (_breakpoints$base = breakpoints.base) != null ? _breakpoints$base : \"0px\";\n  var normalized = normalize(breakpoints);\n  var queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map((_ref, index, entry) => {\n    var _entry;\n\n    var [breakpoint, minW] = _ref;\n    var [, maxW] = (_entry = entry[index + 1]) != null ? _entry : [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : undefined;\n    return {\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: queryString(null, maxW),\n      minWQuery: queryString(minW),\n      minMaxQuery: queryString(minW, maxW)\n    };\n  });\n\n  var _keys = keys(breakpoints);\n\n  var _keysArr = Array.from(_keys.values());\n\n  return {\n    keys: _keys,\n    normalized,\n\n    isResponsive(test) {\n      var keys = Object.keys(test);\n      return keys.length > 0 && keys.every(key => _keys.has(key));\n    },\n\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    media: [null, ...normalized.map(minW => queryString(minW)).slice(1)],\n\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n\n      var result = _keysArr.map(bp => {\n        var _test$bp;\n\n        return (_test$bp = test[bp]) != null ? _test$bp : null;\n      });\n\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n\n      return result;\n    },\n\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n\n      return test.reduce((acc, value, index) => {\n        var key = _keysArr[index];\n        if (key != null && value != null) acc[key] = value;\n        return acc;\n      }, {});\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/arifrahman/Code/personal/minting-token/client/node_modules/@chakra-ui/utils/dist/esm/breakpoint.js"],"names":["getLastItem","isNumber","isObject","fromEntries","analyzeCSSValue","value","num","parseFloat","toString","unit","replace","String","unitless","px","sortByBreakpointValue","a","b","parseInt","sortBps","breakpoints","Object","entries","sort","normalize","sorted","assign","values","keys","Set","subtract","_px","factor","endsWith","m","queryString","min","max","query","push","length","join","analyzeBreakpoints","_breakpoints$base","base","normalized","queries","map","_ref","index","entry","_entry","breakpoint","minW","maxW","undefined","maxWQuery","minWQuery","minMaxQuery","_keys","_keysArr","Array","from","isResponsive","test","every","key","has","asObject","asArray","details","media","slice","toArrayValue","Error","result","bp","_test$bp","pop","toObjectValue","isArray","reduce","acc"],"mappings":"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","sourcesContent":["import { getLastItem } from \"./array\";\nimport { isNumber, isObject } from \"./assertion\";\nimport { fromEntries } from \"./object\";\n\nfunction analyzeCSSValue(value) {\n  var num = parseFloat(value.toString());\n  var unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n}\n\nexport function px(value) {\n  if (value == null) return value;\n  var {\n    unitless\n  } = analyzeCSSValue(value);\n  return unitless || isNumber(value) ? value + \"px\" : value;\n}\n\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\n\nvar sortBps = breakpoints => fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\n\nfunction normalize(breakpoints) {\n  var sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\n\nfunction keys(breakpoints) {\n  var value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\n\nfunction subtract(value) {\n  var _px;\n\n  if (!value) return value;\n  value = (_px = px(value)) != null ? _px : value;\n  var factor = value.endsWith(\"px\") ? -1 : // the equivalent of 1px in em using a 16px base\n  -0.0635;\n  return isNumber(value) ? \"\" + (value + factor) : value.replace(/([0-9]+\\.?[0-9]*)/, m => \"\" + (parseFloat(m) + factor));\n}\n\nfunction queryString(min, max) {\n  var query = [];\n  if (min) query.push(\"@media screen and (min-width: \" + px(min) + \")\");\n  if (query.length > 0 && max) query.push(\"and\");\n  if (max) query.push(\"@media screen and (max-width: \" + px(max) + \")\");\n  return query.join(\" \");\n}\n\nexport function analyzeBreakpoints(breakpoints) {\n  var _breakpoints$base;\n\n  if (!breakpoints) return null;\n  breakpoints.base = (_breakpoints$base = breakpoints.base) != null ? _breakpoints$base : \"0px\";\n  var normalized = normalize(breakpoints);\n  var queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map((_ref, index, entry) => {\n    var _entry;\n\n    var [breakpoint, minW] = _ref;\n    var [, maxW] = (_entry = entry[index + 1]) != null ? _entry : [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : undefined;\n    return {\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: queryString(null, maxW),\n      minWQuery: queryString(minW),\n      minMaxQuery: queryString(minW, maxW)\n    };\n  });\n\n  var _keys = keys(breakpoints);\n\n  var _keysArr = Array.from(_keys.values());\n\n  return {\n    keys: _keys,\n    normalized,\n\n    isResponsive(test) {\n      var keys = Object.keys(test);\n      return keys.length > 0 && keys.every(key => _keys.has(key));\n    },\n\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    media: [null, ...normalized.map(minW => queryString(minW)).slice(1)],\n\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n\n      var result = _keysArr.map(bp => {\n        var _test$bp;\n\n        return (_test$bp = test[bp]) != null ? _test$bp : null;\n      });\n\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n\n      return result;\n    },\n\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n\n      return test.reduce((acc, value, index) => {\n        var key = _keysArr[index];\n        if (key != null && value != null) acc[key] = value;\n        return acc;\n      }, {});\n    }\n\n  };\n}\n//# sourceMappingURL=breakpoint.js.map"]},"metadata":{},"sourceType":"module"}