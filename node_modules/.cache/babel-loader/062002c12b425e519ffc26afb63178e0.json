{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useCallbackRef, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, minSafeInteger, normalizeEventKey, scheduleMicrotask } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n\nvar sanitize = value => value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"isRequired\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"onFocus\", \"onBlur\"]);\n\n  var onFocusProp = useCallbackRef(onFocus);\n  var onBlurProp = useCallbackRef(onBlur);\n  var getAriaValueTextProp = useCallbackRef(getAriaValueText);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n  var counter = useCounter(props);\n  var {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var [isFocused, setFocused] = useBoolean();\n  var inputRef = React.useRef(null);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value != counter.value;\n\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = React.useCallback(event => {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(event => {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = event => {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var ariaValueText = React.useMemo(() => {\n    var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  }, [counter.value, getAriaValueTextProp]);\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n  var validateAndClamp = React.useCallback(() => {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onInputBlur = React.useCallback(() => {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", event => {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current, {\n    passive: false\n  });\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled\n    }, props, {\n      readOnly: (_props$readOnly = props.readOnly) != null ? _props$readOnly : isReadOnly,\n      \"aria-readonly\": (_props$readOnly2 = props.readOnly) != null ? _props$readOnly2 : isReadOnly,\n      \"aria-required\": (_props$required = props.required) != null ? _props$required : isRequired,\n      required: (_props$required2 = props.required) != null ? _props$required2 : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, () => scheduleMicrotask(setFocused.on)),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur)\n    });\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, onFocusProp, setFocused.on, onBlurProp, onInputBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}","map":{"version":3,"sources":["/Users/arifrahman/Code/personal/minting-token/client/node_modules/@chakra-ui/number-input/dist/esm/use-number-input.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","useCounter","useBoolean","useCallbackRef","useEventListener","useSafeLayoutEffect","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","minSafeInteger","normalizeEventKey","scheduleMicrotask","mergeRefs","React","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","sanitize","value","split","filter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","isRequired","getAriaValueText","isInvalid","pattern","inputMode","allowMouseWheel","id","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onBlur","htmlProps","onFocusProp","onBlurProp","getAriaValueTextProp","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","useRef","current","notInSync","setValue","isInteractive","useCallback","spinner","onChange","event","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","useMemo","text","defaultText","toString","undefined","validateAndClamp","next","valueAsNumber","cast","onInputBlur","off","focusInput","nextTick","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","getInputProps","_props$readOnly","_props$readOnly2","_props$required","_props$required2","type","readOnly","required","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","on"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useCallbackRef, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, minSafeInteger, normalizeEventKey, scheduleMicrotask } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n\nvar sanitize = value => value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"isRequired\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"onFocus\", \"onBlur\"]);\n\n  var onFocusProp = useCallbackRef(onFocus);\n  var onBlurProp = useCallbackRef(onBlur);\n  var getAriaValueTextProp = useCallbackRef(getAriaValueText);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n  var counter = useCounter(props);\n  var {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var [isFocused, setFocused] = useBoolean();\n  var inputRef = React.useRef(null);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value != counter.value;\n\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = React.useCallback(event => {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(event => {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = event => {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var ariaValueText = React.useMemo(() => {\n    var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  }, [counter.value, getAriaValueTextProp]);\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n  var validateAndClamp = React.useCallback(() => {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onInputBlur = React.useCallback(() => {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", event => {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current, {\n    passive: false\n  });\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled\n    }, props, {\n      readOnly: (_props$readOnly = props.readOnly) != null ? _props$readOnly : isReadOnly,\n      \"aria-readonly\": (_props$readOnly2 = props.readOnly) != null ? _props$readOnly2 : isReadOnly,\n      \"aria-required\": (_props$required = props.required) != null ? _props$required : isRequired,\n      required: (_props$required2 = props.required) != null ? _props$required2 : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, () => scheduleMicrotask(setFocused.on)),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur)\n    });\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, onFocusProp, setFocused.on, onBlurProp, onInputBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}\n//# sourceMappingURL=use-number-input.js.map"]},"metadata":{},"sourceType":"module"}