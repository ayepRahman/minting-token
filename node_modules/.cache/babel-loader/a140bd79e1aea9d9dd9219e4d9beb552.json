{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\";\nimport { addItem, removeItem, isInputEvent } from \"@chakra-ui/utils\";\nimport { useCallback } from \"react\";\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\n\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  var onChangeProp = useCallbackRef(onChange);\n  var [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  var handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = useCallback(function (props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, {\n      [checkedKey]: value.includes(props.value),\n      onChange: handleChange\n    });\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}","map":{"version":3,"sources":["/Users/arifrahman/Code/personal/minting-token/client/node_modules/@chakra-ui/checkbox/dist/esm/use-checkbox-group.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","useCallbackRef","useControllableState","addItem","removeItem","isInputEvent","useCallback","useCheckboxGroup","props","defaultValue","value","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","getCheckboxProps","checkedKey"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\";\nimport { addItem, removeItem, isInputEvent } from \"@chakra-ui/utils\";\nimport { useCallback } from \"react\";\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  var onChangeProp = useCallbackRef(onChange);\n  var [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  var handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = useCallback(function (props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, {\n      [checkedKey]: value.includes(props.value),\n      onChange: handleChange\n    });\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\n//# sourceMappingURL=use-checkbox-group.js.map"]},"metadata":{},"sourceType":"module"}