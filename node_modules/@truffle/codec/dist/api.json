{
	"id": 0,
	"name": "Truffle Decoding and Encoding",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "@truffle/codec",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gnidan/src/work/truffle/packages/codec/lib/index.ts",
			"comment": {
				"shortText": "# Truffle Codec",
				"text": "This module provides low-level decoding and encoding functionality for\nSolidity and the Solidity ABI.  Many parts of this module are intended\nprimarily for internal use by Truffle and so remain largely undocumented,\nbut some of its types are also output by @truffle/decoder, which provides\na higher-level interface to much of this module's functionality.\n\n## If you're here from Truffle Decoder\n\nIf you're coming here from [[@truffle/decoder]], you probably just want to\nknow about the parts that are relevant to you.  These are:\n\n* The \"data\" category (specifically [[Format]])\n* The \"output\" and \"enumerations\" categories ([[CalldataDecoding]], [[LogDecoding]], et al., see below)\n* The \"errors\" category (specifically [[UnknownUserDefinedTypeError]])\n\nNote that the data category is largely scarce in\ndocumentation, although that's because it's largely self-explanatory.\n\nIf you're not just here from Truffle Decoder, but are actually\ninterested in the lower-level workings, read on.\n\n## How this module differs from Truffle Decoder\n\nUnlike Truffle Decoder, this library makes no network connections\nand avoids dependencies that do.  Instead, its decoding functionality\nis generator-based; calling one of the decoding functions returns a\ngenerator.  This generator's `next()` function may return a finished\nresult, or it may return a request for more information.  It is up to\nthe caller to fulfill these requests -- say, by making a network\nconnection of its own.  This is how @truffle/decoder works; @truffle/codec\nmakes requests, and @truffle/decoder fulfills them by\nlooking up the necessary information on the blockchain.\n\nThis library also provides additional functionality beyond what's used by\nTruffle Decoder.  In particular, this library also exists to support Truffle\nDebugger, and so it provides encoding functionality not just for\ntransactions, logs, and state variables, but also for Solidity variables\nduring transaction execution, including circularity detection for memroy\nstructures.  It includes functionality for decoding Solidity's internal\nfunction pointers, which the debugger uses, but which Truffle Decoder\ncurrently does not (although this is planned for the future).\n\nThere is also functionality for decoding return values and revert messages\nthat goes beyond what's currently available in @truffle/decoder; this may get\na better interface in the future.\n\n## How to use\n\nYou should probably use [[@truffle/decoder]] instead, if your use case doesn't\npreclude it.  This module has little documentation, where it has any at all,\nand it's likely that parts of its interface may change (particularly\nregarding allocation).  That said, if you truly need the functionality here,\nTruffle Decoder can perhaps serve as something of a reference implementation\n(and perhaps Truffle Debugger as well, though that code is much harder to\nread or copy).\n"
			},
			"children": [
				{
					"id": 1235,
					"name": "AbiData",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation, encoding, and decoding of locations related to the ABI\n(calldata in Solidity, events, etc.)"
					},
					"children": [
						{
							"id": 1236,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1349,
									"name": "AbiAllocationAndMode",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1350,
											"name": "allocation",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 508,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocation"
											}
										},
										{
											"id": 1351,
											"name": "mode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 509,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 996
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1350,
												1351
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 507,
											"character": 30
										}
									]
								},
								{
									"id": 1302,
									"name": "AbiAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1305,
											"name": "allocations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 66,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 1239
											}
										},
										{
											"id": 1304,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 65,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1303,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 64,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1305,
												1304,
												1303
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 63,
											"character": 27
										}
									]
								},
								{
									"id": 1239,
									"name": "AbiAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1240,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1241,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AbiAllocation"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 33,
											"character": 31
										}
									]
								},
								{
									"id": 1242,
									"name": "AbiSizeInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1244,
											"name": "dynamic",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 24,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1243,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 23,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1244,
												1243
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 22,
											"character": 28
										}
									]
								},
								{
									"id": 1274,
									"name": "BlankReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1278,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 187,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 996
											}
										},
										{
											"id": 1277,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 186,
													"character": 11
												}
											],
											"type": {
												"type": "tuple"
											}
										},
										{
											"id": 1275,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 184,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "failure"
													},
													{
														"type": "stringLiteral",
														"value": "selfdestruct"
													}
												]
											}
										},
										{
											"id": 1276,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 185,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1278,
												1277,
												1275,
												1276
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 183,
											"character": 42
										}
									]
								},
								{
									"id": 1245,
									"name": "CalldataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1246,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 88,
													"character": 5
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													}
												]
											}
										},
										{
											"id": 1249,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 91,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 996
											}
										},
										{
											"id": 1248,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 90,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "CalldataArgumentAllocation"
												}
											}
										},
										{
											"id": 1247,
											"name": "offset",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 89,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1246,
												1249,
												1248,
												1247
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 87,
											"character": 35
										}
									]
								},
								{
									"id": 1264,
									"name": "ConstructorReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1269,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 180,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 996
											}
										},
										{
											"id": 1268,
											"name": "delegatecallGuard",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 179,
													"character": 19
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1267,
											"name": "immutables",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 178,
													"character": 12
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturnImmutableAllocation"
												}
											}
										},
										{
											"id": 1265,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 176,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytecode"
											}
										},
										{
											"id": 1266,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 177,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1269,
												1268,
												1267,
												1265,
												1266
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 175,
											"character": 48
										}
									]
								},
								{
									"id": 1280,
									"name": "ContractAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1281,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 13,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "Abi.Abi"
											}
										},
										{
											"id": 1287,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 19,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1286,
											"name": "compiler",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 18,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "CompilerVersion",
												"id": 2126
											}
										},
										{
											"id": 1284,
											"name": "constructorContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 16,
													"character": 20
												}
											],
											"type": {
												"type": "reference",
												"name": "Context",
												"id": 2277
											}
										},
										{
											"id": 1282,
											"name": "contractNode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 14,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										},
										{
											"id": 1283,
											"name": "deployedContext",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 15,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"name": "Context",
												"id": 2277
											}
										},
										{
											"id": 1285,
											"name": "immutableReferences",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 17,
													"character": 21
												}
											],
											"type": {
												"type": "reference",
												"name": "ImmutableReferences"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1281,
												1287,
												1286,
												1284,
												1282,
												1283,
												1285
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 12,
											"character": 39
										}
									]
								},
								{
									"id": 1288,
									"name": "EventAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1289,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 127,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "EventEntry"
											}
										},
										{
											"id": 1295,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 133,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 996
											}
										},
										{
											"id": 1293,
											"name": "anonymous",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 131,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1294,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 132,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventArgumentAllocation"
												}
											}
										},
										{
											"id": 1290,
											"name": "contextHash",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 128,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1291,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 129,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.ContractType",
												"id": 177
											}
										},
										{
											"id": 1292,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 130,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1289,
												1295,
												1293,
												1294,
												1290,
												1291,
												1292
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 126,
											"character": 32
										}
									]
								},
								{
									"id": 1306,
									"name": "EventParameterInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1309,
											"name": "indexed",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 72,
													"character": 9
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 572,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 1308,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 71,
													"character": 6
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 570,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1307,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 70,
													"character": 6
												},
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 571,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1309,
												1308,
												1307
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 69,
											"character": 28
										},
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 569,
											"character": 28
										}
									]
								},
								{
									"id": 1270,
									"name": "MessageReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1273,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 193,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 996
											}
										},
										{
											"id": 1271,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 191,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "returnmessage"
											}
										},
										{
											"id": 1272,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 192,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1273,
												1271,
												1272
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 190,
											"character": 44
										}
									]
								},
								{
									"id": 1454,
									"name": "NodeAndContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1456,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 1528,
													"character": 10
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										},
										{
											"id": 1455,
											"name": "node",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 1527,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1456,
												1455
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1526,
											"character": 25
										}
									]
								},
								{
									"id": 1251,
									"name": "ReturnValueReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1255,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 160,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 996
											}
										},
										{
											"id": 1254,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 159,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1252,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 157,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "return"
											}
										},
										{
											"id": 1253,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 158,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1255,
												1254,
												1252,
												1253
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 156,
											"character": 48
										}
									]
								},
								{
									"id": 1296,
									"name": "ReturndataAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1297,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1298,
													"name": "contextHash",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1299,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 1300,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1301,
																	"name": "selector",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "RevertReturndataAllocation",
																	"id": 1256
																}
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/abi-data/allocate/types.ts",
															"line": 144,
															"character": 24
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 143,
											"character": 38
										}
									]
								},
								{
									"id": 1256,
									"name": "RevertReturndataAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1259,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 166,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "ErrorEntry"
											}
										},
										{
											"id": 1263,
											"name": "allocationMode",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 172,
													"character": 16
												}
											],
											"type": {
												"type": "reference",
												"name": "DecodingMode",
												"id": 996
											}
										},
										{
											"id": 1262,
											"name": "arguments",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 171,
													"character": 11
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataArgumentAllocation"
												}
											}
										},
										{
											"id": 1261,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 168,
													"character": 11
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Format.Types.ContractType",
														"id": 177
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 1260,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 167,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1257,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 164,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "revert"
											}
										},
										{
											"id": 1258,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/types.ts",
													"line": 165,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1259,
												1263,
												1262,
												1261,
												1260,
												1257,
												1258
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 163,
											"character": 43
										}
									]
								},
								{
									"id": 1279,
									"name": "CalldataAndReturndataAllocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 83,
											"character": 43
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionCalldataAndReturndataAllocation"
											},
											{
												"type": "reference",
												"name": "ConstructorCalldataAndReturndataAllocation"
											}
										]
									}
								},
								{
									"id": 1250,
									"name": "ReturndataAllocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/types.ts",
											"line": 149,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ReturnValueReturndataAllocation",
												"id": 1251
											},
											{
												"type": "reference",
												"name": "RevertReturndataAllocation",
												"id": 1256
											},
											{
												"type": "reference",
												"name": "ConstructorReturndataAllocation",
												"id": 1264
											},
											{
												"type": "reference",
												"name": "MessageReturndataAllocation",
												"id": 1270
											},
											{
												"type": "reference",
												"name": "BlankReturndataAllocation",
												"id": 1274
											}
										]
									}
								},
								{
									"id": 1238,
									"name": "Web3Utils",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 8,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": " require(\"web3-utils\")"
								},
								{
									"id": 1237,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:allocate\")"
								},
								{
									"id": 1329,
									"name": "abiSizeAndAllocate",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1330,
											"name": "abiSizeAndAllocate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1331,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1332,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1333,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocationInfo",
												"id": 1302
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 181,
											"character": 27
										}
									]
								},
								{
									"id": 1334,
									"name": "abiSizeInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isProtected": true,
										"isExported": true
									},
									"signatures": [
										{
											"id": 1335,
											"name": "abiSizeInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isProtected": true
											},
											"comment": {},
											"parameters": [
												{
													"id": 1336,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1337,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiSizeInfo",
												"id": 1242
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 332,
											"character": 27
										}
									]
								},
								{
									"id": 1338,
									"name": "allocateCalldataAndReturndata",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1339,
											"name": "allocateCalldataAndReturndata",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1340,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionEntry"
															},
															{
																"type": "reference",
																"name": "ConstructorEntry"
															}
														]
													}
												},
												{
													"id": 1341,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1342,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1343,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1344,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												},
												{
													"id": 1345,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1346,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 2126
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1347,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 2277
													}
												},
												{
													"id": 1348,
													"name": "deployedContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 2277
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CalldataAndReturndataAllocation",
														"id": 1279
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 347,
											"character": 38
										}
									]
								},
								{
									"id": 1352,
									"name": "allocateDataArguments",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1353,
											"name": "allocateDataArguments",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1354,
													"name": "fullModeParameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1860
																}
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1355,
													"name": "abiParameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Parameter"
														}
													}
												},
												{
													"id": 1356,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1357,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												},
												{
													"id": 1358,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1359,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 2126
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1360,
													"name": "offset",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													},
													"defaultValue": "0"
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocationAndMode",
												"id": 1349
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 515,
											"character": 30
										}
									]
								},
								{
									"id": 1370,
									"name": "allocateError",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1371,
											"name": "allocateError",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1372,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ErrorEntry"
													}
												},
												{
													"id": 1373,
													"name": "errorNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1374,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1375,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1376,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												},
												{
													"id": 1377,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1378,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 2126
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "RevertReturndataAllocation",
												"id": 1256
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 746,
											"character": 22
										}
									]
								},
								{
									"id": 1361,
									"name": "allocateEvent",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1362,
											"name": "allocateEvent",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1363,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventEntry"
													}
												},
												{
													"id": 1364,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1365,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1366,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1367,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												},
												{
													"id": 1368,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1369,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 2126
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "EventAllocation",
														"id": 1288
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 577,
											"character": 22
										}
									]
								},
								{
									"id": 1322,
									"name": "allocateMembers",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1323,
											"name": "allocateMembers",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1324,
													"name": "parentId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1325,
													"name": "members",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "NameTypePair",
															"id": 128
														}
													}
												},
												{
													"id": 1326,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1327,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												},
												{
													"id": 1328,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													},
													"defaultValue": "0"
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 1239
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 118,
											"character": 24
										}
									]
								},
								{
									"id": 1317,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1318,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1319,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 126
													}
												},
												{
													"id": 1320,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1321,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 1239
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 101,
											"character": 23
										}
									]
								},
								{
									"id": 1429,
									"name": "coalesceReturndataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1430,
											"name": "coalesceReturndataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1431,
													"name": "selfAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "RevertReturndataAllocation",
															"id": 1256
														}
													}
												},
												{
													"id": 1432,
													"name": "additionalAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "RevertReturndataAllocation",
															"id": 1256
														}
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1433,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 1434,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1435,
																	"name": "selector",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "RevertReturndataAllocation",
																	"id": 1256
																}
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/abi-data/allocate/index.ts",
															"line": 1218,
															"character": 2
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1215,
											"character": 38
										}
									]
								},
								{
									"id": 1396,
									"name": "constructorOutputAllocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1397,
											"name": "constructorOutputAllocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1398,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Context",
																"id": 2277
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1399,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1400,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1401,
													"name": "allocationMode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecodingMode",
														"id": 996
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ConstructorReturndataAllocation",
												"id": 1264
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 931,
											"character": 36
										}
									]
								},
								{
									"id": 1474,
									"name": "contextHashForKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1475,
											"name": "contextHashForKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1476,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1591,
											"character": 26
										}
									]
								},
								{
									"id": 1390,
									"name": "defaultConstructorAllocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1391,
											"name": "defaultConstructorAllocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1392,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 2277
													}
												},
												{
													"id": 1393,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1394,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1395,
													"name": "deployedContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 2277
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "ConstructorCalldataAndReturndataAllocation"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 904,
											"character": 37
										}
									]
								},
								{
									"id": 1457,
									"name": "findNodeAndContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1458,
											"name": "findNodeAndContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1459,
													"name": "linearizedBaseContracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "number"
														}
													}
												},
												{
													"id": 1460,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1461,
													"name": "condition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1462,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 1463,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1464,
																			"name": "node",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "AstNode",
																				"id": 1860
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1535,
																	"character": 12
																}
															]
														}
													}
												},
												{
													"id": 1465,
													"name": "derivedContractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "NodeAndContract",
												"id": 1454
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1532,
											"character": 28
										}
									]
								},
								{
									"id": 1314,
									"name": "getAbiAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1315,
											"name": "getAbiAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1316,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiAllocations",
												"id": 1239
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 81,
											"character": 33
										}
									]
								},
								{
									"id": 1402,
									"name": "getCalldataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1403,
											"name": "getCalldataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1404,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 1280
														}
													}
												},
												{
													"id": 1405,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1406,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1407,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1408,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1907
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1028,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1409,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1410,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocations"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1026,
											"character": 38
										}
									]
								},
								{
									"id": 1379,
									"name": "getCalldataAllocationsForContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1380,
											"name": "getCalldataAllocationsForContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1381,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Abi"
													}
												},
												{
													"id": 1382,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 1383,
													"name": "constructorContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 2277
													}
												},
												{
													"id": 1384,
													"name": "deployedContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 2277
													}
												},
												{
													"id": 1385,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1386,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1387,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												},
												{
													"id": 1388,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1389,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "CalldataAllocationTemporary"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 819,
											"character": 42
										}
									]
								},
								{
									"id": 1445,
									"name": "getEventAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1446,
											"name": "getEventAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1447,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 1280
														}
													}
												},
												{
													"id": 1448,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1449,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1450,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1451,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1907
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1320,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1452,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1453,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "EventAllocations"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1318,
											"character": 35
										}
									]
								},
								{
									"id": 1436,
									"name": "getEventAllocationsForContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1437,
											"name": "getEventAllocationsForContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1438,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Abi"
													}
												},
												{
													"id": 1439,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1440,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1441,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1442,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												},
												{
													"id": 1443,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1444,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 2126
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EventAllocationTemporary"
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1284,
											"character": 39
										}
									]
								},
								{
									"id": 1420,
									"name": "getReturndataAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1421,
											"name": "getReturndataAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1422,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 1280
														}
													}
												},
												{
													"id": 1423,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1424,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1425,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1426,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1907
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/abi-data/allocate/index.ts",
																	"line": 1126,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1427,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1428,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ReturndataAllocations",
												"id": 1296
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1124,
											"character": 40
										}
									]
								},
								{
									"id": 1411,
									"name": "getReturndataAllocationsForContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1412,
											"name": "getReturndataAllocationsForContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1413,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Abi"
													}
												},
												{
													"id": 1414,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1415,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1416,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1417,
													"name": "abiAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												},
												{
													"id": 1418,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1419,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "CompilerVersion",
																"id": 2126
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "RevertReturndataAllocation",
													"id": 1256
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1064,
											"character": 44
										}
									]
								},
								{
									"id": 1471,
									"name": "hasContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1472,
											"name": "hasContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1473,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1587,
											"character": 19
										}
									]
								},
								{
									"id": 1466,
									"name": "makeContractKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1467,
											"name": "makeContractKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1468,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Context",
																"id": 2277
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1469,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1470,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 1579,
											"character": 24
										}
									]
								},
								{
									"id": 1310,
									"name": "FallbackOutputAllocation",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"children": [
										{
											"id": 1313,
											"name": "allocationMode",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 78,
													"character": 16
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "full"
											},
											"defaultValue": "\"full\""
										},
										{
											"id": 1311,
											"name": "kind",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 76,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "returnmessage"
											},
											"defaultValue": "\"returnmessage\""
										},
										{
											"id": 1312,
											"name": "selector",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/allocate/index.ts",
													"line": 77,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											},
											"defaultValue": " new Uint8Array()"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1313,
												1311,
												1312
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/allocate/index.ts",
											"line": 75,
											"character": 37
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1349,
										1302,
										1239,
										1242,
										1274,
										1245,
										1264,
										1280,
										1288,
										1306,
										1270,
										1454,
										1251,
										1296,
										1256
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										1279,
										1250
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1238,
										1237
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1329,
										1334,
										1338,
										1352,
										1370,
										1361,
										1322,
										1317,
										1429,
										1396,
										1474,
										1390,
										1457,
										1314,
										1402,
										1379,
										1445,
										1436,
										1420,
										1411,
										1471,
										1466
									]
								},
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										1310
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1490,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1492,
									"name": "AbiLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 16,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "calldata"
											},
											{
												"type": "stringLiteral",
												"value": "eventdata"
											},
											{
												"type": "stringLiteral",
												"value": "returndata"
											}
										]
									}
								},
								{
									"id": 1491,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:decode\")"
								},
								{
									"id": 1493,
									"name": "decodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1494,
											"name": "decodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1495,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1496,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.AbiDataPointer",
														"id": 2386
													}
												},
												{
													"id": 1497,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1498,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 18,
											"character": 26
										}
									]
								},
								{
									"id": 1499,
									"name": "decodeAbiReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1500,
											"name": "decodeAbiReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1501,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Format.Types.ReferenceType",
																"id": 214
															},
															{
																"type": "reference",
																"name": "TupleType",
																"id": 154
															}
														]
													}
												},
												{
													"id": 1502,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Pointer.AbiDataPointer",
																"id": 2386
															},
															{
																"type": "reference",
																"name": "Pointer.StackFormPointer",
																"id": 2384
															}
														]
													}
												},
												{
													"id": 1503,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1504,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 52,
											"character": 44
										}
									]
								},
								{
									"id": 1505,
									"name": "decodeAbiReferenceStatic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1506,
											"name": "decodeAbiReferenceStatic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1507,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Format.Types.ReferenceType",
																"id": 214
															},
															{
																"type": "reference",
																"name": "TupleType",
																"id": 154
															}
														]
													}
												},
												{
													"id": 1508,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.AbiDataPointer",
														"id": 2386
													}
												},
												{
													"id": 1509,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1510,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 306,
											"character": 41
										}
									]
								},
								{
									"id": 1511,
									"name": "decodeAbiStructByPosition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1512,
											"name": "decodeAbiStructByPosition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1513,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 126
													}
												},
												{
													"id": 1514,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiLocation",
														"id": 1492
													}
												},
												{
													"id": 1515,
													"name": "startPosition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1516,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1517,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.StructResult",
														"id": 408
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 389,
											"character": 35
										}
									]
								},
								{
									"id": 1518,
									"name": "decodeAbiTupleByPosition",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1519,
											"name": "decodeAbiTupleByPosition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1520,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TupleType",
														"id": 154
													}
												},
												{
													"id": 1521,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AbiLocation",
														"id": 1492
													}
												},
												{
													"id": 1522,
													"name": "startPosition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1523,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1524,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.TupleResult",
														"id": 420
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/decode/index.ts",
											"line": 453,
											"character": 34
										}
									]
								}
							],
							"groups": [
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										1492
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1491
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1493,
										1499,
										1505,
										1511,
										1518
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 8,
									"character": 8
								}
							]
						},
						{
							"id": 1477,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1478,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:encode\")"
								},
								{
									"id": 1479,
									"name": "encodeAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1480,
											"name": "encodeAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1481,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												},
												{
													"id": 1482,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 23,
											"character": 25
										}
									]
								},
								{
									"id": 1486,
									"name": "encodeTupleAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1487,
											"name": "encodeTupleAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1488,
													"name": "tuple",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Format.Values.Result",
															"id": 359
														}
													}
												},
												{
													"id": 1489,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AbiAllocations",
														"id": 1239
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 131,
											"character": 30
										}
									]
								},
								{
									"id": 1483,
									"name": "padAndPrependLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1484,
											"name": "padAndPrependLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1485,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/encode/index.ts",
											"line": 117,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1478
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1479,
										1486,
										1483
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1479,
												1486,
												1483
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 5,
									"character": 8
								}
							]
						},
						{
							"id": 1525,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1526,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:import\")"
								},
								{
									"id": 1527,
									"name": "abiParameterToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1528,
											"name": "abiParameterToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1529,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Parameter"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/import/index.ts",
											"line": 8,
											"character": 34
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1526
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1527
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 16,
									"character": 8
								}
							]
						},
						{
							"id": 1533,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1535,
									"name": "Web3Utils",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 5,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": " require(\"web3-utils\")"
								},
								{
									"id": 1534,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:abi-data:utils\")"
								},
								{
									"id": 1576,
									"name": "abiEntryHasStorageParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1577,
											"name": "abiEntryHasStorageParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1578,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 187,
											"character": 44
										}
									]
								},
								{
									"id": 1570,
									"name": "abiEntryIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1571,
											"name": "abiEntryIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1572,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 143,
											"character": 43
										}
									]
								},
								{
									"id": 1543,
									"name": "abiHasPayableFallback",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1544,
											"name": "abiHasPayableFallback",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1545,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 35,
											"character": 37
										}
									]
								},
								{
									"id": 1573,
									"name": "abiParameterIsObviouslyIllTyped",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1574,
											"name": "abiParameterIsObviouslyIllTyped",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1575,
													"name": "abiParameter",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Parameter"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 160,
											"character": 40
										}
									]
								},
								{
									"id": 1555,
									"name": "abiSelector",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1556,
											"name": "abiSelector",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1557,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionEntry"
															},
															{
																"type": "reference",
																"name": "EventEntry"
															},
															{
																"type": "reference",
																"name": "ErrorEntry"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 72,
											"character": 27
										}
									]
								},
								{
									"id": 1546,
									"name": "abiSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1547,
											"name": "abiSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1548,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FunctionEntry"
															},
															{
																"type": "reference",
																"name": "EventEntry"
															},
															{
																"type": "reference",
																"name": "ErrorEntry"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 49,
											"character": 28
										}
									]
								},
								{
									"id": 1549,
									"name": "abiTupleSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1550,
											"name": "abiTupleSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1551,
													"name": "parameters",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Parameter"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 55,
											"character": 33
										}
									]
								},
								{
									"id": 1552,
									"name": "abiTypeSignature",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1553,
											"name": "abiTypeSignature",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1554,
													"name": "parameter",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Parameter"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 60,
											"character": 25
										}
									]
								},
								{
									"id": 1558,
									"name": "abisMatch",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1559,
											"name": "abisMatch",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1560,
													"name": "entry1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Entry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1561,
													"name": "entry2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Entry"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 89,
											"character": 25
										}
									]
								},
								{
									"id": 1540,
									"name": "computeSelectors",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1541,
											"name": "computeSelectors",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1542,
													"name": "abi",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Abi.Abi"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionAbiBySelectors",
														"id": 1530
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 18,
											"character": 32
										}
									]
								},
								{
									"id": 1562,
									"name": "definitionMatchesAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1563,
											"name": "definitionMatchesAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1564,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Abi.Entry"
													}
												},
												{
													"id": 1565,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 1566,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 121,
											"character": 36
										}
									]
								},
								{
									"id": 1567,
									"name": "topicsCount",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1568,
											"name": "topicsCount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1569,
													"name": "abiEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventEntry"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 136,
											"character": 27
										}
									]
								},
								{
									"id": 1536,
									"name": "DEFAULT_CONSTRUCTOR_ABI",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"children": [
										{
											"id": 1538,
											"name": "inputs",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 13,
													"character": 8
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "undefined"
												}
											},
											"defaultValue": " []"
										},
										{
											"id": 1539,
											"name": "stateMutability",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 14,
													"character": 17
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "nonpayable"
											},
											"defaultValue": "\"nonpayable\""
										},
										{
											"id": 1537,
											"name": "type",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/abi-data/utils.ts",
													"line": 12,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "constructor"
											},
											"defaultValue": "\"constructor\""
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												1538,
												1539,
												1537
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/abi-data/utils.ts",
											"line": 11,
											"character": 36
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1535,
										1534
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1576,
										1570,
										1543,
										1573,
										1555,
										1546,
										1549,
										1552,
										1558,
										1540,
										1562,
										1567
									]
								},
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										1536
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/index.ts",
									"line": 26,
									"character": 8
								}
							]
						},
						{
							"id": 1530,
							"name": "FunctionAbiBySelectors",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1531,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1532,
											"name": "selector",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FunctionEntry"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/abi-data/types.ts",
									"line": 3,
									"character": 39
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1236,
								1490,
								1477,
								1525,
								1533
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1530
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 313,
							"character": 8
						}
					]
				},
				{
					"id": 1856,
					"name": "Ast",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2111,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 2112,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:ast:import\")"
								},
								{
									"id": 2119,
									"name": "definitionToStoredType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2120,
											"name": "definitionToStoredType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2121,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2122,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2123,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												},
												{
													"id": 2124,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.UserDefinedType",
												"id": 124
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 360,
											"character": 38
										}
									]
								},
								{
									"id": 2113,
									"name": "definitionToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2114,
											"name": "definitionToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2115,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2116,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 2117,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												},
												{
													"id": 2118,
													"name": "forceLocation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Common.Location"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/import/index.ts",
											"line": 21,
											"character": 32
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2112
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2119,
										2113
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1923,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2029,
									"name": "EventParameterNode",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 2072,
											"name": "anonymous",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 53,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.anonymous",
												"id": 1903
											}
										},
										{
											"id": 2040,
											"name": "ast_type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 18,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.ast_type",
												"id": 1870
											}
										},
										{
											"id": 2068,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 48,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.baseType",
												"id": 1898
											}
										},
										{
											"id": 2035,
											"name": "canonicalName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 13,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.canonicalName",
												"id": 1865
											}
										},
										{
											"id": 2031,
											"name": "constant",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 9,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.constant",
												"id": 1861
											}
										},
										{
											"id": 2073,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 54,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.ContractKind"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.contractKind",
												"id": 1904
											}
										},
										{
											"id": 2047,
											"name": "expression",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 25,
													"character": 12
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2048,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2049,
															"name": "referencedDeclaration",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/ast/types.ts",
																	"line": 26,
																	"character": 25
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																2049
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 25,
															"character": 14
														}
													]
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.expression",
												"id": 1877
											}
										},
										{
											"id": 2054,
											"name": "hexValue",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 34,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.hexValue",
												"id": 1884
											}
										},
										{
											"id": 2033,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 11,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.id",
												"id": 1863
											}
										},
										{
											"id": 2030,
											"name": "indexed",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/ast/utils.ts",
													"line": 618,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"overwrites": {
												"type": "reference",
												"name": "AstNode.indexed",
												"id": 1902
											}
										},
										{
											"id": 2074,
											"name": "isConstructor",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 55,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.isConstructor",
												"id": 1905
											}
										},
										{
											"id": 2069,
											"name": "keyType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 49,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.keyType",
												"id": 1899
											}
										},
										{
											"id": 2053,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 33,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.kind",
												"id": 1883
											}
										},
										{
											"id": 2036,
											"name": "linearizedBaseContracts",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 14,
													"character": 25
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.linearizedBaseContracts",
												"id": 1866
											}
										},
										{
											"id": 2037,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 15,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "AstNode",
													"id": 1860
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.members",
												"id": 1867
											}
										},
										{
											"id": 2032,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 10,
													"character": 12
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "stringLiteral",
														"value": "mutable"
													},
													{
														"type": "stringLiteral",
														"value": "immutable"
													},
													{
														"type": "stringLiteral",
														"value": "constant"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.mutability",
												"id": 1862
											}
										},
										{
											"id": 2034,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 12,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.name",
												"id": 1864
											}
										},
										{
											"id": 2039,
											"name": "nodeType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 17,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.nodeType",
												"id": 1869
											}
										},
										{
											"id": 2038,
											"name": "nodes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 16,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "AstNode",
													"id": 1860
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.nodes",
												"id": 1868
											}
										},
										{
											"id": 2062,
											"name": "parameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 42,
													"character": 16
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2063,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2064,
															"name": "parameters",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/types.ts",
																	"line": 43,
																	"character": 14
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1860
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																2064
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 42,
															"character": 18
														}
													]
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.parameterTypes",
												"id": 1892
											}
										},
										{
											"id": 2056,
											"name": "parameters",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 36,
													"character": 12
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2057,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2058,
															"name": "parameters",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/types.ts",
																	"line": 37,
																	"character": 14
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1860
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																2058
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 36,
															"character": 14
														}
													]
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.parameters",
												"id": 1886
											}
										},
										{
											"id": 2071,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 51,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.payable",
												"id": 1901
											}
										},
										{
											"id": 2055,
											"name": "referencedDeclaration",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 35,
													"character": 23
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.referencedDeclaration",
												"id": 1885
											}
										},
										{
											"id": 2065,
											"name": "returnParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 45,
													"character": 22
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2066,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2067,
															"name": "parameters",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/types.ts",
																	"line": 46,
																	"character": 14
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1860
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																2067
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 45,
															"character": 24
														}
													]
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.returnParameterTypes",
												"id": 1895
											}
										},
										{
											"id": 2059,
											"name": "returnParameters",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 39,
													"character": 18
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2060,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2061,
															"name": "parameters",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/types.ts",
																	"line": 40,
																	"character": 14
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1860
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																2061
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 39,
															"character": 20
														}
													]
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.returnParameters",
												"id": 1889
											}
										},
										{
											"id": 2041,
											"name": "scope",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 19,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.scope",
												"id": 1871
											}
										},
										{
											"id": 2042,
											"name": "src",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 20,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.src",
												"id": 1872
											}
										},
										{
											"id": 2052,
											"name": "stateMutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 32,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Mutability"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.stateMutability",
												"id": 1882
											}
										},
										{
											"id": 2043,
											"name": "stateVariable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 21,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.stateVariable",
												"id": 1873
											}
										},
										{
											"id": 2044,
											"name": "storageLocation",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 22,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.storageLocation",
												"id": 1874
											}
										},
										{
											"id": 2045,
											"name": "typeDescriptions",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 23,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "TypeDescriptions",
												"id": 1857
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.typeDescriptions",
												"id": 1875
											}
										},
										{
											"id": 2046,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 24,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.typeName",
												"id": 1876
											}
										},
										{
											"id": 2075,
											"name": "usedErrors",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 56,
													"character": 12
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "number"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.usedErrors",
												"id": 1906
											}
										},
										{
											"id": 2050,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 28,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "null"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.value",
												"id": 1880
											}
										},
										{
											"id": 2070,
											"name": "valueType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 50,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.valueType",
												"id": 1900
											}
										},
										{
											"id": 2051,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 29,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "AstNode.visibility",
												"id": 1881
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2072,
												2040,
												2068,
												2035,
												2031,
												2073,
												2047,
												2054,
												2033,
												2030,
												2074,
												2069,
												2053,
												2036,
												2037,
												2032,
												2034,
												2039,
												2038,
												2062,
												2056,
												2071,
												2055,
												2065,
												2059,
												2041,
												2042,
												2052,
												2043,
												2044,
												2045,
												2046,
												2075,
												2050,
												2070,
												2051
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 617,
											"character": 28
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "AstNode",
											"id": 1860
										}
									]
								},
								{
									"id": 2084,
									"name": "Parameter",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {},
									"typeParameter": [
										{
											"id": 2085,
											"name": "N",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 655,
											"character": 14
										}
									],
									"type": {
										"type": "unknown",
										"name": "Parameter<N>"
									}
								},
								{
									"id": 1924,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:ast:utils\")"
								},
								{
									"id": 1998,
									"name": "baseDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1999,
											"name": "baseDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 2000,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 298,
											"character": 30
										}
									]
								},
								{
									"id": 1979,
									"name": "contractKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1980,
											"name": "contractKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "only for contract types, obviously! will yield nonsense otherwise!"
											},
											"parameters": [
												{
													"id": 1981,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.ContractKind"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 213,
											"character": 28
										}
									]
								},
								{
									"id": 1949,
									"name": "decimalPlaces",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1950,
											"name": "decimalPlaces",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for fixed-point types, obviously"
											},
											"parameters": [
												{
													"id": 1951,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 129,
											"character": 29
										}
									]
								},
								{
									"id": 2021,
									"name": "definitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2022,
											"name": "definitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "the main function. just does some dispatch.\nreturns undefined on bad input"
											},
											"parameters": [
												{
													"id": 2023,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2024,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Abi.Entry"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 531,
											"character": 31
										}
									]
								},
								{
									"id": 2080,
									"name": "errorDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2081,
											"name": "errorDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2082,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2083,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ErrorEntry"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 639,
											"character": 29
										}
									]
								},
								{
									"id": 2076,
									"name": "eventDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2077,
											"name": "eventDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2078,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2079,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "EventEntry"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 621,
											"character": 29
										}
									]
								},
								{
									"id": 2025,
									"name": "functionDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2026,
											"name": "functionDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2027,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2028,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "FunctionEntry"
													},
													{
														"type": "reference",
														"name": "ConstructorEntry"
													},
													{
														"type": "reference",
														"name": "FallbackEntry"
													},
													{
														"type": "reference",
														"name": "ReceiveEntry"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 558,
											"character": 32
										}
									]
								},
								{
									"id": 2012,
									"name": "functionKind",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2013,
											"name": "functionKind",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "compatibility function, since pre-0.5.0 functions don't have node.kind\nreturns undefined if you don't put in a function node"
											},
											"parameters": [
												{
													"id": 2014,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 468,
											"character": 28
										}
									]
								},
								{
									"id": 2100,
									"name": "getterDefinitionToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2101,
											"name": "getterDefinitionToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2102,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2103,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 771,
											"character": 30
										}
									]
								},
								{
									"id": 2104,
									"name": "getterParameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2105,
											"name": "getterParameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2106,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2107,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2108,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2109,
															"name": "inputs",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 807,
																	"character": 11
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1860
																}
															}
														},
														{
															"id": 2110,
															"name": "outputs",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/ast/utils.ts",
																	"line": 807,
																	"character": 31
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "AstNode",
																	"id": 1860
																}
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																2109,
																2110
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/ast/utils.ts",
															"line": 807,
															"character": 2
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 804,
											"character": 32
										}
									]
								},
								{
									"id": 1952,
									"name": "isArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1953,
											"name": "isArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1954,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 136,
											"character": 23
										}
									]
								},
								{
									"id": 2018,
									"name": "isContractPayable",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2019,
											"name": "isContractPayable",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "takes a contract definition and asks, does it have a payable fallback\nfunction?"
											},
											"parameters": [
												{
													"id": 2020,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 518,
											"character": 33
										}
									]
								},
								{
									"id": 1955,
									"name": "isDynamicArray",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1956,
											"name": "isDynamicArray",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1957,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 141,
											"character": 30
										}
									]
								},
								{
									"id": 1970,
									"name": "isEnum",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1971,
											"name": "isEnum",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1972,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 186,
											"character": 22
										}
									]
								},
								{
									"id": 1967,
									"name": "isMapping",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1968,
											"name": "isMapping",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1969,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 181,
											"character": 25
										}
									]
								},
								{
									"id": 1973,
									"name": "isReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1974,
											"name": "isReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1975,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 191,
											"character": 27
										}
									]
								},
								{
									"id": 1985,
									"name": "isSimpleConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1986,
											"name": "isSimpleConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1987,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 243,
											"character": 32
										}
									]
								},
								{
									"id": 1964,
									"name": "isStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1965,
											"name": "isStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1966,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 176,
											"character": 24
										}
									]
								},
								{
									"id": 2001,
									"name": "keyDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2002,
											"name": "keyDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings and arrays only!\nfor arrays, fakes up a uint definition"
											},
											"parameters": [
												{
													"id": 2003,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2004,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Scopes",
														"id": 1910
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 330,
											"character": 29
										}
									]
								},
								{
									"id": 2015,
									"name": "mutability",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2016,
											"name": "mutability",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar compatibility function for mutability for pre-0.4.16 versions\nreturns undefined if you don't give it a FunctionDefinition or\nVariableDeclaration"
											},
											"parameters": [
												{
													"id": 2017,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Common.Mutability"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 489,
											"character": 26
										}
									]
								},
								{
									"id": 2091,
									"name": "parameterToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2092,
											"name": "parameterToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"typeParameter": [
												{
													"id": 2093,
													"name": "N",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"parameters": [
												{
													"id": 2094,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "typeParameter",
														"name": "N",
														"constraint": {
															"type": "reference",
															"name": "AstNode",
															"id": 1860
														}
													}
												},
												{
													"id": 2095,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Parameter",
												"id": 2084,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "N",
														"constraint": {
															"type": "reference",
															"name": "AstNode",
															"id": 1860
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 673,
											"character": 23
										}
									]
								},
								{
									"id": 2009,
									"name": "parameters",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2010,
											"name": "parameters",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns input parameters, then output parameters\nNOTE: ONLY FOR VARIABLE DECLARATIONS OF FUNCTION TYPE\nNOT FOR FUNCTION DEFINITIONS"
											},
											"parameters": [
												{
													"id": 2011,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "tuple",
												"elements": [
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1860
														}
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1860
														}
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 451,
											"character": 26
										}
									]
								},
								{
									"id": 2086,
									"name": "parametersToAbi",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2087,
											"name": "parametersToAbi",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"typeParameter": [
												{
													"id": 2088,
													"name": "N",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"parameters": [
												{
													"id": 2089,
													"name": "nodes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "N",
															"constraint": {
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															}
														}
													}
												},
												{
													"id": 2090,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Parameter",
													"id": 2084,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "N",
															"constraint": {
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															}
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 659,
											"character": 24
										}
									]
								},
								{
									"id": 1995,
									"name": "rationalValue",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1996,
											"name": "rationalValue",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "extract the actual numerical value from a node of type rational.\ncurrently assumes result will be integer (currently returns BN)"
											},
											"parameters": [
												{
													"id": 1997,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 290,
											"character": 29
										}
									]
								},
								{
									"id": 1976,
									"name": "referenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1977,
											"name": "referenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "note: only use this on things already verified to be references"
											},
											"parameters": [
												{
													"id": 1978,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Location"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 203,
											"character": 29
										}
									]
								},
								{
									"id": 1992,
									"name": "regularizeTypeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1993,
											"name": "regularizeTypeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "adds \"_ptr\" on to the end of type identifiers that might need it; note that\nthis operates on identifiers, not definitions"
											},
											"parameters": [
												{
													"id": 1994,
													"name": "identifier",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 277,
											"character": 40
										}
									]
								},
								{
									"id": 1946,
									"name": "specifiedSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1947,
											"name": "specifiedSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "e.g. uint48 -> 6",
												"returns": "size in bytes for explicit type size, or `null` if not stated"
											},
											"parameters": [
												{
													"id": 1948,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 95,
											"character": 29
										}
									]
								},
								{
									"id": 1988,
									"name": "spliceLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1989,
											"name": "spliceLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "definition: a storage reference definition\nlocation: the location you want it to refer to instead"
											},
											"parameters": [
												{
													"id": 1990,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 1991,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Common.Location"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 253,
											"character": 30
										}
									]
								},
								{
									"id": 1982,
									"name": "stackSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1983,
											"name": "stackSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "stack size, in words, of a given type"
											},
											"parameters": [
												{
													"id": 1984,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 221,
											"character": 25
										}
									]
								},
								{
									"id": 1958,
									"name": "staticLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1959,
											"name": "staticLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "length of a statically sized array -- please only use for arrays\nalready verified to be static!"
											},
											"parameters": [
												{
													"id": 1960,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 158,
											"character": 28
										}
									]
								},
								{
									"id": 1961,
									"name": "staticLengthAsString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1962,
											"name": "staticLengthAsString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "see staticLength for explanation"
											},
											"parameters": [
												{
													"id": 1963,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 169,
											"character": 36
										}
									]
								},
								{
									"id": 2096,
									"name": "toAbiType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2097,
											"name": "toAbiType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2098,
													"name": "node",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2099,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 740,
											"character": 18
										}
									]
								},
								{
									"id": 1934,
									"name": "typeClass",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1935,
											"name": "typeClass",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "returns basic type class for a variable definition node\ne.g.:\n `t_uint256` becomes `uint`\n `t_struct$_Thing_$20_memory_ptr` becomes `struct`"
											},
											"parameters": [
												{
													"id": 1936,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 43,
											"character": 25
										}
									]
								},
								{
									"id": 1937,
									"name": "typeClassLongForm",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1938,
											"name": "typeClassLongForm",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "similar to typeClass, but includes any numeric qualifiers\ne.g.:\n`t_uint256` becomes `uint256`"
											},
											"parameters": [
												{
													"id": 1939,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 57,
											"character": 33
										}
									]
								},
								{
									"id": 1940,
									"name": "typeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1941,
											"name": "typeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for user-defined types -- structs, enums, contracts\noften you can get these from referencedDeclaration, but not\nalways"
											},
											"parameters": [
												{
													"id": 1942,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 67,
											"character": 22
										}
									]
								},
								{
									"id": 1925,
									"name": "typeIdentifier",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1926,
											"name": "typeIdentifier",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1927,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 12,
											"character": 30
										}
									]
								},
								{
									"id": 1928,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1929,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1930,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 17,
											"character": 26
										}
									]
								},
								{
									"id": 1931,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1932,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the type string, but with location (if any) stripped off the end"
											},
											"parameters": [
												{
													"id": 1933,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 25,
											"character": 41
										}
									]
								},
								{
									"id": 2005,
									"name": "valueDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2006,
											"name": "valueDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "for use for mappings only!"
											},
											"parameters": [
												{
													"id": 2007,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 2008,
													"name": "scopes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "Scopes",
														"id": 1910
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 397,
											"character": 31
										}
									]
								},
								{
									"id": 1943,
									"name": "visibility",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1944,
											"name": "visibility",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "For function types; returns internal or external\n(not for use on other types! will cause an error!)\nshould only return \"internal\" or \"external\""
											},
											"parameters": [
												{
													"id": 1945,
													"name": "definition",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Visibility"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast/utils.ts",
											"line": 82,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2029
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										2084
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1924
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1998,
										1979,
										1949,
										2021,
										2080,
										2076,
										2025,
										2012,
										2100,
										2104,
										1952,
										2018,
										1955,
										1970,
										1967,
										1973,
										1985,
										1964,
										2001,
										2015,
										2091,
										2009,
										2086,
										1995,
										1976,
										1992,
										1946,
										1988,
										1982,
										1958,
										1961,
										2096,
										1934,
										1937,
										1940,
										1925,
										1928,
										1931,
										2005,
										1943
									],
									"categories": [
										{
											"title": "Definition Reading",
											"children": [
												1998,
												1979,
												1949,
												2012,
												1952,
												2018,
												1955,
												1970,
												1967,
												1973,
												1985,
												1964,
												2001,
												2015,
												2009,
												1995,
												1976,
												1992,
												1946,
												1988,
												1982,
												1958,
												1961,
												1934,
												1937,
												1940,
												1925,
												1928,
												1931,
												2005,
												1943
											]
										},
										{
											"title": "Other",
											"children": [
												2021,
												2080,
												2076,
												2025,
												2100,
												2104,
												2091,
												2086,
												2096
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1860,
							"name": "AstNode",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1903,
									"name": "anonymous",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 53,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1870,
									"name": "ast_type",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 18,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1898,
									"name": "baseType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 1865,
									"name": "canonicalName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 13,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1861,
									"name": "constant",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 9,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1904,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 54,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 1877,
									"name": "expression",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 25,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1878,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1879,
													"name": "referencedDeclaration",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 26,
															"character": 25
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1879
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 25,
													"character": 14
												}
											]
										}
									}
								},
								{
									"id": 1884,
									"name": "hexValue",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 34,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1863,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 11,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1902,
									"name": "indexed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 52,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1905,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 55,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1899,
									"name": "keyType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 49,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 1883,
									"name": "kind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 33,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1866,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1867,
									"name": "members",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 15,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AstNode",
											"id": 1860
										}
									}
								},
								{
									"id": 1862,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 10,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "mutable"
											},
											{
												"type": "stringLiteral",
												"value": "immutable"
											},
											{
												"type": "stringLiteral",
												"value": "constant"
											}
										]
									}
								},
								{
									"id": 1864,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 12,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1869,
									"name": "nodeType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 17,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1868,
									"name": "nodes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 16,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "AstNode",
											"id": 1860
										}
									}
								},
								{
									"id": 1892,
									"name": "parameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 42,
											"character": 16
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1893,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1894,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 43,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1860
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1894
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 42,
													"character": 18
												}
											]
										}
									}
								},
								{
									"id": 1886,
									"name": "parameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 36,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1887,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1888,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 37,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1860
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1888
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 36,
													"character": 14
												}
											]
										}
									}
								},
								{
									"id": 1901,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 51,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1885,
									"name": "referencedDeclaration",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 35,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 1895,
									"name": "returnParameterTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 45,
											"character": 22
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1896,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1897,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 46,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1860
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1897
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 45,
													"character": 24
												}
											]
										}
									}
								},
								{
									"id": 1889,
									"name": "returnParameters",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 39,
											"character": 18
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1890,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1891,
													"name": "parameters",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 40,
															"character": 14
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AstNode",
															"id": 1860
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1891
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 39,
													"character": 20
												}
											]
										}
									}
								},
								{
									"id": 1871,
									"name": "scope",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 19,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1872,
									"name": "src",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 20,
											"character": 5
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1882,
									"name": "stateMutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 32,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.Mutability"
									}
								},
								{
									"id": 1873,
									"name": "stateVariable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 21,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 1874,
									"name": "storageLocation",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 22,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1875,
									"name": "typeDescriptions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 23,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "TypeDescriptions",
										"id": 1857
									}
								},
								{
									"id": 1876,
									"name": "typeName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 1906,
									"name": "usedErrors",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 56,
											"character": 12
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 1880,
									"name": "value",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 28,
											"character": 7
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										]
									}
								},
								{
									"id": 1900,
									"name": "valueType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 50,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 1881,
									"name": "visibility",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 29,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1903,
										1870,
										1898,
										1865,
										1861,
										1904,
										1877,
										1884,
										1863,
										1902,
										1905,
										1899,
										1883,
										1866,
										1867,
										1862,
										1864,
										1869,
										1868,
										1892,
										1886,
										1901,
										1885,
										1895,
										1889,
										1871,
										1872,
										1882,
										1873,
										1874,
										1875,
										1876,
										1906,
										1880,
										1900,
										1881
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 8,
									"character": 24
								}
							],
							"extendedBy": [
								{
									"type": "reference",
									"name": "EventParameterNode",
									"id": 2029
								}
							]
						},
						{
							"id": 1907,
							"name": "AstNodes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1908,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1909,
											"name": "nodeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 62,
									"character": 25
								}
							]
						},
						{
							"id": 1910,
							"name": "Scopes",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 1911,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 1912,
											"name": "nodeId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1913,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1922,
													"name": "definition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 77,
															"character": 14
														}
													],
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 1914,
													"name": "id",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 69,
															"character": 6
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1916,
													"name": "parentId",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 71,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 1917,
													"name": "pointer",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 72,
															"character": 11
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1915,
													"name": "sourceId",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 70,
															"character": 12
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1918,
													"name": "variables",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/ast/types.ts",
															"line": 73,
															"character": 13
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reflection",
															"declaration": {
																"id": 1919,
																"name": "__type",
																"kind": 65536,
																"kindString": "Type literal",
																"flags": {},
																"children": [
																	{
																		"id": 1921,
																		"name": "id",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "codec/lib/ast/types.ts",
																				"line": 75,
																				"character": 8
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "number"
																		}
																	},
																	{
																		"id": 1920,
																		"name": "name",
																		"kind": 32,
																		"kindString": "Variable",
																		"flags": {},
																		"sources": [
																			{
																				"fileName": "codec/lib/ast/types.ts",
																				"line": 74,
																				"character": 10
																			}
																		],
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"groups": [
																	{
																		"title": "Variables",
																		"kind": 32,
																		"children": [
																			1921,
																			1920
																		]
																	}
																],
																"sources": [
																	{
																		"fileName": "codec/lib/ast/types.ts",
																		"line": 73,
																		"character": 15
																	}
																]
															}
														}
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1922,
														1914,
														1916,
														1917,
														1915,
														1918
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/ast/types.ts",
													"line": 68,
													"character": 19
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 67,
									"character": 23
								}
							]
						},
						{
							"id": 1857,
							"name": "TypeDescriptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1858,
									"name": "typeIdentifier",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 4,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1859,
									"name": "typeString",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast/types.ts",
											"line": 5,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1858,
										1859
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast/types.ts",
									"line": 3,
									"character": 33
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								2111,
								1923
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1860,
								1907,
								1910,
								1857
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 380,
							"character": 8
						}
					]
				},
				{
					"id": 1843,
					"name": "AstConstant",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For reading/decoding constants expressed as AST nodes"
					},
					"children": [
						{
							"id": 1849,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1850,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:ast:decode\")"
								},
								{
									"id": 1851,
									"name": "decodeConstant",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1852,
											"name": "decodeConstant",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1853,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1854,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 2426
													}
												},
												{
													"id": 1855,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/decode/index.ts",
											"line": 14,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1850
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1851
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1844,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1845,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:ast:read\")"
								},
								{
									"id": 1846,
									"name": "readDefinition",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1847,
											"name": "readDefinition",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1848,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 2426
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/ast-constant/read/index.ts",
											"line": 11,
											"character": 30
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1845
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1846
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/ast-constant/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1849,
								1844
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 370,
							"character": 10
						}
					]
				},
				{
					"id": 1125,
					"name": "Basic",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of primitives and constants"
					},
					"children": [
						{
							"id": 1201,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1202,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/basic/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:basic:allocate\")"
								},
								{
									"id": 1203,
									"name": "byteLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1204,
											"name": "byteLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1205,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1206,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/allocate/index.ts",
											"line": 9,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1202
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1203
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/index.ts",
									"line": 18,
									"character": 8
								}
							]
						},
						{
							"id": 1126,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1127,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:basic:decode\")"
								},
								{
									"id": 1153,
									"name": "checkPadding",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1154,
											"name": "checkPadding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1155,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1156,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1157,
													"name": "paddingMode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingMode",
														"id": 1100
													}
												},
												{
													"id": 1158,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 649,
											"character": 21
										}
									]
								},
								{
									"id": 1170,
									"name": "checkPaddingDirect",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1171,
											"name": "checkPaddingDirect",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1172,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1173,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1174,
													"name": "paddingType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingType",
														"id": 1101
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 697,
											"character": 27
										}
									]
								},
								{
									"id": 1186,
									"name": "checkPaddingLeft",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1187,
											"name": "checkPaddingLeft",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1188,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1189,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 751,
											"character": 32
										}
									]
								},
								{
									"id": 1182,
									"name": "checkPaddingRight",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1183,
											"name": "checkPaddingRight",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1184,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1185,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 745,
											"character": 26
										}
									]
								},
								{
									"id": 1190,
									"name": "checkPaddingSigned",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1191,
											"name": "checkPaddingSigned",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1192,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1193,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 756,
											"character": 27
										}
									]
								},
								{
									"id": 1128,
									"name": "decodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1129,
											"name": "decodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1130,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1131,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 2383
													}
												},
												{
													"id": 1132,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1133,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 15,
											"character": 28
										}
									]
								},
								{
									"id": 1134,
									"name": "decodeContract",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1135,
											"name": "decodeContract",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1136,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1137,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 347
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 455,
											"character": 31
										}
									]
								},
								{
									"id": 1138,
									"name": "decodeContractAndContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1139,
											"name": "decodeContractAndContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1140,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1141,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "ContractInfoAndContext"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 462,
											"character": 34
										}
									]
								},
								{
									"id": 1142,
									"name": "decodeExternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1143,
											"name": "decodeExternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1144,
													"name": "addressBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1145,
													"name": "selectorBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1146,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.FunctionExternalValueInfo",
														"id": 462
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 498,
											"character": 39
										}
									]
								},
								{
									"id": 1147,
									"name": "decodeInternalFunction",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1148,
											"name": "decodeInternalFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1149,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "FunctionInternalType",
														"id": 99
													}
												},
												{
													"id": 1150,
													"name": "deployedPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1151,
													"name": "constructorPcBytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1152,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Values.FunctionInternalResult",
												"id": 479
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 537,
											"character": 38
										}
									]
								},
								{
									"id": 1179,
									"name": "defaultPaddingType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1180,
											"name": "defaultPaddingType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1181,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 728,
											"character": 27
										}
									]
								},
								{
									"id": 1175,
									"name": "getPaddingType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1176,
											"name": "getPaddingType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1177,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1178,
													"name": "paddingMode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingMode",
														"id": 1100
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 712,
											"character": 23
										}
									]
								},
								{
									"id": 1159,
									"name": "removePadding",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1160,
											"name": "removePadding",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1161,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1162,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1163,
													"name": "paddingMode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingMode",
														"id": 1100
													}
												},
												{
													"id": 1164,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 672,
											"character": 22
										}
									]
								},
								{
									"id": 1165,
									"name": "removePaddingDirect",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1166,
											"name": "removePaddingDirect",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1167,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												},
												{
													"id": 1168,
													"name": "length",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 1169,
													"name": "paddingType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "PaddingType",
														"id": 1101
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/decode/index.ts",
											"line": 683,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1127
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1153,
										1170,
										1186,
										1182,
										1190,
										1128,
										1134,
										1138,
										1142,
										1147,
										1179,
										1175,
										1159,
										1165
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1197,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1198,
									"name": "encodeBasic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1199,
											"name": "encodeBasic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Handles encoding of basic types; yes the input type is broader than\nit should be but it's hard to fix this without causing other problems,\nsorry!"
											},
											"parameters": [
												{
													"id": 1200,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Value",
														"id": 361
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/basic/encode/index.ts",
											"line": 15,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1198
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1198
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/basic/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1201,
								1126,
								1197
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 290,
							"character": 8
						}
					]
				},
				{
					"id": 1207,
					"name": "Bytes",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Contains functions for dealing with raw bytestrings"
					},
					"children": [
						{
							"id": 1217,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1218,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:bytes:decode\")"
								},
								{
									"id": 1219,
									"name": "decodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1220,
											"name": "decodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1221,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "BytesTypeDynamic",
																"id": 29
															},
															{
																"type": "reference",
																"name": "StringType",
																"id": 47
															}
														]
													}
												},
												{
													"id": 1222,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 2383
													}
												},
												{
													"id": 1223,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1224,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 13,
											"character": 28
										}
									]
								},
								{
									"id": 1225,
									"name": "decodeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1226,
											"name": "decodeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1227,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Values.StringValueInfo",
												"id": 302
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/decode/index.ts",
											"line": 56,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1218
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1219,
										1225
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1228,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1229,
									"name": "encodeBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1230,
											"name": "encodeBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes without padding, length, etc!"
											},
											"parameters": [
												{
													"id": 1231,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "BytesDynamicValue",
																"id": 282
															},
															{
																"type": "reference",
																"name": "StringValue",
																"id": 297
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 14,
											"character": 27
										}
									]
								},
								{
									"id": 1232,
									"name": "stringToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1233,
											"name": "stringToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1234,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/encode/index.ts",
											"line": 37,
											"character": 22
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1229,
										1232
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1229,
												1232
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 18,
									"character": 8
								}
							]
						},
						{
							"id": 1208,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1213,
									"name": "readBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1214,
											"name": "readBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1215,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.BytesPointer",
														"id": 2387
													}
												},
												{
													"id": 1216,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2435
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 20,
											"character": 25
										}
									]
								},
								{
									"id": 1209,
									"name": "readCode",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1210,
											"name": "readCode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1211,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CodePointer",
														"id": 2416
													}
												},
												{
													"id": 1212,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2435
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/bytes/read/index.ts",
											"line": 6,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1213,
										1209
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/bytes/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1217,
								1228,
								1208
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 296,
							"character": 8
						}
					]
				},
				{
					"id": 2135,
					"name": "Compilations",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2171,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2208,
									"name": "CompilationOptions",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 2212,
											"name": "compiler",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/compilations/utils.ts",
													"line": 57,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "CompilerVersion",
												"id": 2126
											}
										},
										{
											"id": 2209,
											"name": "files",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/compilations/utils.ts",
													"line": 54,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 2211,
											"name": "shimmedCompilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/compilations/utils.ts",
													"line": 56,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2210,
											"name": "sources",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/compilations/utils.ts",
													"line": 55,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Common.Source"
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2212,
												2209,
												2211,
												2210
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 53,
											"character": 28
										}
									]
								},
								{
									"id": 2172,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:compilations:utils\")"
								},
								{
									"id": 2246,
									"name": "extractPrimarySource",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2247,
											"name": "extractPrimarySource",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "extract the primary source from a source map\n(i.e., the source for the first instruction, found\nbetween the second and third colons)"
											},
											"parameters": [
												{
													"id": 2248,
													"name": "sourceMap",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 290,
											"character": 29
										}
									]
								},
								{
									"id": 2242,
									"name": "getContractNode",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2243,
											"name": "getContractNode",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2244,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Contract",
														"id": 2149
													}
												},
												{
													"id": 2245,
													"name": "compilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Compilation",
														"id": 2136
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 239,
											"character": 31
										}
									]
								},
								{
									"id": 2261,
									"name": "getIndexToAddAt",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2262,
											"name": "getIndexToAddAt",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2263,
													"name": "sourceObject",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Source",
														"id": 2142
													}
												},
												{
													"id": 2264,
													"name": "index",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2265,
													"name": "sources",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Source",
															"id": 2142
														}
													}
												},
												{
													"id": 2266,
													"name": "unreliableSourceOrder",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2267,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2268,
															"name": "index",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/compilations/utils.ts",
																	"line": 376,
																	"character": 10
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "number"
																	},
																	{
																		"type": "intrinsic",
																		"name": "null"
																	}
																]
															}
														},
														{
															"id": 2269,
															"name": "unreliableSourceOrder",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/compilations/utils.ts",
																	"line": 376,
																	"character": 48
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																2268,
																2269
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/compilations/utils.ts",
															"line": 376,
															"character": 2
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 371,
											"character": 24
										}
									]
								},
								{
									"id": 2256,
									"name": "inferLanguage",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2257,
											"name": "inferLanguage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2258,
													"name": "ast",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "AstNode",
																"id": 1860
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 2259,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												},
												{
													"id": 2260,
													"name": "sourcePath",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 339,
											"character": 22
										}
									]
								},
								{
									"id": 2253,
									"name": "isGeneratedSources",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2254,
											"name": "isGeneratedSources",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2255,
													"name": "sources",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "Source",
																	"id": 2142
																}
															},
															{
																"type": "reference",
																"name": "GeneratedSources"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 325,
											"character": 27
										}
									]
								},
								{
									"id": 2249,
									"name": "normalizeGeneratedSources",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2250,
											"name": "normalizeGeneratedSources",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2251,
													"name": "generatedSources",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"name": "Source",
																	"id": 2142
																}
															},
															{
																"type": "reference",
																"name": "GeneratedSources"
															}
														]
													}
												},
												{
													"id": 2252,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Source",
													"id": 2142
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 299,
											"character": 34
										}
									]
								},
								{
									"id": 2181,
									"name": "shimArtifacts",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2182,
											"name": "shimArtifacts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "wrapper around shimContracts that just returns\nthe result in a one-element array (keeping the old name\nshimArtifacts for compatibility)"
											},
											"parameters": [
												{
													"id": 2183,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "ContractObject"
																},
																{
																	"type": "reflection",
																	"declaration": {
																		"id": 2184,
																		"name": "__type",
																		"kind": 65536,
																		"kindString": "Type literal",
																		"flags": {},
																		"children": [
																			{
																				"id": 2192,
																				"name": "abi",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 57,
																						"character": 7
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "Abi"
																				}
																			},
																			{
																				"id": 2191,
																				"name": "ast",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 56,
																						"character": 7
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			},
																			{
																				"id": 2194,
																				"name": "bytecode",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 59,
																						"character": 12
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "Bytecode"
																				}
																			},
																			{
																				"id": 2196,
																				"name": "compiler",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 61,
																						"character": 12
																					}
																				],
																				"type": {
																					"type": "reflection",
																					"declaration": {
																						"id": 2197,
																						"name": "__type",
																						"kind": 65536,
																						"kindString": "Type literal",
																						"flags": {},
																						"children": [
																							{
																								"id": 2198,
																								"name": "name",
																								"kind": 32,
																								"kindString": "Variable",
																								"flags": {},
																								"sources": [
																									{
																										"fileName": "compile-common/dist/src/types.d.ts",
																										"line": 62,
																										"character": 12
																									}
																								],
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							},
																							{
																								"id": 2199,
																								"name": "version",
																								"kind": 32,
																								"kindString": "Variable",
																								"flags": {},
																								"sources": [
																									{
																										"fileName": "compile-common/dist/src/types.d.ts",
																										"line": 63,
																										"character": 15
																									}
																								],
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						],
																						"groups": [
																							{
																								"title": "Variables",
																								"kind": 32,
																								"children": [
																									2198,
																									2199
																								]
																							}
																						],
																						"sources": [
																							{
																								"fileName": "compile-common/dist/src/types.d.ts",
																								"line": 61,
																								"character": 13
																							}
																						]
																					}
																				}
																			},
																			{
																				"id": 2185,
																				"name": "contractName",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 50,
																						"character": 16
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2205,
																				"name": "db",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {
																					"isOptional": true
																				},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 70,
																						"character": 6
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "__type"
																				}
																			},
																			{
																				"id": 2195,
																				"name": "deployedBytecode",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 60,
																						"character": 20
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "Bytecode"
																				}
																			},
																			{
																				"id": 2204,
																				"name": "deployedGeneratedSources",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {
																					"isOptional": true
																				},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 69,
																						"character": 28
																					}
																				],
																				"type": {
																					"type": "array",
																					"elementType": {
																						"type": "reference",
																						"name": "GeneratedSource"
																					}
																				}
																			},
																			{
																				"id": 2189,
																				"name": "deployedSourceMap",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 54,
																						"character": 21
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2200,
																				"name": "devdoc",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 65,
																						"character": 10
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			},
																			{
																				"id": 2203,
																				"name": "generatedSources",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {
																					"isOptional": true
																				},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 68,
																						"character": 20
																					}
																				],
																				"type": {
																					"type": "array",
																					"elementType": {
																						"type": "reference",
																						"name": "GeneratedSource"
																					}
																				}
																			},
																			{
																				"id": 2202,
																				"name": "immutableReferences",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 67,
																						"character": 23
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "ImmutableReferences"
																				}
																			},
																			{
																				"id": 2190,
																				"name": "legacyAST",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 55,
																						"character": 13
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			},
																			{
																				"id": 2193,
																				"name": "metadata",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 58,
																						"character": 12
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2187,
																				"name": "source",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 52,
																						"character": 10
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2188,
																				"name": "sourceMap",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 53,
																						"character": 13
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2186,
																				"name": "sourcePath",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 51,
																						"character": 14
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2201,
																				"name": "userdoc",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 66,
																						"character": 11
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			}
																		],
																		"groups": [
																			{
																				"title": "Variables",
																				"kind": 32,
																				"children": [
																					2192,
																					2191,
																					2194,
																					2196,
																					2185,
																					2205,
																					2195,
																					2204,
																					2189,
																					2200,
																					2203,
																					2202,
																					2190,
																					2193,
																					2187,
																					2188,
																					2186,
																					2201
																				]
																			}
																		]
																	}
																}
															]
														}
													}
												},
												{
													"id": 2206,
													"name": "files",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												},
												{
													"id": 2207,
													"name": "shimmedCompilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Compilation",
													"id": 2136
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 45,
											"character": 29
										}
									]
								},
								{
									"id": 2177,
									"name": "shimCompilation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2178,
											"name": "shimCompilation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2179,
													"name": "inputCompilation",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Common.Compilation"
													}
												},
												{
													"id": 2180,
													"name": "shimmedCompilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "reference",
												"name": "Compilation",
												"id": 2136
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 25,
											"character": 31
										}
									]
								},
								{
									"id": 2173,
									"name": "shimCompilations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2174,
											"name": "shimCompilations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2175,
													"name": "inputCompilations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "Common.Compilation"
														}
													}
												},
												{
													"id": 2176,
													"name": "shimmedCompilationIdPrefix",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "\"shimmedcompilation\""
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Compilation",
													"id": 2136
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 13,
											"character": 32
										}
									]
								},
								{
									"id": 2213,
									"name": "shimContracts",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2214,
											"name": "shimContracts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "shims a bunch of contracts (\"artifacts\", though not necessarily)\nto a compilation.  usually used via one of the above functions.\nNote: if you pass in options.sources, options.files will be ignored.\nNote: if you pass in options.sources, sources will not have\ncompiler set unless you also pass in options.compiler; in this case\nyou should set that up separately, as in shimCompilation()."
											},
											"parameters": [
												{
													"id": 2215,
													"name": "artifacts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "ContractObject"
																},
																{
																	"type": "reflection",
																	"declaration": {
																		"id": 2216,
																		"name": "__type",
																		"kind": 65536,
																		"kindString": "Type literal",
																		"flags": {},
																		"children": [
																			{
																				"id": 2224,
																				"name": "abi",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 57,
																						"character": 7
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "Abi"
																				}
																			},
																			{
																				"id": 2223,
																				"name": "ast",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 56,
																						"character": 7
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			},
																			{
																				"id": 2226,
																				"name": "bytecode",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 59,
																						"character": 12
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "Bytecode"
																				}
																			},
																			{
																				"id": 2228,
																				"name": "compiler",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 61,
																						"character": 12
																					}
																				],
																				"type": {
																					"type": "reflection",
																					"declaration": {
																						"id": 2229,
																						"name": "__type",
																						"kind": 65536,
																						"kindString": "Type literal",
																						"flags": {},
																						"children": [
																							{
																								"id": 2230,
																								"name": "name",
																								"kind": 32,
																								"kindString": "Variable",
																								"flags": {},
																								"sources": [
																									{
																										"fileName": "compile-common/dist/src/types.d.ts",
																										"line": 62,
																										"character": 12
																									}
																								],
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							},
																							{
																								"id": 2231,
																								"name": "version",
																								"kind": 32,
																								"kindString": "Variable",
																								"flags": {},
																								"sources": [
																									{
																										"fileName": "compile-common/dist/src/types.d.ts",
																										"line": 63,
																										"character": 15
																									}
																								],
																								"type": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						],
																						"groups": [
																							{
																								"title": "Variables",
																								"kind": 32,
																								"children": [
																									2230,
																									2231
																								]
																							}
																						],
																						"sources": [
																							{
																								"fileName": "compile-common/dist/src/types.d.ts",
																								"line": 61,
																								"character": 13
																							}
																						]
																					}
																				}
																			},
																			{
																				"id": 2217,
																				"name": "contractName",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 50,
																						"character": 16
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2237,
																				"name": "db",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {
																					"isOptional": true
																				},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 70,
																						"character": 6
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "__type"
																				}
																			},
																			{
																				"id": 2227,
																				"name": "deployedBytecode",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 60,
																						"character": 20
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "Bytecode"
																				}
																			},
																			{
																				"id": 2236,
																				"name": "deployedGeneratedSources",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {
																					"isOptional": true
																				},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 69,
																						"character": 28
																					}
																				],
																				"type": {
																					"type": "array",
																					"elementType": {
																						"type": "reference",
																						"name": "GeneratedSource"
																					}
																				}
																			},
																			{
																				"id": 2221,
																				"name": "deployedSourceMap",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 54,
																						"character": 21
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2232,
																				"name": "devdoc",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 65,
																						"character": 10
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			},
																			{
																				"id": 2235,
																				"name": "generatedSources",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {
																					"isOptional": true
																				},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 68,
																						"character": 20
																					}
																				],
																				"type": {
																					"type": "array",
																					"elementType": {
																						"type": "reference",
																						"name": "GeneratedSource"
																					}
																				}
																			},
																			{
																				"id": 2234,
																				"name": "immutableReferences",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 67,
																						"character": 23
																					}
																				],
																				"type": {
																					"type": "reference",
																					"name": "ImmutableReferences"
																				}
																			},
																			{
																				"id": 2222,
																				"name": "legacyAST",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 55,
																						"character": 13
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			},
																			{
																				"id": 2225,
																				"name": "metadata",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 58,
																						"character": 12
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2219,
																				"name": "source",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 52,
																						"character": 10
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2220,
																				"name": "sourceMap",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 53,
																						"character": 13
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2218,
																				"name": "sourcePath",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 51,
																						"character": 14
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "string"
																				}
																			},
																			{
																				"id": 2233,
																				"name": "userdoc",
																				"kind": 32,
																				"kindString": "Variable",
																				"flags": {},
																				"sources": [
																					{
																						"fileName": "compile-common/dist/src/types.d.ts",
																						"line": 66,
																						"character": 11
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "object"
																				}
																			}
																		],
																		"groups": [
																			{
																				"title": "Variables",
																				"kind": 32,
																				"children": [
																					2224,
																					2223,
																					2226,
																					2228,
																					2217,
																					2237,
																					2227,
																					2236,
																					2221,
																					2232,
																					2235,
																					2234,
																					2222,
																					2225,
																					2219,
																					2220,
																					2218,
																					2233
																				]
																			}
																		]
																	}
																}
															]
														}
													}
												},
												{
													"id": 2238,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilationOptions",
														"id": 2208
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Compilation",
												"id": 2136
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 68,
											"character": 29
										}
									]
								},
								{
									"id": 2270,
									"name": "simpleShimSourceMap",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2271,
											"name": "simpleShimSourceMap",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert Vyper source maps to solidity ones\n(note we won't bother handling the case where the compressed\nversion doesn't exist; that will have to wait for a later version)"
											},
											"parameters": [
												{
													"id": 2272,
													"name": "sourceMap",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"name": "VyperSourceMap",
																"id": 2161
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 427,
											"character": 35
										}
									]
								},
								{
									"id": 2239,
									"name": "sourceIndexForAst",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2240,
											"name": "sourceIndexForAst",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2241,
													"name": "ast",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compilations/utils.ts",
											"line": 226,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2208
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2172
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2246,
										2242,
										2261,
										2256,
										2253,
										2249,
										2181,
										2177,
										2173,
										2213,
										2270,
										2239
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 2136,
							"name": "Compilation",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An individual compilation."
							},
							"children": [
								{
									"id": 2141,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The compiler used in the compilation.  For internal compatibility\npurposes, this may technically be left out if the compiler is instead\nspecified on each source and contract, but please don't actually do that."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 44,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 2126
									}
								},
								{
									"id": 2140,
									"name": "contracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A list of contracts involved in the compilation."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 38,
											"character": 11
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Contract",
											"id": 2149
										}
									}
								},
								{
									"id": 2137,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The compilation's ID."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 21,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2139,
									"name": "sources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A list of sources involved in the compilation.  These must be ordered according\nto their compilation indices.  (If there is for some reason a gap in the\ncompilation indices, a corresponding gap must be left in the sources array.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 34,
											"character": 9
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Source",
											"id": 2142
										}
									}
								},
								{
									"id": 2138,
									"name": "unreliableSourceOrder",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only intended for internal use.  It indicates\nthat the order on the sources should be disregarded and disables functionality\nthat relies on such an order.  (E.g., the debugger will throw an exception if\nthis is set.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 28,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2141,
										2140,
										2137,
										2139,
										2138
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 17,
									"character": 28
								}
							]
						},
						{
							"id": 2149,
							"name": "Contract",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Represents a contract in a compilation."
							},
							"children": [
								{
									"id": 2155,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The contract's ABI."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 113,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "SchemaAbi"
									}
								},
								{
									"id": 2151,
									"name": "bytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 95,
											"character": 10
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode"
											}
										]
									}
								},
								{
									"id": 2157,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 124,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 2126
									}
								},
								{
									"id": 2150,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The contract's name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 89,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2152,
									"name": "deployedBytecode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed bytecode; may be given either as a string\nin the old artifacts format, or as a bytecode object in the new\ncompilation format."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 101,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "Bytecode"
											}
										]
									}
								},
								{
									"id": 2160,
									"name": "deployedGeneratedSources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed generated sources object as output by Solidity 0.7.2 or later.\nNote that this will be a sparse array."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 138,
											"character": 26
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Source",
											"id": 2142
										}
									}
								},
								{
									"id": 2154,
									"name": "deployedSourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's deployed source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 109,
											"character": 19
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "VyperSourceMap",
												"id": 2161
											}
										]
									}
								},
								{
									"id": 2159,
									"name": "generatedSources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's generated sources object as output by Solidity 0.7.2 or later.\nNote that this will be a sparse array."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 133,
											"character": 18
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Source",
											"id": 2142
										}
									}
								},
								{
									"id": 2156,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's immutable references object as output by Solidity 0.6.5\nor later."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 118,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 2158,
									"name": "primarySourceId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The ID of the contract's primary source."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 128,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2153,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The contract's constructor source map."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 105,
											"character": 11
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"name": "VyperSourceMap",
												"id": 2161
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2155,
										2151,
										2157,
										2150,
										2152,
										2160,
										2154,
										2159,
										2156,
										2158,
										2153
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 85,
									"character": 25
								}
							]
						},
						{
							"id": 2142,
							"name": "Source",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Represents a source in a compilation."
							},
							"children": [
								{
									"id": 2147,
									"name": "ast",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's abstract syntax tree."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 73,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 2148,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This field is a compatibility hack only inteded for internal use.\n(It allows the compiler to be set on a source if none is set on the\ncompilation as a whole; please don't do that.)"
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 79,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 2126
									}
								},
								{
									"id": 2143,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's ID.  For internal compatibility purposes, this may technically\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 55,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2146,
									"name": "language",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The language for the source file.  For compatibility purposes, this may technicaly\nbe left out, but please include it."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 69,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2145,
									"name": "source",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source text."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 64,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2144,
									"name": "sourcePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The source's file path.  If internal is true, will not be a real file path but\nrather just an arbitrary name."
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 60,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2147,
										2148,
										2143,
										2146,
										2145,
										2144
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 50,
									"character": 23
								}
							]
						},
						{
							"id": 2161,
							"name": "VyperSourceMap",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2162,
									"name": "pc_jump_map",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 144,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2163,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2164,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2165,
															"name": "pc",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "stringLiteral",
																"value": "-"
															},
															{
																"type": "stringLiteral",
																"value": "i"
															},
															{
																"type": "stringLiteral",
																"value": "o"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/compilations/types.ts",
													"line": 144,
													"character": 14
												}
											]
										}
									}
								},
								{
									"id": 2166,
									"name": "pc_pos_map",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 147,
											"character": 12
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2167,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2168,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2169,
															"name": "pc",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/compilations/types.ts",
													"line": 147,
													"character": 13
												}
											]
										}
									}
								},
								{
									"id": 2170,
									"name": "pc_pos_map_compressed",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compilations/types.ts",
											"line": 150,
											"character": 23
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2162,
										2166,
										2170
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compilations/types.ts",
									"line": 141,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								2171
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2136,
								2149,
								2142,
								2161
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 386,
							"character": 8
						}
					]
				},
				{
					"id": 2125,
					"name": "Compiler",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2130,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2131,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:compiler:utils\")"
								},
								{
									"id": 2132,
									"name": "solidityFamily",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2133,
											"name": "solidityFamily",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2134,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "SolidityFamily",
												"id": 2129
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/compiler/utils.ts",
											"line": 7,
											"character": 30
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2131
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2132
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 2126,
							"name": "CompilerVersion",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2127,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 2,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2128,
									"name": "version",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/compiler/types.ts",
											"line": 3,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2127,
										2128
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 1,
									"character": 32
								}
							]
						},
						{
							"id": 2129,
							"name": "SolidityFamily",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/compiler/types.ts",
									"line": 11,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "unknown"
									},
									{
										"type": "stringLiteral",
										"value": "pre-0.5.0"
									},
									{
										"type": "stringLiteral",
										"value": "0.5.x"
									},
									{
										"type": "stringLiteral",
										"value": "0.8.x"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								2130
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2126
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2129
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 383,
							"character": 8
						}
					]
				},
				{
					"id": 2273,
					"name": "Contexts",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2309,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2310,
									"name": "contextToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2311,
											"name": "contextToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2312,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 2277
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.ContractType",
												"id": 177
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 4,
											"character": 29
										}
									]
								},
								{
									"id": 2313,
									"name": "makeTypeId",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2314,
											"name": "makeTypeId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2315,
													"name": "astId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2316,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/import/index.ts",
											"line": 29,
											"character": 26
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2310,
										2313
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 2317,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2330,
									"name": "CborInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 2335,
											"name": "cbor",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/contexts/utils.ts",
													"line": 242,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2333,
											"name": "cborEnd",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/contexts/utils.ts",
													"line": 240,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2332,
											"name": "cborLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/contexts/utils.ts",
													"line": 239,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 2334,
											"name": "cborLengthHex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/contexts/utils.ts",
													"line": 241,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2336,
											"name": "cborSegment",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/contexts/utils.ts",
													"line": 243,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2331,
											"name": "cborStart",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/contexts/utils.ts",
													"line": 238,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												2335,
												2333,
												2332,
												2334,
												2336,
												2331
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 237,
											"character": 18
										}
									]
								},
								{
									"id": 2318,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:contexts:utils\")"
								},
								{
									"id": 2343,
									"name": "detectCompilerInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2344,
											"name": "detectCompilerInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2345,
													"name": "decoded",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 292,
											"character": 27
										}
									]
								},
								{
									"id": 2337,
									"name": "extractCborInfo",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2338,
											"name": "extractCborInfo",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2339,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "CborInfo",
														"id": 2330
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 246,
											"character": 24
										}
									]
								},
								{
									"id": 2319,
									"name": "findContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2320,
											"name": "findContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2321,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Contexts",
														"id": 2274
													}
												},
												{
													"id": 2322,
													"name": "binary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Context",
														"id": 2277
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 10,
											"character": 27
										}
									]
								},
								{
									"id": 2340,
									"name": "isObjectWithHash",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 2341,
											"name": "isObjectWithHash",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2342,
													"name": "decoded",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 274,
											"character": 25
										}
									]
								},
								{
									"id": 2323,
									"name": "matchContext",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2324,
											"name": "matchContext",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2325,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Context",
														"id": 2277
													}
												},
												{
													"id": 2326,
													"name": "givenBinary",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 37,
											"character": 28
										}
									]
								},
								{
									"id": 2327,
									"name": "normalizeContexts",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2328,
											"name": "normalizeContexts",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2329,
													"name": "contexts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Contexts",
														"id": 2274
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Contexts",
												"id": 2274
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/contexts/utils.ts",
											"line": 66,
											"character": 33
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										2330
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2318
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2343,
										2337,
										2319,
										2340,
										2323,
										2327
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 2277,
							"name": "Context",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2286,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 22,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "FunctionAbiBySelectors",
										"id": 1530
									}
								},
								{
									"id": 2279,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 13,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2293,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 30,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2292,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 29,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 2126
									}
								},
								{
									"id": 2278,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 12,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2283,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 19,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2285,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 21,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 2282,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 18,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2288,
									"name": "fallbackAbi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 24,
											"character": 13
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2289,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2290,
													"name": "fallback",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 26,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "FallbackEntry"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 2291,
													"name": "receive",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/contexts/types.ts",
															"line": 27,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "ReceiveEntry"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														2290,
														2291
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/contexts/types.ts",
													"line": 24,
													"character": 15
												}
											]
										}
									}
								},
								{
									"id": 2281,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 17,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 2280,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 16,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2284,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 20,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 2287,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 23,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2286,
										2279,
										2293,
										2292,
										2278,
										2283,
										2285,
										2282,
										2288,
										2281,
										2280,
										2284,
										2287
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 11,
									"character": 24
								}
							]
						},
						{
							"id": 2274,
							"name": "Contexts",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 2275,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 2276,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 2277
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 7,
									"character": 25
								}
							]
						},
						{
							"id": 2294,
							"name": "DebuggerContext",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2303,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 46,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "Abi.Abi"
									}
								},
								{
									"id": 2296,
									"name": "binary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 37,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2307,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 50,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2306,
									"name": "compiler",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 49,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CompilerVersion",
										"id": 2126
									}
								},
								{
									"id": 2295,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 36,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2300,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 43,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2302,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 45,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 2299,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 42,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2298,
									"name": "immutableReferences",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 41,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "ImmutableReferences"
									}
								},
								{
									"id": 2297,
									"name": "isConstructor",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 40,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2301,
									"name": "linearizedBaseContracts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 44,
											"character": 25
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								},
								{
									"id": 2308,
									"name": "payable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 51,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2305,
									"name": "primarySource",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 48,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2304,
									"name": "sourceMap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/contexts/types.ts",
											"line": 47,
											"character": 11
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2303,
										2296,
										2307,
										2306,
										2295,
										2300,
										2302,
										2299,
										2298,
										2297,
										2301,
										2308,
										2305,
										2304
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/contexts/types.ts",
									"line": 35,
									"character": 32
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								2309,
								2317
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2277,
								2274,
								2294
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 389,
							"character": 8
						}
					]
				},
				{
					"id": 2346,
					"name": "Conversion",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2347,
							"name": "debug",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 2,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Debugger"
							},
							"defaultValue": " debugModule(\"codec:conversion\")"
						},
						{
							"id": 2379,
							"name": "cleanBool",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2380,
									"name": "cleanBool",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2381,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Format.Values.ElementaryResult",
												"id": 363
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Format.Values.ElementaryResult",
										"id": 363
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 181,
									"character": 25
								}
							]
						},
						{
							"id": 2376,
							"name": "countDecimalPlaces",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2377,
									"name": "countDecimalPlaces",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2378,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 173,
									"character": 34
								}
							]
						},
						{
							"id": 2372,
							"name": "shiftBigDown",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2373,
									"name": "shiftBigDown",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2374,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 2375,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 166,
									"character": 28
								}
							]
						},
						{
							"id": 2368,
							"name": "shiftBigUp",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2369,
									"name": "shiftBigUp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2370,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Big"
											}
										},
										{
											"id": 2371,
											"name": "decimalPlaces",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 159,
									"character": 26
								}
							]
						},
						{
							"id": 2348,
							"name": "toBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2349,
									"name": "toBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 2350,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "undefined | string | number | BN | Uint8Array | Big"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Big"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 12,
									"character": 20
								}
							]
						},
						{
							"id": 2357,
							"name": "toBig",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2358,
									"name": "toBig",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2359,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Big"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 57,
									"character": 21
								}
							]
						},
						{
							"id": 2354,
							"name": "toBigInt",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2355,
									"name": "toBigInt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2356,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BigInt"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 49,
									"character": 24
								}
							]
						},
						{
							"id": 2364,
							"name": "toBytes",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2365,
									"name": "toBytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2366,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "BN"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "reference",
														"name": "Big"
													}
												]
											}
										},
										{
											"id": 2367,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 101,
									"character": 23
								}
							]
						},
						{
							"id": 2360,
							"name": "toHexString",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2361,
									"name": "toHexString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 2362,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array | BN"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "BN"
													}
												]
											}
										},
										{
											"id": 2363,
											"name": "padLength",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "number - minimum desired byte length (left-pad with zeroes)"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"defaultValue": "0"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 68,
									"character": 27
								}
							]
						},
						{
							"id": 2351,
							"name": "toSignedBN",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2352,
									"name": "toSignedBN",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 2353,
											"name": "bytes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Uint8Array"
											},
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/conversion.ts",
									"line": 38,
									"character": 26
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2347
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2379,
								2376,
								2372,
								2368,
								2348,
								2357,
								2354,
								2364,
								2360,
								2351
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 392,
							"character": 8
						}
					]
				},
				{
					"id": 2434,
					"name": "Evm",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2504,
							"name": "Import",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2505,
									"name": "functionTableEntryToType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2506,
											"name": "functionTableEntryToType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2507,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "InternalFunction",
														"id": 2470
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 179
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 6,
											"character": 40
										}
									]
								},
								{
									"id": 2508,
									"name": "makeInternalFunctionId",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2509,
											"name": "makeInternalFunctionId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2510,
													"name": "functionEntry",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "InternalFunction",
														"id": 2470
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/import/index.ts",
											"line": 23,
											"character": 38
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2505,
										2508
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 2485,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2489,
									"name": "ADDRESS_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 10,
											"character": 25
										}
									],
									"type": {
										"type": "unknown",
										"name": "20"
									},
									"defaultValue": "20"
								},
								{
									"id": 2492,
									"name": "MAX_WORD",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 13,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "BN"
									},
									"defaultValue": " new BN(-1).toTwos(WORD_SIZE * 8)"
								},
								{
									"id": 2491,
									"name": "PC_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 12,
											"character": 20
										}
									],
									"type": {
										"type": "unknown",
										"name": "4"
									},
									"defaultValue": "4"
								},
								{
									"id": 2490,
									"name": "SELECTOR_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 11,
											"character": 26
										}
									],
									"type": {
										"type": "unknown",
										"name": "4"
									},
									"defaultValue": "4"
								},
								{
									"id": 2488,
									"name": "WORD_SIZE",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 9,
											"character": 22
										}
									],
									"type": {
										"type": "unknown",
										"name": "32"
									},
									"defaultValue": "32"
								},
								{
									"id": 2487,
									"name": "Web3Utils",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 6,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": " require(\"web3-utils\")"
								},
								{
									"id": 2493,
									"name": "ZERO_ADDRESS",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isExported": true,
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 14,
											"character": 25
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": " \"0x\" + \"00\".repeat(ADDRESS_SIZE)"
								},
								{
									"id": 2486,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:evm:utils\")"
								},
								{
									"id": 2497,
									"name": "equalData",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2498,
											"name": "equalData",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2499,
													"name": "bytes1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 2500,
													"name": "bytes2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 38,
											"character": 25
										}
									]
								},
								{
									"id": 2494,
									"name": "keccak256",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2495,
											"name": "keccak256",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2496,
													"name": "args",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 22,
											"character": 25
										}
									]
								},
								{
									"id": 2501,
									"name": "toAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2502,
											"name": "toAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2503,
													"name": "bytes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Uint8Array"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/evm/utils.ts",
											"line": 56,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										2489,
										2492,
										2491,
										2490,
										2488,
										2487,
										2493,
										2486
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										2497,
										2494,
										2501
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 2459,
							"name": "AllocationInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2462,
									"name": "abi",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 49,
											"character": 5
										}
									],
									"type": {
										"type": "reference",
										"name": "AbiAllocations",
										"id": 1239
									}
								},
								{
									"id": 2463,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 50,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataAllocations"
									}
								},
								{
									"id": 2465,
									"name": "event",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 52,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "EventAllocations"
									}
								},
								{
									"id": 2461,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 48,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "MemoryAllocations",
										"id": 1610
									}
								},
								{
									"id": 2464,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 51,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "ReturndataAllocations",
										"id": 1296
									}
								},
								{
									"id": 2466,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 53,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "StateAllocations",
										"id": 1740
									}
								},
								{
									"id": 2460,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 47,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "StorageAllocations",
										"id": 1731
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2462,
										2463,
										2465,
										2461,
										2464,
										2466,
										2460
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 46,
									"character": 31
								}
							]
						},
						{
							"id": 2451,
							"name": "EvmInfo",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2455,
									"name": "allocations",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 40,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 2459
									}
								},
								{
									"id": 2456,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 41,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "Contexts",
										"id": 2274
									}
								},
								{
									"id": 2457,
									"name": "currentContext",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 42,
											"character": 16
										}
									],
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 2277
									}
								},
								{
									"id": 2458,
									"name": "internalFunctionsTable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 43,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"name": "InternalFunctions",
										"id": 2467
									}
								},
								{
									"id": 2453,
									"name": "mappingKeys",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 38,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Storage.Slot",
											"id": 1704
										}
									}
								},
								{
									"id": 2452,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 37,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "EvmState",
										"id": 2435
									}
								},
								{
									"id": 2454,
									"name": "userDefinedTypes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 39,
											"character": 18
										}
									],
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 216
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2455,
										2456,
										2457,
										2458,
										2453,
										2452,
										2454
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 36,
									"character": 24
								}
							]
						},
						{
							"id": 2435,
							"name": "EvmState",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2439,
									"name": "calldata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 22,
											"character": 10
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2440,
									"name": "code",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 23,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2445,
									"name": "eventdata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 27,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2446,
									"name": "eventtopics",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 28,
											"character": 13
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 2438,
									"name": "memory",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 21,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2447,
									"name": "returndata",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 29,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2441,
									"name": "specials",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2442,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 2443,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 2444,
															"name": "builtin",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Uint8Array"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/evm/types.ts",
													"line": 24,
													"character": 12
												}
											]
										}
									}
								},
								{
									"id": 2437,
									"name": "stack",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 20,
											"character": 7
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Uint8Array"
										}
									}
								},
								{
									"id": 2436,
									"name": "storage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 19,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "WordMapping",
										"id": 2448
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2439,
										2440,
										2445,
										2446,
										2438,
										2447,
										2441,
										2437,
										2436
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 18,
									"character": 25
								}
							]
						},
						{
							"id": 2470,
							"name": "InternalFunction",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2472,
									"name": "compilationId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 62,
											"character": 15
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2481,
									"name": "contractId",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 71,
											"character": 12
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2482,
									"name": "contractKind",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 72,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.ContractKind"
									}
								},
								{
									"id": 2480,
									"name": "contractName",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 70,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2479,
									"name": "contractNode",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 69,
											"character": 14
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 2483,
									"name": "contractPayable",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 73,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2478,
									"name": "contractPointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 68,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2476,
									"name": "id",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 66,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2484,
									"name": "isDesignatedInvalid",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 74,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 2477,
									"name": "mutability",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 67,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "Common.Mutability"
									}
								},
								{
									"id": 2475,
									"name": "name",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 65,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2474,
									"name": "node",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 64,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 2473,
									"name": "pointer",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 63,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 2471,
									"name": "sourceIndex",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/evm/types.ts",
											"line": 61,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2472,
										2481,
										2482,
										2480,
										2479,
										2483,
										2478,
										2476,
										2484,
										2477,
										2475,
										2474,
										2473,
										2471
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 60,
									"character": 33
								}
							]
						},
						{
							"id": 2467,
							"name": "InternalFunctions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 2468,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 2469,
											"name": "pc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InternalFunction",
										"id": 2470
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 56,
									"character": 34
								}
							]
						},
						{
							"id": 2448,
							"name": "WordMapping",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"indexSignature": [
								{
									"id": 2449,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 2450,
											"name": "slotAddress",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/evm/types.ts",
									"line": 32,
									"character": 28
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								2504,
								2485
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2459,
								2451,
								2435,
								2470,
								2467,
								2448
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 398,
							"character": 8
						}
					]
				},
				{
					"id": 2511,
					"name": "Export",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2513,
							"name": "ResultInspector",
							"kind": 128,
							"kindString": "Class",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This class is meant to be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nfunction.  Given a [[Format.Values.Result]] `value`, one can use\n`new ResultInspector(value)` to create a ResultInspector for that value,\nwhich can be used with util.inspect() to create a human-readable string\nrepresenting the value.",
								"tags": [
									{
										"tag": "example",
										"text": "\nSuppose `value` is a Result.  In Node, the following would print to the\nconsole a human-readable representation of `value`, with colors enabled,\nno maximum depth, and no maximum array length, and lines (usually) no\nlonger than 80 characters:\n```javascript\nconsole.log(\n  util.inspect(\n    new ResultInspector(value),\n    {\n      colors: true,\n      depth: null,\n      maxArrayLength: null,\n      breakLength: 80\n    }\n  )\n);\n```\nOf course, there are many other ways to use util.inspect; see Node's\ndocumentation, linked above, for more.\n"
									}
								]
							},
							"children": [
								{
									"id": 2515,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2516,
											"name": "new ResultInspector",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 2517,
													"name": "result",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "ResultInspector",
												"id": 2513
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/inspect.ts",
											"line": 56,
											"character": 31
										}
									]
								},
								{
									"id": 2514,
									"name": "result",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/utils/inspect.ts",
											"line": 56,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"name": "Format.Values.Result",
										"id": 359
									}
								},
								{
									"id": 2518,
									"name": "__computed",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 2519,
											"name": "__computed",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2520,
													"name": "depth",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "null"
															}
														]
													}
												},
												{
													"id": 2521,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "InspectOptions",
														"id": 847
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/inspect.ts",
											"line": 60,
											"character": 23
										}
									]
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										2515
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2514
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										2518
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/utils/inspect.ts",
									"line": 55,
									"character": 28
								}
							]
						},
						{
							"id": 2529,
							"name": "MixedArray",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"indexSignature": [
								{
									"id": 2695,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 2696,
											"name": "n",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"children": [
								{
									"id": 2697,
									"name": "Array",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1368,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "ArrayConstructor"
									}
								},
								{
									"id": 2532,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Gets or sets the length of the array. This is a number one higher than the highest element defined in an array."
									},
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1209,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.length"
									}
								},
								{
									"id": 2736,
									"name": "__@iterator",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2737,
											"name": "__@iterator",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Iterator"
											},
											"type": {
												"type": "reference",
												"name": "IterableIterator",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.[Symbol.iterator]"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
											"line": 60,
											"character": 21
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.[Symbol.iterator]"
									}
								},
								{
									"id": 2744,
									"name": "__@unscopables",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2745,
											"name": "__@unscopables",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 2746,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 2747,
															"name": "copyWithin",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
																	"line": 95,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 2748,
															"name": "entries",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
																	"line": 96,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 2749,
															"name": "fill",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
																	"line": 97,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 2750,
															"name": "find",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
																	"line": 98,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 2751,
															"name": "findIndex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
																	"line": 99,
																	"character": 17
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 2752,
															"name": "keys",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
																	"line": 100,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														},
														{
															"id": 2753,
															"name": "values",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
																	"line": 101,
																	"character": 14
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																2747,
																2748,
																2749,
																2750,
																2751,
																2752,
																2753
															]
														}
													],
													"sources": [
														{
															"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
															"line": 94,
															"character": 27
														}
													]
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.[Symbol.unscopables]"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
											"line": 94,
											"character": 24
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.[Symbol.unscopables]"
									}
								},
								{
									"id": 2542,
									"name": "concat",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2543,
											"name": "concat",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Combines two or more arrays."
											},
											"parameters": [
												{
													"id": 2544,
													"name": "items",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"comment": {
														"text": "Additional items to add to the end of array1.\n"
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ConcatArray",
															"typeArguments": [
																{
																	"type": "intrinsic",
																	"name": "any"
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.concat"
											}
										},
										{
											"id": 2545,
											"name": "concat",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Combines two or more arrays."
											},
											"parameters": [
												{
													"id": 2546,
													"name": "items",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"comment": {
														"text": "Additional items to add to the end of array1.\n"
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "unknown",
																	"name": "T"
																},
																{
																	"type": "reference",
																	"name": "ConcatArray",
																	"typeArguments": [
																		{
																			"type": "unknown",
																			"name": "T"
																		}
																	]
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.concat"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1231,
											"character": 10
										},
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1236,
											"character": 10
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.concat"
									}
								},
								{
									"id": 2731,
									"name": "copyWithin",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2732,
											"name": "copyWithin",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
											},
											"parameters": [
												{
													"id": 2733,
													"name": "target",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If target is negative, it is treated as length+target where length is the\nlength of the array."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2734,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2735,
													"name": "end",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "If not specified, length of the this object is used as its default value.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "this"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.copyWithin"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 64,
											"character": 14
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.copyWithin"
									}
								},
								{
									"id": 2738,
									"name": "entries",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2739,
											"name": "entries",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns an iterable of key, value pairs for every entry in the array"
											},
											"type": {
												"type": "reference",
												"name": "IterableIterator",
												"typeArguments": [
													{
														"type": "tuple",
														"elements": [
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "any"
															}
														]
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.entries"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
											"line": 65,
											"character": 11
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.entries"
									}
								},
								{
									"id": 2584,
									"name": "every",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2585,
											"name": "every",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Determines whether all the members of an array satisfy the specified test."
											},
											"parameters": [
												{
													"id": 2586,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2587,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2588,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2589,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2590,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2591,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "unknown"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1296,
																	"character": 21
																}
															]
														}
													}
												},
												{
													"id": 2592,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.every"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1296,
											"character": 9
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.every"
									}
								},
								{
									"id": 2726,
									"name": "fill",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2727,
											"name": "fill",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the this object after filling the section identified by start and end with value"
											},
											"parameters": [
												{
													"id": 2728,
													"name": "value",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "value to fill array section with"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 2729,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2730,
													"name": "end",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "index to stop filling the array at. If end is negative, it is treated as\nlength+end.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "this"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.fill"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 53,
											"character": 8
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.fill"
									}
								},
								{
									"id": 2621,
									"name": "filter",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2622,
											"name": "filter",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the elements of an array that meet the condition specified in a callback function."
											},
											"typeParameter": [
												{
													"id": 2623,
													"name": "S",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"parameters": [
												{
													"id": 2624,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2625,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2626,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2627,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2628,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2629,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1320,
																	"character": 35
																}
															]
														}
													}
												},
												{
													"id": 2630,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "S",
													"constraint": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.filter"
											}
										},
										{
											"id": 2631,
											"name": "filter",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the elements of an array that meet the condition specified in a callback function."
											},
											"parameters": [
												{
													"id": 2632,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2633,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2634,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2635,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2636,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2637,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "unknown"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1326,
																	"character": 22
																}
															]
														}
													}
												},
												{
													"id": 2638,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.filter"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1320,
											"character": 10
										},
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1326,
											"character": 10
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.filter"
									}
								},
								{
									"id": 2698,
									"name": "find",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2699,
											"name": "find",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
											},
											"typeParameter": [
												{
													"id": 2700,
													"name": "S",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"parameters": [
												{
													"id": 2701,
													"name": "predicate",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2702,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2703,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2704,
																			"name": "this",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		},
																		{
																			"id": 2705,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2706,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2707,
																			"name": "obj",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
																	"line": 31,
																	"character": 32
																}
															]
														}
													}
												},
												{
													"id": 2708,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "typeParameter",
														"name": "S",
														"constraint": {
															"type": "intrinsic",
															"name": "any"
														}
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.find"
											}
										},
										{
											"id": 2709,
											"name": "find",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2710,
													"name": "predicate",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2711,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2712,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2713,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2714,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2715,
																			"name": "obj",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "unknown"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
																	"line": 32,
																	"character": 19
																}
															]
														}
													}
												},
												{
													"id": 2716,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.find"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 31,
											"character": 8
										},
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 32,
											"character": 8
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.find"
									}
								},
								{
									"id": 2717,
									"name": "findIndex",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2718,
											"name": "findIndex",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
											},
											"parameters": [
												{
													"id": 2719,
													"name": "predicate",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2720,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2721,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2722,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2723,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2724,
																			"name": "obj",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "unknown"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
																	"line": 43,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 2725,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.findIndex"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.core.d.ts",
											"line": 43,
											"character": 13
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.findIndex"
									}
								},
								{
									"id": 2602,
									"name": "forEach",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2603,
											"name": "forEach",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Performs the specified action for each element in an array."
											},
											"parameters": [
												{
													"id": 2604,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2605,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2606,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2607,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2608,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2609,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1308,
																	"character": 23
																}
															]
														}
													}
												},
												{
													"id": 2610,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.forEach"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1308,
											"character": 11
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.forEach"
									}
								},
								{
									"id": 2754,
									"name": "includes",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2755,
											"name": "includes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Determines whether an array includes a certain element, returning true or false as appropriate."
											},
											"parameters": [
												{
													"id": 2756,
													"name": "searchElement",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The element to search for."
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 2757,
													"name": "fromIndex",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The position in this array at which to begin searching for searchElement.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.includes"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2016.array.include.d.ts",
											"line": 27,
											"character": 12
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.includes"
									}
								},
								{
									"id": 2576,
									"name": "indexOf",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2577,
											"name": "indexOf",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the index of the first occurrence of a value in an array."
											},
											"parameters": [
												{
													"id": 2578,
													"name": "searchElement",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The value to locate in the array."
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 2579,
													"name": "fromIndex",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.indexOf"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1284,
											"character": 11
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.indexOf"
									}
								},
								{
									"id": 2547,
									"name": "join",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2548,
											"name": "join",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Adds all the elements of an array separated by the specified separator string."
											},
											"parameters": [
												{
													"id": 2549,
													"name": "separator",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.join"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1241,
											"character": 8
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.join"
									}
								},
								{
									"id": 2740,
									"name": "keys",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2741,
											"name": "keys",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns an iterable of keys in the array"
											},
											"type": {
												"type": "reference",
												"name": "IterableIterator",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.keys"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
											"line": 70,
											"character": 8
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.keys"
									}
								},
								{
									"id": 2580,
									"name": "lastIndexOf",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2581,
											"name": "lastIndexOf",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns the index of the last occurrence of a specified value in an array."
											},
											"parameters": [
												{
													"id": 2582,
													"name": "searchElement",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The value to locate in the array."
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												},
												{
													"id": 2583,
													"name": "fromIndex",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.lastIndexOf"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1290,
											"character": 15
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.lastIndexOf"
									}
								},
								{
									"id": 2611,
									"name": "map",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2612,
											"name": "map",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
											},
											"typeParameter": [
												{
													"id": 2613,
													"name": "U",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {}
												}
											],
											"parameters": [
												{
													"id": 2614,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2615,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2616,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2617,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2618,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2619,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "typeParameter",
																		"name": "U"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1314,
																	"character": 22
																}
															]
														}
													}
												},
												{
													"id": 2620,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "U"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.map"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1314,
											"character": 7
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.map"
									}
								},
								{
									"id": 2537,
									"name": "pop",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2538,
											"name": "pop",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Removes the last element from an array and returns it."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.pop"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1221,
											"character": 7
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.pop"
									}
								},
								{
									"id": 2539,
									"name": "push",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2540,
											"name": "push",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Appends new elements to an array, and returns the new length of the array."
											},
											"parameters": [
												{
													"id": 2541,
													"name": "items",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"comment": {
														"text": "New elements of the Array.\n"
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.push"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1226,
											"character": 8
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.push"
									}
								},
								{
									"id": 2639,
									"name": "reduce",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2640,
											"name": "reduce",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
											},
											"parameters": [
												{
													"id": 2641,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2642,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2643,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2644,
																			"name": "previousValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2645,
																			"name": "currentValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2646,
																			"name": "currentIndex",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2647,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1332,
																	"character": 22
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.reduce"
											}
										},
										{
											"id": 2648,
											"name": "reduce",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2649,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2650,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2651,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2652,
																			"name": "previousValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2653,
																			"name": "currentValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2654,
																			"name": "currentIndex",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2655,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1333,
																	"character": 22
																}
															]
														}
													}
												},
												{
													"id": 2656,
													"name": "initialValue",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.reduce"
											}
										},
										{
											"id": 2657,
											"name": "reduce",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
											},
											"typeParameter": [
												{
													"id": 2658,
													"name": "U",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {}
												}
											],
											"parameters": [
												{
													"id": 2659,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2660,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2661,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2662,
																			"name": "previousValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "U"
																			}
																		},
																		{
																			"id": 2663,
																			"name": "currentValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2664,
																			"name": "currentIndex",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2665,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "typeParameter",
																		"name": "U"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1339,
																	"character": 25
																}
															]
														}
													}
												},
												{
													"id": 2666,
													"name": "initialValue",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n"
													},
													"type": {
														"type": "typeParameter",
														"name": "U"
													}
												}
											],
											"type": {
												"type": "typeParameter",
												"name": "U"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.reduce"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1332,
											"character": 10
										},
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1333,
											"character": 10
										},
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1339,
											"character": 10
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reduce"
									}
								},
								{
									"id": 2667,
									"name": "reduceRight",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2668,
											"name": "reduceRight",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
											},
											"parameters": [
												{
													"id": 2669,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2670,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2671,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2672,
																			"name": "previousValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2673,
																			"name": "currentValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2674,
																			"name": "currentIndex",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2675,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1345,
																	"character": 27
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.reduceRight"
											}
										},
										{
											"id": 2676,
											"name": "reduceRight",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2677,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2678,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2679,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2680,
																			"name": "previousValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2681,
																			"name": "currentValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2682,
																			"name": "currentIndex",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2683,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1346,
																	"character": 27
																}
															]
														}
													}
												},
												{
													"id": 2684,
													"name": "initialValue",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.reduceRight"
											}
										},
										{
											"id": 2685,
											"name": "reduceRight",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
											},
											"typeParameter": [
												{
													"id": 2686,
													"name": "U",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {}
												}
											],
											"parameters": [
												{
													"id": 2687,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2688,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2689,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2690,
																			"name": "previousValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "typeParameter",
																				"name": "U"
																			}
																		},
																		{
																			"id": 2691,
																			"name": "currentValue",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2692,
																			"name": "currentIndex",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2693,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "typeParameter",
																		"name": "U"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1352,
																	"character": 30
																}
															]
														}
													}
												},
												{
													"id": 2694,
													"name": "initialValue",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n"
													},
													"type": {
														"type": "typeParameter",
														"name": "U"
													}
												}
											],
											"type": {
												"type": "typeParameter",
												"name": "U"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.reduceRight"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1345,
											"character": 15
										},
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1346,
											"character": 15
										},
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1352,
											"character": 15
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reduceRight"
									}
								},
								{
									"id": 2550,
									"name": "reverse",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2551,
											"name": "reverse",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Reverses the elements in an Array."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.reverse"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1245,
											"character": 11
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.reverse"
									}
								},
								{
									"id": 2552,
									"name": "shift",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2553,
											"name": "shift",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Removes the first element from an array and returns it."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.shift"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1249,
											"character": 9
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.shift"
									}
								},
								{
									"id": 2554,
									"name": "slice",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2555,
											"name": "slice",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns a section of an array."
											},
											"parameters": [
												{
													"id": 2556,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The beginning of the specified portion of the array."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2557,
													"name": "end",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The end of the specified portion of the array.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.slice"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1255,
											"character": 9
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.slice"
									}
								},
								{
									"id": 2593,
									"name": "some",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2594,
											"name": "some",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Determines whether the specified callback function returns true for any element of an array."
											},
											"parameters": [
												{
													"id": 2595,
													"name": "callbackfn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array."
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2596,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2597,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2598,
																			"name": "value",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2599,
																			"name": "index",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			}
																		},
																		{
																			"id": 2600,
																			"name": "array",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "intrinsic",
																					"name": "any"
																				}
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "unknown"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1302,
																	"character": 20
																}
															]
														}
													}
												},
												{
													"id": 2601,
													"name": "thisArg",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.some"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1302,
											"character": 8
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.some"
									}
								},
								{
									"id": 2558,
									"name": "sort",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2559,
											"name": "sort",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Sorts an array."
											},
											"parameters": [
												{
													"id": 2560,
													"name": "compareFn",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\n"
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2561,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 2562,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2563,
																			"name": "a",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 2564,
																			"name": "b",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
																	"line": 1260,
																	"character": 20
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "this"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.sort"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1260,
											"character": 8
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.sort"
									}
								},
								{
									"id": 2565,
									"name": "splice",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2566,
											"name": "splice",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
											},
											"parameters": [
												{
													"id": 2567,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The zero-based location in the array from which to start removing elements."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2568,
													"name": "deleteCount",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"text": "The number of elements to remove.\n"
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.splice"
											}
										},
										{
											"id": 2569,
											"name": "splice",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
											},
											"parameters": [
												{
													"id": 2570,
													"name": "start",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The zero-based location in the array from which to start removing elements."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2571,
													"name": "deleteCount",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "The number of elements to remove."
													},
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 2572,
													"name": "items",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"comment": {
														"text": "Elements to insert into the array in place of the deleted elements.\n"
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.splice"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1266,
											"character": 10
										},
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1273,
											"character": 10
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.splice"
									}
								},
								{
									"id": 2535,
									"name": "toLocaleString",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2536,
											"name": "toLocaleString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns a string representation of an array. The elements are converted to string using their toLocalString methods."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.toLocaleString"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1217,
											"character": 18
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.toLocaleString"
									}
								},
								{
									"id": 2533,
									"name": "toString",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2534,
											"name": "toString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns a string representation of an array."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.toString"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1213,
											"character": 12
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.toString"
									}
								},
								{
									"id": 2573,
									"name": "unshift",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2574,
											"name": "unshift",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Inserts new elements at the start of an array."
											},
											"parameters": [
												{
													"id": 2575,
													"name": "items",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isRest": true
													},
													"comment": {
														"text": "Elements to insert at the start of the Array.\n"
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.unshift"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
											"line": 1278,
											"character": 11
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.unshift"
									}
								},
								{
									"id": 2742,
									"name": "values",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"signatures": [
										{
											"id": 2743,
											"name": "values",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Returns an iterable of values in the array"
											},
											"type": {
												"type": "reference",
												"name": "IterableIterator",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Array.values"
											}
										}
									],
									"sources": [
										{
											"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es2015.iterable.d.ts",
											"line": 75,
											"character": 10
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "Array.values"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2697,
										2532
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										2736,
										2744,
										2542,
										2731,
										2738,
										2584,
										2726,
										2621,
										2698,
										2717,
										2602,
										2754,
										2576,
										2547,
										2740,
										2580,
										2611,
										2537,
										2539,
										2639,
										2667,
										2550,
										2552,
										2554,
										2593,
										2558,
										2565,
										2535,
										2533,
										2573,
										2742
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 18,
									"character": 20
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"name": "Array",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									]
								}
							]
						},
						{
							"id": 2758,
							"name": "NativizeOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Options for the nativize function."
							},
							"children": [
								{
									"id": 2760,
									"name": "format",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "The format for the nativized result.  Currently the only supported\nformat is \"ethers\", which nativizes things in a way compatible with how\nEthers decodes values.  This format is quite limited, but more may be\nadded in the future.  There is also the separate function\n[[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], although that is,\nas noted, unsafe."
									},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 42,
											"character": 8
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "ethers"
									}
								},
								{
									"id": 2759,
									"name": "numberFormatter",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "This is a function that is used to describe how to format\ninteger values.  It should take as input the number as a BigInt.\nBy default, it's the identity function (i.e., it formats the numbers\nas BigInts), but by setting it you could instead format numbers as\na BN, BigNumber, string, etc."
									},
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 33,
											"character": 17
										}
									],
									"type": {
										"type": "reference",
										"name": "NumberFormatter",
										"id": 2525
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2760,
										2759
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 25,
									"character": 32
								}
							]
						},
						{
							"id": 2525,
							"name": "NumberFormatter",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 14,
									"character": 20
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2526,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 2527,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 2528,
													"name": "n",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "BigInt"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/export.ts",
											"line": 14,
											"character": 22
										}
									]
								}
							}
						},
						{
							"id": 2512,
							"name": "debug",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 2,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Debugger"
							},
							"defaultValue": " debugModule(\"codec:export\")"
						},
						{
							"id": 2765,
							"name": "ethersCompatibleNativize",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 2766,
									"name": "ethersCompatibleNativize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2767,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Format.Values.Result",
												"id": 359
											}
										},
										{
											"id": 2768,
											"name": "numberFormatter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NumberFormatter",
												"id": 2525
											},
											"defaultValue": " x => x"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 86,
									"character": 33
								}
							]
						},
						{
							"id": 2781,
							"name": "ethersCompatibleNativizeEventArgs",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 2782,
									"name": "ethersCompatibleNativizeEventArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2783,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 998
											}
										},
										{
											"id": 2784,
											"name": "numberFormatter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NumberFormatter",
												"id": 2525
											},
											"defaultValue": " x => x"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 245,
									"character": 42
								}
							]
						},
						{
							"id": 2773,
							"name": "ethersCompatibleNativizeReturn",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 2774,
									"name": "ethersCompatibleNativizeReturn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2775,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReturndataDecoding",
												"id": 999
											}
										},
										{
											"id": 2776,
											"name": "numberFormatter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NumberFormatter",
												"id": 2525
											},
											"defaultValue": " x => x"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 199,
									"character": 39
								}
							]
						},
						{
							"id": 2761,
							"name": "nativize",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2762,
									"name": "nativize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to\n[[Format.Utils.Inspect.unsafeNativize|unsafeNativize]], but is intended to\nbe safe, and also allows for different output formats.  The only currently\nsupported format is \"ethers\", which is intended to match the way that\nTruffle Contract currently returns values (based on the Ethers decoder).  As\nsuch, it only handles ABI types, and in addition does not handle the types\nfixed, ufixed, or function.  Note that in these cases it returns `undefined`\nrather than throwing, as we want this function to be used in contexts where\nit had better not throw.  It also does not handle circularities, for similar\nreasons.",
										"text": "To handle numeric types, this function takes an optional numberFormatter\noption that tells it how to handle numbers; this function should take a\nBigInt as input.  By default, this function will be the identity, and so\nnumbers will be represented as BigInts.\n\nNote that this function begins by calling abify, so out-of-range enums (that\naren't so out-of-range as to be padding errors) will not return `undefined`.\nOut-of-range booleans similarly will return true rather than `undefined`.\nHowever, other range errors may return `undefined`; this may technically be a\nslight incompatibility with existing behavior, but should not be relevant\nexcept in quite unusual cases.\n\nIn order to match the behavior for tuples, tuples will be transformed into\narrays, but named entries will additionally be keyed by name.  Moreover,\nindexed variables of reference type will be nativized to an undecoded hex\nstring.\n"
									},
									"parameters": [
										{
											"id": 2763,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Format.Values.Result",
												"id": 359
											}
										},
										{
											"id": 2764,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NativizeOptions",
												"id": 2758
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 74,
									"character": 24
								}
							]
						},
						{
							"id": 2777,
							"name": "nativizeEventArgs",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2778,
									"name": "nativizeEventArgs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to [[compatibleNativize]], but takes\na [[LogDecoding]], and puts the results in an object.  Note\nthat this does not return the entire event info, but just the\n`args` for the event."
									},
									"parameters": [
										{
											"id": 2779,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 998
											}
										},
										{
											"id": 2780,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NativizeOptions",
												"id": 2758
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 233,
									"character": 33
								}
							]
						},
						{
							"id": 2769,
							"name": "nativizeReturn",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2770,
									"name": "nativizeReturn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "This function is similar to [[nativize]], but takes\na [[ReturndataDecoding]].  If there's only one returned value, it\nwill be run through compatibleNativize but otherwise unaltered;\notherwise the results will be put in an object.",
										"text": "Note that if the ReturndataDecoding is not a [[ReturnDecoding]],\nthis will just return `undefined`.\n"
									},
									"parameters": [
										{
											"id": 2771,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReturndataDecoding",
												"id": 999
											}
										},
										{
											"id": 2772,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "NativizeOptions",
												"id": 2758
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/export.ts",
									"line": 187,
									"character": 30
								}
							]
						},
						{
							"id": 2522,
							"name": "unsafeNativize",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 2523,
									"name": "unsafeNativize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "WARNING! Do NOT use this function in real code unless you absolutely have\nto!  Using it in controlled tests is fine, but do NOT use it in real code if\nyou have any better option!",
										"text": "This function is a giant hack.  It will throw exceptions on numbers that\ndon't fit in a Javascript number.  It loses various information.  It was\nonly ever written to support our hacked-together watch expression system,\nand later repurposed to make testing easier.\n\nIf you are not doing something as horrible as evaluating user-inputted\nJavascript expressions meant to operate upon Solidity variables, then you\nprobably have a better option than using this in real code!\n\n(For instance, if you just want to nicely print individual values, without\nattempting to first operate on them via Javascript expressions, we have the\n[[ResultInspector]] class, which can be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nto do exactly that.)\n\nRemember, the decoder output format was made to be machine-readable.  It\nshouldn't be too hard for you to process.  If it comes to it, copy-paste\nthis code and dehackify it for your use case, which hopefully is more\nmanageable than the one that caused us to write this.\n"
									},
									"parameters": [
										{
											"id": 2524,
											"name": "result",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Format.Values.Result",
												"id": 359
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/utils/inspect.ts",
									"line": 455,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Classes",
							"kind": 128,
							"children": [
								2513
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2529,
								2758
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2525
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								2512
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								2765,
								2781,
								2773,
								2761,
								2777,
								2769,
								2522
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 401,
							"character": 8
						}
					]
				},
				{
					"id": 2,
					"name": "Format",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "# Codec Output Format",
						"text": "## Module information\n\nThis module primarily defines TypeScript types for the output format\nused in results provided by packages\n`@truffle/decoder@^4.0.0` and `@truffle/codec@^0.1.0`.\n\nSee below for complete listing or continue reading\n[Format information](#format-information) to learn about this format.\n\n### How to import\n\nImport either as part of Codec or by itself:\n\n```typescript\n// when importing entire Codec, use Codec.Format.*:\nimport * as Codec from \"@truffle/codec\";\n\n// or import Format directly:\nimport { Format } from \"@truffle/codec\";\n```\n\n![Example struct decoding](media://example-struct-decoding.png)\n\n## Format information\n\nThis format is intended for use in smart contract and dapp development\ntools and libraries, and for use in display contexts, such as when\nbuilding on-screen components to show transaction and smart contract\nstate information.\n\nThis format seeks to provide an exhaustive schema for JavaScript\nobjects to encode **lossless**, **machine-readable** representations of\nall possible Solidity and ABI data types and all possible values of those\ntypes.\n\nThis format targets types and values understood by the\n[Solidity programming language](https://solidity.readthedocs.io) and\nthe [Contract ABI specification](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html),\nwithin the context of the [Ethereum Virtual Machine](https://ethereum.github.io/yellowpaper/paper.pdf)\n(EVM) and in raw data for transactions and logs according to the\n[Ethereum JSON RPC](https://github.com/ethereum/wiki/wiki/JSON-RPC).\n\nObjects in this format may be deeply nested and/or contain circular\ndependencies. As such, **do not** serialize objects in this format or\notherwise attempt to display them in full without considering potential\nrisk. **Objects in this format are for the machine to read, not humans!**\nThis module provides utilities for inspecting objects in this format,\nincluding the **safe** [[Format.Utils.Inspect.ResultInspector]] wrapper\n(for [util.inspect](https://nodejs.org/api/util.html#util_util_inspect_object_options)),\nand the **unsafe** [[Format.Utils.Inspect.nativize]] function. For more\ninformation, please see the documentation for those utilities.\n\n### Specification\n\nIndividual decoded values are represented by objects of the type\n[[Format.Values.Result]], which contain the following fields:\n1. `type`: This is a [[Format.Types.Type|`Type`]] object describing the value's\ntype.  Each `Type` has a `typeClass` field describing the overall broad type,\nsuch as `\"uint\"` or `\"bytes\"`, together with additional information that gives\nthe specific type.  For full detail, see [[Format.Types]].\n\n2. `kind`: This is either `\"value\"`, in which case the `Result` is a\n[[Format.Values.Value|`Value`]], or `\"error\"`, in which case the `Result` is an\n[[Format.Errors.ErrorResult|`ErrorResult`]].  In the former case, there will be\na `value` field containin the decoded value.  In the latter case, there will be\nan `error` field indicating what went wrong.  *Warning*: When decoding a\ncomplex type, such as an array, mapping, or array, getting a kind of `\"value\"`\ndoes not necessarily mean the individual elements were decoded successfully.\nEven if the `Result` for the array (mapping, struct) as a whole has kind\n`\"value\"`, the elements might still have kind `\"error\"`.\n\n3. `value`: As mentioned, this is included when `kind` is equal to `\"value\"`.\nIt contains information about the actual decoded value.  See\n[[Format.Values|`Format.Values`]] for more information.\n\n4. `error`: The alternative to `value`.  Generally includes information about\nthe raw data that led to the error.  See [[Format.Errors|`Format.Errors`]] for\nmore information.\n\n5. `reference`: This field is a debugger-only feature and does not\napply to results returned by  @truffle/decoder, so it won't be documented here.\n\n### Values vs. errors\n\nIt's worth taking a moment here to answer the question: What counts as a value,\nand what counts as an error?\n\nIn general, the answer is that anything that can be generated via Solidity\nalone (i.e. no assembly), with correctly-encoded inputs, and without making use\nof compiler bugs, is a value, not an error.  That means that, for instance, the\nfollowing things are values, not errors:\n- A variable of contract type whose address does not actually hold a\ncontract of that type;\n- An external function pointer that does not correspond to a valid\nfunction;\n- A string containing invalid UTF-8;\n- ..., etc.\n\nBy contrast, the following *are* errors:\n- A `bool` which is neither `false` (0) nor `true` (1);\n- An `enum` which is out of range;\n- ..., etc.\n\n(You may be wondering about the enum case here, because if you go sufficiently\nfar back, to Solidity 0.4.4 or earlier, it *was* possible to generate\nout-of-range enums without resorting to assembly or compiler bugs.  However,\nenums are only supported in full mode (see\n[Notes on decoding modes](../#decoding-modes)),\nwhich only supports 0.4.12 and later, so\nwe consider out-of-range enums an error.  There are also additional technical\nreasons why supporting out-of-range enums as a value would be difficult.)\n\nThere are three special cases here that are likely worthy of note.\n\nFirstly, internal function pointers currently can't be meaningfully\ndecoded via @truffle/decoder.  However, they decode to a bare-bones value,\nnot an error, as it is (in a sense) our own fault that we can't decode\nthese, so it doesn't make sense to report an error, which would mean that\nsomething is wrong with the encoded data itself.  This value that it\ndecodes to will give the program counter values it corresponds to, but\nwill not include the function name or defining class, as @truffle/decoder\nis not presently capable of that.  For now, full decoding of internal\nfunction pointers remains a debugger-only feature.  (But limited support for\nthis via @truffle/decoder is planned for the future.)\n\n(When using the debugger, an invalid internal function pointer will decode to an\nerror.  However, when using @truffle/decoder, we have no way of discerning whether\nthe pointer is valid or not, so internal function pointers will always decode to\na value, if an uninformative one.)\n\nSecondly, when decoding events, it is impossible to decode indexed parameters\nof reference type.  Thus, these decode to an error\n(`IndexedReferenceTypeError`, which see) rather than to a value.\n\nThirdly, the decoder is currently limited when it comes to decoding state\nvariables that are declared constant, and not all such variables are yet\nsupported in decoding; attempting to decode one of these that is not currently\nsupported will yield an error.\n\nSimilarly, there are various things that decode to errors for technical reasons.\nObjects with encoded length fields larger than what fits in a JavaScript safe\ninteger, or pointed to by pointers with values larger than what fits in a\nJavaScript safe integer, will decode to errors, even if they may technically be\nlegal.  Such cases are impractical to handle and should never come up in real\nuse so we decode them to errors.  Errors may also be returned in case of an\nerror in attempting to read the data to be decoded.\n\nFinally, except when decoding events, we do not return an error if the pointers\nin an ABI-encoded array or tuple are arranged in a nonstandard way, or if\nstrings or bytestrings are incorrectly padded, because it is not worth the\ntrouble to detect these conditions.\n\n\n## Notes on this documentation\n\nMost of this doesn't have explanatory documentation\nbecause it's largely self-explanatory, but particularly\nnon-obvious parts have been documented for clarity.\n\nA note on optional fields: A number of types or values\nhave optional fields.  These contain helpful\nbut non-essential information, or information which\nfor technical reasons we can't guarantee we can determine.\n"
					},
					"children": [
						{
							"id": 510,
							"name": "Errors",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for error and `ErrorResult` objects."
							},
							"children": [
								{
									"id": 586,
									"name": "AddressErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an address"
									},
									"typeParameter": [
										{
											"id": 587,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 590,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 301,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "AddressError",
														"id": 591,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 589,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 300,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 588,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 299,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.AddressType",
												"id": 35,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												590,
												589,
												588
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 296,
											"character": 35
										}
									]
								},
								{
									"id": 593,
									"name": "AddressPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an address (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 594,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 596,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 325,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "AddressPaddingError"
											}
										},
										{
											"id": 597,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 326,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 595,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string; no checksum"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 324,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												596,
												597,
												595
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 318,
											"character": 36
										}
									]
								},
								{
									"id": 666,
									"name": "ArrayErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an array"
									},
									"typeParameter": [
										{
											"id": 667,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 670,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 553,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "ArrayError",
														"id": 671,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 669,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 552,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 668,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 551,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ArrayType",
												"id": 64,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												670,
												669,
												668
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 548,
											"character": 33
										}
									]
								},
								{
									"id": 544,
									"name": "BoolErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a boolean"
									},
									"typeParameter": [
										{
											"id": 545,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 548,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 185,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "BoolError",
														"id": 549,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 547,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 184,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 546,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 183,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BoolType",
												"id": 17,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												548,
												547,
												546
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 180,
											"character": 32
										}
									]
								},
								{
									"id": 553,
									"name": "BoolOutOfRangeErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 554,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 207,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BoolOutOfRangeError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												554
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 206,
											"character": 46
										}
									]
								},
								{
									"id": 562,
									"name": "BoolPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a boolean"
									},
									"typeParameter": [
										{
											"id": 563,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 565,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 231,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BoolPaddingError"
											}
										},
										{
											"id": 566,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 232,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 564,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 230,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												565,
												566,
												564
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 224,
											"character": 33
										}
									]
								},
								{
									"id": 579,
									"name": "BytesDynamicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a dynamic-length bytestring"
									},
									"typeParameter": [
										{
											"id": 580,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 583,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 279,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "BytesDynamicError",
														"id": 584,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 582,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 278,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 581,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 277,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 29,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												583,
												582,
												581
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 274,
											"character": 40
										}
									]
								},
								{
									"id": 574,
									"name": "BytesPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a static-length bytestring (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 575,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"children": [
										{
											"id": 577,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 265,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "BytesPaddingError"
											}
										},
										{
											"id": 578,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 266,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 576,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 264,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												577,
												578,
												576
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 260,
											"character": 34
										}
									]
								},
								{
									"id": 567,
									"name": "BytesStaticErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a static-length bytestring"
									},
									"typeParameter": [
										{
											"id": 568,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 571,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 245,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "BytesStaticError",
														"id": 572,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 570,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 244,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 569,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 243,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 23,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												571,
												570,
												569
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 240,
											"character": 39
										}
									]
								},
								{
									"id": 654,
									"name": "ContractErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a contract"
									},
									"typeParameter": [
										{
											"id": 655,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 658,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 511,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "ContractError",
														"id": 659,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 657,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 510,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 656,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 509,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												658,
												657,
												656
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 506,
											"character": 36
										}
									]
								},
								{
									"id": 661,
									"name": "ContractPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for contract (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 662,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 664,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 535,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ContractPaddingError"
											}
										},
										{
											"id": 665,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 536,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 663,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 534,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												664,
												665,
												663
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 528,
											"character": 37
										}
									]
								},
								{
									"id": 743,
									"name": "DeployedFunctionInConstructorError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Indicates that this is a deployed-style pointer,\ndespite the fact that you're in a constructor"
									},
									"typeParameter": [
										{
											"id": 744,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 748,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 813,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 746,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 811,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 747,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 812,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 745,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 810,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "DeployedFunctionInConstructorError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												748,
												746,
												747,
												745
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 807,
											"character": 51
										}
									]
								},
								{
									"id": 629,
									"name": "EnumErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an enum"
									},
									"typeParameter": [
										{
											"id": 630,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 633,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 440,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "EnumError",
														"id": 634,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 632,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 439,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 631,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 438,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 159,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												633,
												632,
												631
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 435,
											"character": 32
										}
									]
								},
								{
									"id": 650,
									"name": "EnumNotFoundDecodingErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"typeParameter": [
										{
											"id": 651,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 652,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 497,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumNotFoundDecodingError"
											}
										},
										{
											"id": 653,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 498,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 159,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												652,
												653
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 494,
											"character": 45
										}
									]
								},
								{
									"id": 638,
									"name": "EnumOutOfRangeErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"typeParameter": [
										{
											"id": 639,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 640,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 464,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumOutOfRangeError"
											}
										},
										{
											"id": 641,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 465,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 159,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												640,
												641
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 461,
											"character": 39
										}
									]
								},
								{
									"id": 642,
									"name": "EnumPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an enum"
									},
									"typeParameter": [
										{
											"id": 643,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 646,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 481,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "EnumPaddingError"
											}
										},
										{
											"id": 647,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 482,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 644,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 479,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 645,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 480,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 159
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												646,
												647,
												644,
												645
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 473,
											"character": 33
										}
									]
								},
								{
									"id": 605,
									"name": "FixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a signed fixed-point number"
									},
									"typeParameter": [
										{
											"id": 606,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 609,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 361,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "FixedError",
														"id": 615,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 608,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 360,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 607,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 359,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FixedType",
												"id": 52,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												609,
												608,
												607
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 356,
											"character": 33
										}
									]
								},
								{
									"id": 617,
									"name": "FixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a signed fixed-point number (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 618,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 620,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 397,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FixedPaddingError"
											}
										},
										{
											"id": 621,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 398,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 619,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 396,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												620,
												621,
												619
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 390,
											"character": 34
										}
									]
								},
								{
									"id": 708,
									"name": "FunctionExternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an external function"
									},
									"typeParameter": [
										{
											"id": 709,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 712,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 690,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "FunctionExternalError",
														"id": 713,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 711,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 689,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 710,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 688,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.FunctionExternalType",
												"id": 106,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												712,
												711,
												710
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 685,
											"character": 44
										}
									]
								},
								{
									"id": 715,
									"name": "FunctionExternalNonStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This error kind represents a padding error for an external function pointer located anywhere other than the stack."
									},
									"typeParameter": [
										{
											"id": 716,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 718,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 716,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionExternalNonStackPaddingError"
											}
										},
										{
											"id": 719,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 717,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 717,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 715,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												718,
												719,
												717
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 709,
											"character": 53
										}
									]
								},
								{
									"id": 720,
									"name": "FunctionExternalStackPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This error kind represents a padding error for external function pointer located on the stack."
									},
									"typeParameter": [
										{
											"id": 721,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 724,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 736,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionExternalStackPaddingError"
											}
										},
										{
											"id": 722,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string (no checksum; also a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 731,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 723,
											"name": "rawSelector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string (but a full word long)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 735,
													"character": 13
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												724,
												722,
												723
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 725,
											"character": 50
										}
									]
								},
								{
									"id": 725,
									"name": "FunctionInternalErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an internal function"
									},
									"typeParameter": [
										{
											"id": 726,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 729,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 753,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "FunctionInternalError",
														"id": 730,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 728,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 752,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 727,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 751,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 99,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												729,
												728,
												727
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 748,
											"character": 44
										}
									]
								},
								{
									"id": 732,
									"name": "FunctionInternalPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an internal function"
									},
									"typeParameter": [
										{
											"id": 733,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 735,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 781,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "FunctionInternalPaddingError"
											}
										},
										{
											"id": 736,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 782,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 734,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 780,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												735,
												736,
												734
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 774,
											"character": 45
										}
									]
								},
								{
									"id": 763,
									"name": "IndexedReferenceTypeError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Used when decoding an indexed parameter of reference (or tuple) type.  These\ncan't meaningfully be decoded, so instead they decode to an error, sorry."
									},
									"typeParameter": [
										{
											"id": 764,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 765,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 889,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "IndexedReferenceTypeError"
											}
										},
										{
											"id": 767,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 894,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 766,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 890,
													"character": 6
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Types.ReferenceType",
														"id": 214,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "TupleType",
														"id": 154,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												765,
												767,
												766
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 886,
											"character": 42
										}
									]
								},
								{
									"id": 532,
									"name": "IntErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a signed integer"
									},
									"typeParameter": [
										{
											"id": 533,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 536,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 149,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "IntError",
														"id": 537,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 535,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 148,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 534,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 147,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												536,
												535,
												534
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 144,
											"character": 31
										}
									]
								},
								{
									"id": 539,
									"name": "IntPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for a signed integer (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 540,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"children": [
										{
											"id": 542,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 171,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "IntPaddingError"
											}
										},
										{
											"id": 543,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 172,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 541,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 170,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												542,
												543,
												541
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 166,
											"character": 32
										}
									]
								},
								{
									"id": 827,
									"name": "InternalFunctionInABIError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This should never come up, but just to be sure..."
									},
									"typeParameter": [
										{
											"id": 828,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 829,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1067,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "InternalFunctionInABIError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												829
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1064,
											"character": 43
										}
									]
								},
								{
									"id": 800,
									"name": "LengthIntegerFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 801,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 997,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 802,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 803,
															"name": "lengthAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 998,
																	"character": 14
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																803
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 997,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 804,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1000,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 805,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 806,
															"name": "lengthAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 1001,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																806
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 1000,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												801,
												804
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 996,
											"character": 29
										}
									]
								},
								{
									"id": 694,
									"name": "MagicErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a magic variable"
									},
									"typeParameter": [
										{
											"id": 695,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 698,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 641,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "MagicError",
														"id": 699,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 697,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 640,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 696,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 639,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicType",
												"id": 195,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												698,
												697,
												696
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 636,
											"character": 33
										}
									]
								},
								{
									"id": 749,
									"name": "MalformedInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Used when the deployed PC is zero but the constructor PC\nis nonzero"
									},
									"typeParameter": [
										{
											"id": 750,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 754,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 828,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 752,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 826,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 753,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 827,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 751,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 825,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "MalformedInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												754,
												752,
												753,
												751
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 822,
											"character": 47
										}
									]
								},
								{
									"id": 673,
									"name": "MappingErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a mapping"
									},
									"typeParameter": [
										{
											"id": 674,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 677,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 575,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "MappingError",
														"id": 678,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 676,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 574,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 675,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 573,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MappingType",
												"id": 91,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												677,
												676,
												675
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 570,
											"character": 35
										}
									]
								},
								{
									"id": 737,
									"name": "NoSuchInternalFunctionError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Indicates that the function pointer being decoded\nfails to point to a valid function, and also is not one of the\ndefault values"
									},
									"typeParameter": [
										{
											"id": 738,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 742,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 798,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 740,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 796,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 741,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 797,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 739,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 795,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "NoSuchInternalFunctionError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												742,
												740,
												741,
												739
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 792,
											"character": 44
										}
									]
								},
								{
									"id": 809,
									"name": "OverlargePointersNotImplementedErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 810,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1016,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlargePointersNotImplementedError"
											}
										},
										{
											"id": 811,
											"name": "pointerAsBN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1017,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												810,
												811
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1015,
											"character": 56
										}
									]
								},
								{
									"id": 823,
									"name": "OverlongArrayOrStringStrictModeErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"typeParameter": [
										{
											"id": 824,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 826,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1056,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 825,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1055,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlongArrayOrStringStrictModeError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												826,
												825
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1052,
											"character": 56
										}
									]
								},
								{
									"id": 797,
									"name": "OverlongArraysAndStringsNotImplementedErrorBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 799,
											"name": "dataLength",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 993,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 798,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 992,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "OverlongArraysAndStringsNotImplementedError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												799,
												798
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 991,
											"character": 63
										}
									]
								},
								{
									"id": 812,
									"name": "PointerIntegerFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 813,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1021,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 814,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 815,
															"name": "pointerAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 1022,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																815
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 1021,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 816,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 1024,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 817,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 818,
															"name": "pointerAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 1025,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																818
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 1024,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												813,
												816
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1020,
											"character": 30
										}
									]
								},
								{
									"id": 555,
									"name": "RawIntegerFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 556,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 211,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 557,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 558,
															"name": "rawAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 212,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																558
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 211,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 559,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 214,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 560,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 561,
															"name": "rawAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/errors.ts",
																	"line": 215,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																561
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/errors.ts",
															"line": 214,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												556,
												559
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 210,
											"character": 26
										}
									]
								},
								{
									"id": 782,
									"name": "ReadErrorBytes",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error in a byte-based location (memory, calldata, etc)"
									},
									"typeParameter": [
										{
											"id": 783,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 784,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 952,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorBytes"
											}
										},
										{
											"id": 787,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 955,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 785,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 953,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesLocation",
												"id": 781
											}
										},
										{
											"id": 786,
											"name": "start",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 954,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												784,
												787,
												785,
												786
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 949,
											"character": 31
										}
									]
								},
								{
									"id": 776,
									"name": "ReadErrorStack",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error on the stack"
									},
									"typeParameter": [
										{
											"id": 777,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 779,
											"name": "from",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 930,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 778,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 929,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorStack"
											}
										},
										{
											"id": 780,
											"name": "to",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 931,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												779,
												778,
												780
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 926,
											"character": 31
										}
									]
								},
								{
									"id": 788,
									"name": "ReadErrorStorage",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Read error in storage"
									},
									"typeParameter": [
										{
											"id": 789,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 790,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 966,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ReadErrorStorage"
											}
										},
										{
											"id": 791,
											"name": "range",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 967,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Range",
												"id": 1695,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												790,
												791
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 963,
											"character": 33
										}
									]
								},
								{
									"id": 598,
									"name": "StringErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a string"
									},
									"typeParameter": [
										{
											"id": 599,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 602,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 339,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "StringError",
														"id": 603,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 601,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 338,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 600,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 337,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												602,
												601,
												600
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 334,
											"character": 34
										}
									]
								},
								{
									"id": 680,
									"name": "StructErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a struct"
									},
									"typeParameter": [
										{
											"id": 681,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 684,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 597,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "StructError",
														"id": 685,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 683,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 596,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 682,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 595,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.StructType",
												"id": 126,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												684,
												683,
												682
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 592,
											"character": 34
										}
									]
								},
								{
									"id": 687,
									"name": "TupleErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a tuple"
									},
									"typeParameter": [
										{
											"id": 688,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 691,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 619,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "TupleError",
														"id": 692,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 690,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 618,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 689,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 617,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TupleType",
												"id": 154,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												691,
												690,
												689
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 614,
											"character": 33
										}
									]
								},
								{
									"id": 701,
									"name": "TypeErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a type"
									},
									"typeParameter": [
										{
											"id": 702,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 705,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 663,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "TypeErrorUnion",
														"id": 706,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 704,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 662,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 703,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 661,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.TypeType",
												"id": 203,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												705,
												704,
												703
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 658,
											"character": 32
										}
									]
								},
								{
									"id": 610,
									"name": "UfixedErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an unsigned fixed-point number"
									},
									"typeParameter": [
										{
											"id": 611,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 614,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 373,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "UfixedError",
														"id": 622,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 613,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 372,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 612,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 371,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UfixedType",
												"id": 58,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												614,
												613,
												612
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 368,
											"character": 34
										}
									]
								},
								{
									"id": 624,
									"name": "UfixedPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an unsigned fixed-point number (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 625,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 627,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 422,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UfixedPaddingError"
											}
										},
										{
											"id": 628,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 423,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 626,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 421,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												627,
												628,
												626
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 415,
											"character": 35
										}
									]
								},
								{
									"id": 520,
									"name": "UintErrorResult",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an unsigned integer"
									},
									"typeParameter": [
										{
											"id": 521,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 524,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 111,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "GenericError",
														"id": 755,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "reference",
														"name": "UintError",
														"id": 525,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													}
												]
											}
										},
										{
											"id": 523,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 110,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "error"
											}
										},
										{
											"id": 522,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 109,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UintType",
												"id": 7,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												524,
												523,
												522
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 106,
											"character": 32
										}
									]
								},
								{
									"id": 527,
									"name": "UintPaddingError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A padding error for an unsigned integer (note padding is not always checked)"
									},
									"typeParameter": [
										{
											"id": 528,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 530,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 135,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UintPaddingError"
											}
										},
										{
											"id": 531,
											"name": "paddingType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 136,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "PaddingType",
												"id": 1101
											}
										},
										{
											"id": 529,
											"name": "raw",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 134,
													"character": 5
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												530,
												531,
												529
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 128,
											"character": 33
										}
									]
								},
								{
									"id": 772,
									"name": "UnsupportedConstantError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error for an unsupported type of constant (this counts as a read error)"
									},
									"typeParameter": [
										{
											"id": 773,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 775,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 918,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										},
										{
											"id": 774,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 917,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UnsupportedConstantError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												775,
												774
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 914,
											"character": 41
										}
									]
								},
								{
									"id": 792,
									"name": "UnusedImmutableError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Attempting to read an immutable that is never stored anywhere"
									},
									"typeParameter": [
										{
											"id": 793,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 794,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 978,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UnusedImmutableError"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												794
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 975,
											"character": 37
										}
									]
								},
								{
									"id": 768,
									"name": "UserDefinedTypeNotFoundError",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error for when can't find the definition info for a user-defined type"
									},
									"typeParameter": [
										{
											"id": 769,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 770,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 905,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "UserDefinedTypeNotFoundError"
											}
										},
										{
											"id": 771,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/errors.ts",
													"line": 906,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.UserDefinedType",
												"id": 124,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												770,
												771
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 902,
											"character": 45
										}
									]
								},
								{
									"id": 591,
									"name": "AddressError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A address-specific error"
									},
									"typeParameter": [
										{
											"id": 592,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 309,
											"character": 24
										}
									],
									"type": {
										"type": "reference",
										"name": "AddressPaddingError",
										"id": 593,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 671,
									"name": "ArrayError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An arrray-specific error"
									},
									"typeParameter": [
										{
											"id": 672,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 561,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 759,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 549,
									"name": "BoolError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bool-specific error"
									},
									"typeParameter": [
										{
											"id": 550,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 193,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BoolOutOfRangeError",
												"id": 551,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolPaddingError",
												"id": 562,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 551,
									"name": "BoolOutOfRangeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The bool is neither 0 nor 1"
									},
									"typeParameter": [
										{
											"id": 552,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 202,
											"character": 31
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "BoolOutOfRangeErrorBaseFields",
												"id": 553
											},
											{
												"type": "unknown",
												"name": "RawIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 584,
									"name": "BytesDynamicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A dynamic-bytestring-specific error"
									},
									"typeParameter": [
										{
											"id": 585,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 287,
											"character": 29
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 759,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 518,
									"name": "BytesErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for a bytestring"
									},
									"typeParameter": [
										{
											"id": 519,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 97,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticErrorResult",
												"id": 567,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicErrorResult",
												"id": 579,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 781,
									"name": "BytesLocation",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A byte-based location"
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 937,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "memory"
											},
											{
												"type": "stringLiteral",
												"value": "calldata"
											},
											{
												"type": "stringLiteral",
												"value": "eventdata"
											},
											{
												"type": "stringLiteral",
												"value": "returndata"
											},
											{
												"type": "stringLiteral",
												"value": "code"
											}
										]
									}
								},
								{
									"id": 572,
									"name": "BytesStaticError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A static-bytestring-specific error"
									},
									"typeParameter": [
										{
											"id": 573,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 253,
											"character": 28
										}
									],
									"type": {
										"type": "reference",
										"name": "BytesPaddingError",
										"id": 574,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											}
										]
									}
								},
								{
									"id": 659,
									"name": "ContractError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract-specific error"
									},
									"typeParameter": [
										{
											"id": 660,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 519,
											"character": 25
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractPaddingError",
										"id": 661,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 514,
									"name": "DecoderError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "One of the underlying errors contained in an [[ErrorResult]]"
									},
									"typeParameter": [
										{
											"id": 515,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 44,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "GenericError",
												"id": 755,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UintError",
												"id": 525,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntError",
												"id": 537,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolError",
												"id": 549,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesStaticError",
												"id": 572,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicError",
												"id": 584,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressError",
												"id": 591,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringError",
												"id": 603,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedError",
												"id": 615,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedError",
												"id": 622,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayError",
												"id": 671,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingError",
												"id": 678,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructError",
												"id": 685,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicError",
												"id": 699,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeErrorUnion",
												"id": 706,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleError",
												"id": 692,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumError",
												"id": 634,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractError",
												"id": 659,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalError",
												"id": 713,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalError",
												"id": 730,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "InternalUseError",
												"id": 819,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 759,
									"name": "DynamicDataImplementationError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error resulting from overlarge length or pointer values"
									},
									"typeParameter": [
										{
											"id": 760,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 864,
											"character": 42
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArraysAndStringsNotImplementedError",
												"id": 795,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "OverlargePointersNotImplementedError",
												"id": 807,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 516,
									"name": "ElementaryErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error result for an elementary value"
									},
									"typeParameter": [
										{
											"id": 517,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 78,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintErrorResult",
												"id": 520,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntErrorResult",
												"id": 532,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolErrorResult",
												"id": 544,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesErrorResult",
												"id": 518,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressErrorResult",
												"id": 586,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringErrorResult",
												"id": 598,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedErrorResult",
												"id": 605,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedErrorResult",
												"id": 610,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumErrorResult",
												"id": 629,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractErrorResult",
												"id": 654,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 634,
									"name": "EnumError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum-specific error"
									},
									"typeParameter": [
										{
											"id": 635,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 448,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumOutOfRangeError",
												"id": 636,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumPaddingError",
												"id": 642,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumNotFoundDecodingError",
												"id": 648,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 648,
									"name": "EnumNotFoundDecodingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The enum type definition could not be located"
									},
									"typeParameter": [
										{
											"id": 649,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 490,
											"character": 37
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "EnumNotFoundDecodingErrorBaseFields",
												"id": 650,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "unknown",
												"name": "RawIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 636,
									"name": "EnumOutOfRangeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "The enum is out of range"
									},
									"typeParameter": [
										{
											"id": 637,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 457,
											"character": 31
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "EnumOutOfRangeErrorBaseFields",
												"id": 638,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "unknown",
												"name": "RawIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 761,
									"name": "ErrorForThrowing",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error that may occur in a component other than the main\ncore of the decoder itself and thus may need to get thrown to it"
									},
									"typeParameter": [
										{
											"id": 762,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 876,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UserDefinedTypeNotFoundError",
												"id": 768,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadError",
												"id": 757,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 512,
									"name": "ErrorResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A result which is an error rather than a value"
									},
									"typeParameter": [
										{
											"id": 513,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 26,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryErrorResult",
												"id": 516,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayErrorResult",
												"id": 666,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingErrorResult",
												"id": 673,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructErrorResult",
												"id": 680,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicErrorResult",
												"id": 694,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeErrorResult",
												"id": 701,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleErrorResult",
												"id": 687,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalErrorResult",
												"id": 708,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalErrorResult",
												"id": 725,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 615,
									"name": "FixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A fixed-specific error"
									},
									"typeParameter": [
										{
											"id": 616,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 381,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "FixedPaddingError",
										"id": 617,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 713,
									"name": "FunctionExternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external-function specific error"
									},
									"typeParameter": [
										{
											"id": 714,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 698,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalNonStackPaddingError",
												"id": 715,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalStackPaddingError",
												"id": 720,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 730,
									"name": "FunctionInternalError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal-function specific error"
									},
									"typeParameter": [
										{
											"id": 731,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 761,
											"character": 33
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalPaddingError",
												"id": 732,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "NoSuchInternalFunctionError",
												"id": 737,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "DeployedFunctionInConstructorError",
												"id": 743,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MalformedInternalFunctionError",
												"id": 749,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 755,
									"name": "GenericError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type-non-specific error"
									},
									"typeParameter": [
										{
											"id": 756,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 840,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UserDefinedTypeNotFoundError",
												"id": 768,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IndexedReferenceTypeError",
												"id": 763,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadError",
												"id": 757,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 537,
									"name": "IntError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An int-specific error"
									},
									"typeParameter": [
										{
											"id": 538,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 157,
											"character": 20
										}
									],
									"type": {
										"type": "reference",
										"name": "IntPaddingError",
										"id": 539,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 819,
									"name": "InternalUseError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Internal-use error"
									},
									"typeParameter": [
										{
											"id": 820,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1038,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArrayOrStringStrictModeError",
												"id": 821,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "InternalFunctionInABIError",
												"id": 827,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 699,
									"name": "MagicError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic-specific error (there are none)"
									},
									"typeParameter": [
										{
											"id": 700,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 649,
											"character": 22
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 678,
									"name": "MappingError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping-specific error (there are none)"
									},
									"typeParameter": [
										{
											"id": 679,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 583,
											"character": 24
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 807,
									"name": "OverlargePointersNotImplementedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for dynamic type being represented by pointer bigger than a JS number"
									},
									"typeParameter": [
										{
											"id": 808,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1010,
											"character": 48
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlargePointersNotImplementedErrorBaseFields",
												"id": 809
											},
											{
												"type": "unknown",
												"name": "PointerIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 821,
									"name": "OverlongArrayOrStringStrictModeError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for the stricter length check in strict mode"
									},
									"typeParameter": [
										{
											"id": 822,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 1047,
											"character": 48
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArrayOrStringStrictModeErrorBaseFields",
												"id": 823
											},
											{
												"type": "unknown",
												"name": "LengthIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 795,
									"name": "OverlongArraysAndStringsNotImplementedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Error for array/string/bytestring having length bigger than a JS number"
									},
									"typeParameter": [
										{
											"id": 796,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 986,
											"character": 55
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "OverlongArraysAndStringsNotImplementedErrorBaseFields",
												"id": 797
											},
											{
												"type": "unknown",
												"name": "LengthIntegerFields[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 757,
									"name": "ReadError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A read error"
									},
									"typeParameter": [
										{
											"id": 758,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 851,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UnsupportedConstantError",
												"id": 772,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadErrorStack",
												"id": 776,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadErrorBytes",
												"id": 782,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ReadErrorStorage",
												"id": 788,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UnusedImmutableError",
												"id": 792,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 603,
									"name": "StringError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string-specific error"
									},
									"typeParameter": [
										{
											"id": 604,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 347,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 759,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 685,
									"name": "StructError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct-specific error"
									},
									"typeParameter": [
										{
											"id": 686,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 605,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 759,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 692,
									"name": "TupleError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple-specific error"
									},
									"typeParameter": [
										{
											"id": 693,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 627,
											"character": 22
										}
									],
									"type": {
										"type": "reference",
										"name": "DynamicDataImplementationError",
										"id": 759,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 706,
									"name": "TypeErrorUnion",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An error specific to type values (there are none);\nthis isn't called TypeError because that's not legal"
									},
									"typeParameter": [
										{
											"id": 707,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 672,
											"character": 26
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "never"
									}
								},
								{
									"id": 622,
									"name": "UfixedError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A ufixed-specific error"
									},
									"typeParameter": [
										{
											"id": 623,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 406,
											"character": 23
										}
									],
									"type": {
										"type": "reference",
										"name": "UfixedPaddingError",
										"id": 624,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 525,
									"name": "UintError",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A uint-specific error"
									},
									"typeParameter": [
										{
											"id": 526,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 119,
											"character": 21
										}
									],
									"type": {
										"type": "reference",
										"name": "UintPaddingError",
										"id": 527,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 511,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/errors.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:format:errors\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										586,
										593,
										666,
										544,
										553,
										562,
										579,
										574,
										567,
										654,
										661,
										743,
										629,
										650,
										638,
										642,
										605,
										617,
										708,
										715,
										720,
										725,
										732,
										763,
										532,
										539,
										827,
										800,
										694,
										749,
										673,
										737,
										809,
										823,
										797,
										812,
										555,
										782,
										776,
										788,
										598,
										680,
										687,
										701,
										610,
										624,
										520,
										527,
										772,
										792,
										768
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												586,
												593,
												544,
												562,
												579,
												574,
												567,
												642,
												605,
												617,
												532,
												539,
												598,
												610,
												624,
												520,
												527
											]
										},
										{
											"title": "Container types",
											"children": [
												666,
												673,
												680,
												687
											]
										},
										{
											"title": "Function types",
											"children": [
												743,
												708,
												715,
												720,
												725,
												732,
												749,
												737
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												694,
												701
											]
										},
										{
											"title": "Generic errors",
											"children": [
												763,
												782,
												776,
												788,
												772,
												792,
												768
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												827
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												654,
												661,
												629
											]
										},
										{
											"title": "Other",
											"children": [
												553,
												650,
												638,
												800,
												809,
												823,
												797,
												812,
												555
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										591,
										671,
										549,
										551,
										584,
										518,
										781,
										572,
										659,
										514,
										759,
										516,
										634,
										648,
										636,
										761,
										512,
										615,
										713,
										730,
										755,
										537,
										819,
										699,
										678,
										807,
										821,
										795,
										757,
										603,
										685,
										692,
										706,
										622,
										525
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												514,
												512
											]
										},
										{
											"title": "Elementary types",
											"children": [
												591,
												549,
												551,
												584,
												518,
												572,
												516,
												615,
												537,
												603,
												622,
												525
											]
										},
										{
											"title": "Container types",
											"children": [
												671,
												678,
												685,
												692
											]
										},
										{
											"title": "Function types",
											"children": [
												713,
												730
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												699,
												706
											]
										},
										{
											"title": "Generic errors",
											"children": [
												759,
												761,
												755,
												807,
												795,
												757
											]
										},
										{
											"title": "Internal-use errors",
											"children": [
												819,
												821
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												659,
												634,
												648,
												636
											]
										},
										{
											"title": "Other",
											"children": [
												781
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										511
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 16,
									"character": 9
								}
							]
						},
						{
							"id": 3,
							"name": "Types",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for type objects, and some\nfunctions for working with them."
							},
							"children": [
								{
									"id": 42,
									"name": "AddressTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address (with payability unspecified)"
									},
									"typeParameter": [
										{
											"id": 43,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 45,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 152,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "general"
											}
										},
										{
											"id": 44,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 151,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "address"
											}
										},
										{
											"id": 46,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 153,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												45,
												44,
												46
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 148,
											"character": 35
										}
									]
								},
								{
									"id": 37,
									"name": "AddressTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address (with payability specified)"
									},
									"typeParameter": [
										{
											"id": 38,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 40,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 139,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "specific"
											}
										},
										{
											"id": 41,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 140,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 39,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 138,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "address"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												40,
												41,
												39
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 135,
											"character": 36
										}
									]
								},
								{
									"id": 82,
									"name": "ArrayTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a dynamic-length array"
									},
									"typeParameter": [
										{
											"id": 83,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 86,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 244,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 85,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 243,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "dynamic"
											}
										},
										{
											"id": 87,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 245,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1096
											}
										},
										{
											"id": 84,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 242,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "array"
											}
										},
										{
											"id": 88,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 246,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												86,
												85,
												87,
												84,
												88
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 239,
											"character": 33
										}
									]
								},
								{
									"id": 68,
									"name": "ArrayTypeStaticBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"typeParameter": [
										{
											"id": 69,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 72,
											"name": "baseType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 220,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 71,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 219,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "static"
											}
										},
										{
											"id": 73,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 221,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1096
											}
										},
										{
											"id": 70,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 218,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "array"
											}
										},
										{
											"id": 74,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 222,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												72,
												71,
												73,
												70,
												74
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 215,
											"character": 35
										}
									]
								},
								{
									"id": 75,
									"name": "ArrayTypeStaticLengthField",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 76,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 226,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 77,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 78,
															"name": "length",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/types.ts",
																	"line": 227,
																	"character": 10
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																78
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 226,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 79,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 229,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 80,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 81,
															"name": "lengthAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/types.ts",
																	"line": 230,
																	"character": 18
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																81
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 229,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												76,
												79
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 225,
											"character": 36
										}
									]
								},
								{
									"id": 17,
									"name": "BoolType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a boolean"
									},
									"typeParameter": [
										{
											"id": 18,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 19,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 80,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bool"
											}
										},
										{
											"id": 20,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 81,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												19,
												20
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 77,
											"character": 25
										}
									]
								},
								{
									"id": 29,
									"name": "BytesTypeDynamic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a dynamic-length bytestring"
									},
									"typeParameter": [
										{
											"id": 30,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 32,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 116,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "dynamic"
											}
										},
										{
											"id": 33,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 117,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1096
											}
										},
										{
											"id": 31,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 115,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytes"
											}
										},
										{
											"id": 34,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 118,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												32,
												33,
												31,
												34
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 112,
											"character": 33
										}
									]
								},
								{
									"id": 23,
									"name": "BytesTypeStatic",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a static-length bytestring"
									},
									"typeParameter": [
										{
											"id": 24,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 26,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 102,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "static"
											}
										},
										{
											"id": 27,
											"name": "length",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 103,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 25,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 101,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "bytes"
											}
										},
										{
											"id": 28,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 104,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												26,
												27,
												25,
												28
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 98,
											"character": 32
										}
									]
								},
								{
									"id": 187,
									"name": "ContractTypeForeign",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract w/o full Solidity info -- not used for actual variables"
									},
									"typeParameter": [
										{
											"id": 188,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 192,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 556,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractKind",
												"id": 1099
											}
										},
										{
											"id": 190,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 554,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "foreign"
											}
										},
										{
											"id": 193,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 560,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 189,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 553,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "contract"
											}
										},
										{
											"id": 191,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 555,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												192,
												190,
												193,
												189,
												191
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 550,
											"character": 36
										}
									]
								},
								{
									"id": 179,
									"name": "ContractTypeNative",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract with full Solidity info -- may be used for actual variables"
									},
									"typeParameter": [
										{
											"id": 180,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 185,
											"name": "contractKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 536,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractKind",
												"id": 1099
											}
										},
										{
											"id": 183,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 534,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 182,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 530,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "native"
											}
										},
										{
											"id": 186,
											"name": "payable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates whether contract has payable fallback function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 540,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 181,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 529,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "contract"
											}
										},
										{
											"id": 184,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 535,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												185,
												183,
												182,
												186,
												181,
												184
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 526,
											"character": 35
										}
									]
								},
								{
									"id": 170,
									"name": "EnumTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Global enum"
									},
									"typeParameter": [
										{
											"id": 171,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 174,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 501,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 173,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 497,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "global"
											}
										},
										{
											"id": 176,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 506,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 172,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 496,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "enum"
											}
										},
										{
											"id": 175,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 502,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												174,
												173,
												176,
												172,
												175
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 493,
											"character": 31
										}
									]
								},
								{
									"id": 161,
									"name": "EnumTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Local enum (defined in a contract)"
									},
									"typeParameter": [
										{
											"id": 162,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 168,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 481,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 179,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 167,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 480,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 165,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 478,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 164,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 474,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "local"
											}
										},
										{
											"id": 169,
											"name": "options",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 485,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 163,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 473,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "enum"
											}
										},
										{
											"id": 166,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 479,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												168,
												167,
												165,
												164,
												169,
												163,
												166
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 470,
											"character": 30
										}
									]
								},
								{
									"id": 52,
									"name": "FixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a signed fixed-point number"
									},
									"typeParameter": [
										{
											"id": 53,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 55,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 178,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 56,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 179,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 54,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 177,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "fixed"
											}
										},
										{
											"id": 57,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 180,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												55,
												56,
												54,
												57
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 174,
											"character": 26
										}
									]
								},
								{
									"id": 116,
									"name": "FunctionExternalTypeGeneral",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer (general ABI type)"
									},
									"typeParameter": [
										{
											"id": 117,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 120,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 343,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "general"
											}
										},
										{
											"id": 118,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 341,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 121,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 345,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 119,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 342,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												120,
												118,
												121,
												119
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 338,
											"character": 44
										}
									]
								},
								{
									"id": 108,
									"name": "FunctionExternalTypeSpecific",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer (full Solidity type)"
									},
									"typeParameter": [
										{
											"id": 109,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 114,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 328,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										},
										{
											"id": 112,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 326,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "specific"
											}
										},
										{
											"id": 113,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 327,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Mutability",
												"id": 1098
											}
										},
										{
											"id": 115,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 329,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										},
										{
											"id": 110,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 324,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 111,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 325,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "external"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												114,
												112,
												113,
												115,
												110,
												111
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 321,
											"character": 45
										}
									]
								},
								{
									"id": 99,
									"name": "FunctionInternalType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an internal function pointer"
									},
									"typeParameter": [
										{
											"id": 100,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 104,
											"name": "inputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 302,
													"character": 21
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										},
										{
											"id": 103,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 301,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Mutability",
												"id": 1098
											}
										},
										{
											"id": 105,
											"name": "outputParameterTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 303,
													"character": 22
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Type",
													"id": 5,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										},
										{
											"id": 101,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 299,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 102,
											"name": "visibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 300,
													"character": 12
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "internal"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												104,
												103,
												105,
												101,
												102
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 296,
											"character": 37
										}
									]
								},
								{
									"id": 12,
									"name": "IntType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a signed integer"
									},
									"typeParameter": [
										{
											"id": 13,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 15,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 68,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 14,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 67,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "int"
											}
										},
										{
											"id": 16,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 69,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												15,
												14,
												16
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 64,
											"character": 24
										}
									]
								},
								{
									"id": 195,
									"name": "MagicType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a magic variable"
									},
									"typeParameter": [
										{
											"id": 196,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 199,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 580,
													"character": 13
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 200,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 201,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 202,
																	"name": "field",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Type",
																"id": 5,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C",
																		"constraint": {
																			"type": "reference",
																			"name": "FormatConfig"
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/types.ts",
															"line": 580,
															"character": 15
														}
													]
												}
											}
										},
										{
											"id": 197,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 575,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "magic"
											}
										},
										{
											"id": 198,
											"name": "variable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 576,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicVariableName",
												"id": 194
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												199,
												197,
												198
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 572,
											"character": 26
										}
									]
								},
								{
									"id": 91,
									"name": "MappingType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a mapping"
									},
									"typeParameter": [
										{
											"id": 92,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 94,
											"name": "keyType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 277,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "ElementaryType",
												"id": 89,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 96,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 279,
													"character": 10
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "storage"
											}
										},
										{
											"id": 93,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 276,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "mapping"
											}
										},
										{
											"id": 95,
											"name": "valueType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 278,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												94,
												96,
												93,
												95
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 273,
											"character": 28
										}
									]
								},
								{
									"id": 128,
									"name": "NameTypePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 129,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 130,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 384,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 131,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 385,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												130,
												131
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 381,
											"character": 29
										}
									]
								},
								{
									"id": 150,
									"name": "OptionallyNamedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 151,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 152,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 437,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 153,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 438,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												152,
												153
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 434,
											"character": 36
										}
									]
								},
								{
									"id": 47,
									"name": "StringType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a string"
									},
									"typeParameter": [
										{
											"id": 48,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 50,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 165,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1096
											}
										},
										{
											"id": 49,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 164,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "string"
											}
										},
										{
											"id": 51,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 166,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												50,
												49,
												51
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 161,
											"character": 27
										}
									]
								},
								{
									"id": 142,
									"name": "StructTypeGlobal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Global structs"
									},
									"typeParameter": [
										{
											"id": 143,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 146,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 425,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 145,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 421,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "global"
											}
										},
										{
											"id": 149,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 431,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1096
											}
										},
										{
											"id": 148,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 430,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 128,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										},
										{
											"id": 144,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 420,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "struct"
											}
										},
										{
											"id": 147,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 426,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												146,
												145,
												149,
												148,
												144,
												147
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 417,
											"character": 33
										}
									]
								},
								{
									"id": 132,
									"name": "StructTypeLocal",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Local structs (defined in contracts)"
									},
									"typeParameter": [
										{
											"id": 133,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 139,
											"name": "definingContract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 404,
													"character": 18
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 179,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 138,
											"name": "definingContractName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 403,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 136,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Internal ID.  Format may change in future."
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 401,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 135,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 397,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "local"
											}
										},
										{
											"id": 141,
											"name": "location",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 409,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "Location",
												"id": 1096
											}
										},
										{
											"id": 140,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 408,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 128,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										},
										{
											"id": 134,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 396,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "struct"
											}
										},
										{
											"id": 137,
											"name": "typeName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 402,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												139,
												138,
												136,
												135,
												141,
												140,
												134,
												137
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 393,
											"character": 32
										}
									]
								},
								{
									"id": 154,
									"name": "TupleType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a tuple (for use in ABI)"
									},
									"typeParameter": [
										{
											"id": 155,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 157,
											"name": "memberTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 450,
													"character": 13
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "OptionallyNamedType",
													"id": 150,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										},
										{
											"id": 156,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 449,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "tuple"
											}
										},
										{
											"id": 158,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 451,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												157,
												156,
												158
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 446,
											"character": 26
										}
									]
								},
								{
									"id": 205,
									"name": "TypeTypeContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract type"
									},
									"typeParameter": [
										{
											"id": 206,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 209,
											"name": "stateVariableTypes",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "these must be in order, and must only include\n**non-inherited** state variables"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 608,
													"character": 20
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameTypePair",
													"id": 128,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										},
										{
											"id": 208,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 603,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 179,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 207,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 602,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												209,
												208,
												207
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 599,
											"character": 33
										}
									]
								},
								{
									"id": 210,
									"name": "TypeTypeEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an enum type"
									},
									"typeParameter": [
										{
											"id": 211,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 213,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 619,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "EnumType",
												"id": 159
											}
										},
										{
											"id": 212,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 618,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "type"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												213,
												212
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 615,
											"character": 29
										}
									]
								},
								{
									"id": 216,
									"name": "TypesById",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 217,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 218,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "UserDefinedType",
												"id": 124
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 639,
											"character": 26
										}
									]
								},
								{
									"id": 58,
									"name": "UfixedType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an unsigned fixed-point number"
									},
									"typeParameter": [
										{
											"id": 59,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 61,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 192,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 62,
											"name": "places",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 193,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 60,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 191,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "ufixed"
											}
										},
										{
											"id": 63,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 194,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												61,
												62,
												60,
												63
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 188,
											"character": 27
										}
									]
								},
								{
									"id": 7,
									"name": "UintType",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an unsigned integer"
									},
									"typeParameter": [
										{
											"id": 8,
											"name": "_C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 10,
											"name": "bits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 55,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 9,
											"name": "typeClass",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 54,
													"character": 11
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "uint"
											}
										},
										{
											"id": 11,
											"name": "typeHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/types.ts",
													"line": 56,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												10,
												9,
												11
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 51,
											"character": 25
										}
									]
								},
								{
									"id": 35,
									"name": "AddressType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an address"
									},
									"typeParameter": [
										{
											"id": 36,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 126,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AddressTypeSpecific",
												"id": 37,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressTypeGeneral",
												"id": 42,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 64,
									"name": "ArrayType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an array"
									},
									"typeParameter": [
										{
											"id": 65,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 202,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayTypeStatic",
												"id": 66,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayTypeDynamic",
												"id": 82,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 66,
									"name": "ArrayTypeStatic",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a static-length array"
									},
									"typeParameter": [
										{
											"id": 67,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 211,
											"character": 27
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "ArrayTypeStaticBaseFields",
												"id": 68,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "unknown",
												"name": "ArrayTypeStaticLengthField[C[\"integerType\"]]"
											}
										]
									}
								},
								{
									"id": 21,
									"name": "BytesType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a bytestring (static or dynamic)"
									},
									"typeParameter": [
										{
											"id": 22,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 89,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 23,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 29,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 122,
									"name": "ContractDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Types defined inside contracts"
									},
									"typeParameter": [
										{
											"id": 123,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 353,
											"character": 31
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructTypeLocal",
												"id": 132,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumTypeLocal",
												"id": 161,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 177,
									"name": "ContractType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a contract; used not just for actual values but wherever a contract type\nis needed",
										"text": "Contract types may be native (has Solidity info) or foreign (lacking Solidity info).\n"
									},
									"typeParameter": [
										{
											"id": 178,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 517,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 179,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractTypeForeign",
												"id": 187,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 89,
									"name": "ElementaryType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an elementary value"
									},
									"typeParameter": [
										{
											"id": 90,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 254,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintType",
												"id": 7,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolType",
												"id": 17,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesType",
												"id": 21,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedType",
												"id": 52,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedType",
												"id": 58,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressType",
												"id": 35,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumType",
												"id": 159,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 159,
									"name": "EnumType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an enum",
										"text": "Enums may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"typeParameter": [
										{
											"id": 160,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 461,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumTypeLocal",
												"id": 161,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumTypeGlobal",
												"id": 170,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 106,
									"name": "FunctionExternalType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of an external function pointer"
									},
									"typeParameter": [
										{
											"id": 107,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 312,
											"character": 32
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalTypeSpecific",
												"id": 108,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalTypeGeneral",
												"id": 116,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 97,
									"name": "FunctionType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a function pointer (internal or external)"
									},
									"typeParameter": [
										{
											"id": 98,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 287,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 99,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalType",
												"id": 106,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 194,
									"name": "MagicVariableName",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 565,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "stringLiteral",
												"value": "message"
											},
											{
												"type": "stringLiteral",
												"value": "block"
											},
											{
												"type": "stringLiteral",
												"value": "transaction"
											}
										]
									}
								},
								{
									"id": 214,
									"name": "ReferenceType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Reference types"
									},
									"typeParameter": [
										{
											"id": 215,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 627,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayType",
												"id": 64,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingType",
												"id": 91,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructType",
												"id": 126,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 29,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 126,
									"name": "StructType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a struct",
										"text": "Structs may be local (defined in a contract) or global (defined outside of any contract)\n"
									},
									"typeParameter": [
										{
											"id": 127,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 377,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructTypeLocal",
												"id": 132,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructTypeGlobal",
												"id": 142,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 5,
									"name": "Type",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Object representing a type"
									},
									"typeParameter": [
										{
											"id": 6,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 27,
											"character": 16
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintType",
												"id": 7,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolType",
												"id": 17,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesType",
												"id": 21,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressType",
												"id": 35,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedType",
												"id": 52,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedType",
												"id": 58,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayType",
												"id": 64,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingType",
												"id": 91,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionType",
												"id": 97,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructType",
												"id": 126,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumType",
												"id": 159,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicType",
												"id": 195,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeType",
												"id": 203,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleType",
												"id": 154,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 203,
									"name": "TypeType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Type of a type!  This is currently only used for contract types and enum\ntypes, but may expand in the future."
									},
									"typeParameter": [
										{
											"id": 204,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 591,
											"character": 20
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TypeTypeContract",
												"id": 205,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeTypeEnum",
												"id": 210,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 124,
									"name": "UserDefinedType",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "User-defined types"
									},
									"typeParameter": [
										{
											"id": 125,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 362,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractDefinedType",
												"id": 122,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractTypeNative",
												"id": 179,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructTypeGlobal",
												"id": 142,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumTypeGlobal",
												"id": 170,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 4,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:format:types\")"
								},
								{
									"id": 225,
									"name": "fullType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 226,
											"name": "fullType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 227,
													"name": "basicType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												},
												{
													"id": 228,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 661,
											"character": 24
										}
									]
								},
								{
									"id": 239,
									"name": "isContractDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 240,
											"name": "isContractDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 241,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 836,
											"character": 37
										}
									]
								},
								{
									"id": 222,
									"name": "isReferenceType",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 223,
											"name": "isReferenceType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 224,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 648,
											"character": 31
										}
									]
								},
								{
									"id": 219,
									"name": "isUserDefinedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 220,
											"name": "isUserDefinedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 221,
													"name": "anyType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 643,
											"character": 26
										}
									]
								},
								{
									"id": 229,
									"name": "specifyLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 230,
											"name": "specifyLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 231,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												},
												{
													"id": 232,
													"name": "location",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Location",
																"id": 1096
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Type",
												"id": 5
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 678,
											"character": 31
										}
									]
								},
								{
									"id": 233,
									"name": "typeString",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 234,
											"name": "typeString",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 235,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 723,
											"character": 26
										}
									]
								},
								{
									"id": 236,
									"name": "typeStringWithoutLocation",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 237,
											"name": "typeStringWithoutLocation",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 238,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/types.ts",
											"line": 732,
											"character": 41
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										42,
										37,
										82,
										68,
										75,
										17,
										29,
										23,
										187,
										179,
										170,
										161,
										52,
										116,
										108,
										99,
										12,
										195,
										91,
										128,
										150,
										47,
										142,
										132,
										154,
										205,
										210,
										216,
										58,
										7
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												42,
												37,
												17,
												29,
												23,
												52,
												12,
												47,
												58,
												7
											]
										},
										{
											"title": "Container types",
											"children": [
												82,
												91,
												142,
												132,
												154
											]
										},
										{
											"title": "Function types",
											"children": [
												116,
												108,
												99
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												195,
												205,
												210
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												187,
												170,
												161
											]
										},
										{
											"title": "User-defined elemntary types",
											"children": [
												179
											]
										},
										{
											"title": "Other",
											"children": [
												68,
												75,
												128,
												150,
												216
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										35,
										64,
										66,
										21,
										122,
										177,
										89,
										159,
										106,
										97,
										194,
										214,
										126,
										5,
										203,
										124
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												122,
												89,
												214,
												5,
												124
											]
										},
										{
											"title": "Elementary types",
											"children": [
												35,
												21
											]
										},
										{
											"title": "Container types",
											"children": [
												64,
												66,
												126
											]
										},
										{
											"title": "Function types",
											"children": [
												106,
												97
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												203
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												177,
												159
											]
										},
										{
											"title": "Other",
											"children": [
												194
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										4
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										225,
										239,
										222,
										219,
										229,
										233,
										236
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 830,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 902,
									"name": "Circularity",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 903,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Debugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:circularity\")"
										},
										{
											"id": 911,
											"name": "sever",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 912,
													"name": "sever",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 913,
															"name": "tied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 85,
													"character": 21
												}
											]
										},
										{
											"id": 904,
											"name": "tie",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 905,
													"name": "tie",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 906,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 6,
													"character": 19
												}
											]
										},
										{
											"id": 907,
											"name": "tieWithTable",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 908,
													"name": "tieWithTable",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 909,
															"name": "untied",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359
															}
														},
														{
															"id": 910,
															"name": "seenSoFar",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "union",
																	"types": [
																		{
																			"type": "reference",
																			"name": "ArrayValue",
																			"id": 391,
																			"typeArguments": [
																				{
																					"type": "reference",
																					"name": "DefaultFormatConfig"
																				}
																			]
																		},
																		{
																			"type": "reference",
																			"name": "StructValue",
																			"id": 410,
																			"typeArguments": [
																				{
																					"type": "reference",
																					"name": "DefaultFormatConfig"
																				}
																			]
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/circularity.ts",
													"line": 10,
													"character": 21
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												903
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												911,
												904,
												907
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 13,
											"character": 8
										}
									]
								},
								{
									"id": 831,
									"name": "Exception",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isProtected": true,
										"isExported": true
									},
									"comment": {},
									"children": [
										{
											"id": 832,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Debugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:exception\")"
										},
										{
											"id": 839,
											"name": "keyInfoForPrinting",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 840,
													"name": "keyInfoForPrinting",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 841,
															"name": "input",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.ElementaryValue",
																"id": 244
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 842,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 843,
																	"name": "type",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/exception.ts",
																			"line": 78,
																			"character": 9
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 844,
																	"name": "value",
																	"kind": 32,
																	"kindString": "Variable",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/exception.ts",
																			"line": 78,
																			"character": 24
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Variables",
																	"kind": 32,
																	"children": [
																		843,
																		844
																	]
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/exception.ts",
																	"line": 78,
																	"character": 2
																}
															]
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 76,
													"character": 27
												}
											]
										},
										{
											"id": 833,
											"name": "message",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 834,
													"name": "message",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 835,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Errors.ErrorForThrowing",
																"id": 761
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 11,
													"character": 23
												}
											]
										},
										{
											"id": 836,
											"name": "slotAddressPrintout",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 837,
													"name": "slotAddressPrintout",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 838,
															"name": "slot",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Storage.Slot",
																"id": 1704
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/exception.ts",
													"line": 49,
													"character": 28
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												832
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												839,
												833,
												836
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 2,
											"character": 8
										}
									]
								},
								{
									"id": 845,
									"name": "Inspect",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 867,
											"name": "ContractInfoInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {},
											"children": [
												{
													"id": 869,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {},
													"signatures": [
														{
															"id": 870,
															"name": "new ContractInfoInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 871,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Format.Values.ContractValueInfo",
																		"id": 347
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "ContractInfoInspector",
																"id": 867
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 367,
															"character": 41
														}
													]
												},
												{
													"id": 868,
													"name": "value",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 367,
															"character": 7
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 347
													}
												},
												{
													"id": 872,
													"name": "__computed",
													"kind": 2048,
													"kindString": "Method",
													"flags": {},
													"signatures": [
														{
															"id": 873,
															"name": "__computed",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 874,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			},
																			{
																				"type": "intrinsic",
																				"name": "null"
																			}
																		]
																	}
																},
																{
																	"id": 875,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "InspectOptions",
																		"id": 847
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 371,
															"character": 23
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														869
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														868
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														872
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 366,
													"character": 27
												}
											]
										},
										{
											"id": 858,
											"name": "ResultInspector",
											"kind": 128,
											"kindString": "Class",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "This class is meant to be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nfunction.  Given a [[Format.Values.Result]] `value`, one can use\n`new ResultInspector(value)` to create a ResultInspector for that value,\nwhich can be used with util.inspect() to create a human-readable string\nrepresenting the value.",
												"tags": [
													{
														"tag": "example",
														"text": "\nSuppose `value` is a Result.  In Node, the following would print to the\nconsole a human-readable representation of `value`, with colors enabled,\nno maximum depth, and no maximum array length, and lines (usually) no\nlonger than 80 characters:\n```javascript\nconsole.log(\n  util.inspect(\n    new ResultInspector(value),\n    {\n      colors: true,\n      depth: null,\n      maxArrayLength: null,\n      breakLength: 80\n    }\n  )\n);\n```\nOf course, there are many other ways to use util.inspect; see Node's\ndocumentation, linked above, for more.\n"
													}
												]
											},
											"children": [
												{
													"id": 860,
													"name": "constructor",
													"kind": 512,
													"kindString": "Constructor",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 861,
															"name": "new ResultInspector",
															"kind": 16384,
															"kindString": "Constructor signature",
															"flags": {},
															"parameters": [
																{
																	"id": 862,
																	"name": "result",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "Format.Values.Result",
																		"id": 359
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "ResultInspector",
																"id": 858
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 56,
															"character": 31
														}
													]
												},
												{
													"id": 859,
													"name": "result",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 56,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												},
												{
													"id": 863,
													"name": "__computed",
													"kind": 2048,
													"kindString": "Method",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 864,
															"name": "__computed",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 865,
																	"name": "depth",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "number"
																			},
																			{
																				"type": "intrinsic",
																				"name": "null"
																			}
																		]
																	}
																},
																{
																	"id": 866,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "InspectOptions",
																		"id": 847
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 60,
															"character": 23
														}
													]
												}
											],
											"groups": [
												{
													"title": "Constructors",
													"kind": 512,
													"children": [
														860
													]
												},
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														859
													]
												},
												{
													"title": "Methods",
													"kind": 2048,
													"children": [
														863
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 55,
													"character": 28
												}
											]
										},
										{
											"id": 847,
											"name": "InspectOptions",
											"kind": 256,
											"kindString": "Interface",
											"flags": {},
											"children": [
												{
													"id": 854,
													"name": "breakLength",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 13,
															"character": 13
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 853,
													"name": "colors",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 12,
															"character": 8
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 848,
													"name": "stylize",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "codec/lib/format/utils/inspect.ts",
															"line": 11,
															"character": 9
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 849,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 850,
																	"name": "__call",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 851,
																			"name": "toMaybeColor",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 852,
																			"name": "style",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {
																				"isOptional": true
																			},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 11,
																	"character": 11
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														854,
														853,
														848
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 10,
													"character": 24
												}
											]
										},
										{
											"id": 846,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Debugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:inspect\")"
										},
										{
											"id": 855,
											"name": "cleanStylize",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 856,
													"name": "cleanStylize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 857,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "InspectOptions",
																"id": 847
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 17,
													"character": 21
												}
											]
										},
										{
											"id": 883,
											"name": "enumFullName",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 884,
													"name": "enumFullName",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 885,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "EnumValue",
																"id": 328
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 399,
													"character": 21
												}
											]
										},
										{
											"id": 876,
											"name": "enumTypeName",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 877,
													"name": "enumTypeName",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 878,
															"name": "enumType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Types.EnumType",
																"id": 159
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 386,
													"character": 21
												}
											]
										},
										{
											"id": 879,
											"name": "formatCircular",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 880,
													"name": "formatCircular",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 881,
															"name": "loopLength",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 882,
															"name": "options",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "InspectOptions",
																"id": 847
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 395,
													"character": 23
												}
											]
										},
										{
											"id": 895,
											"name": "unsafeNativize",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 896,
													"name": "unsafeNativize",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you absolutely have\nto!  Using it in controlled tests is fine, but do NOT use it in real code if\nyou have any better option!",
														"text": "This function is a giant hack.  It will throw exceptions on numbers that\ndon't fit in a Javascript number.  It loses various information.  It was\nonly ever written to support our hacked-together watch expression system,\nand later repurposed to make testing easier.\n\nIf you are not doing something as horrible as evaluating user-inputted\nJavascript expressions meant to operate upon Solidity variables, then you\nprobably have a better option than using this in real code!\n\n(For instance, if you just want to nicely print individual values, without\nattempting to first operate on them via Javascript expressions, we have the\n[[ResultInspector]] class, which can be used with Node's\n[util.inspect()](https://nodejs.org/api/util.html#util_util_inspect_object_options)\nto do exactly that.)\n\nRemember, the decoder output format was made to be machine-readable.  It\nshouldn't be too hard for you to process.  If it comes to it, copy-paste\nthis code and dehackify it for your use case, which hopefully is more\nmanageable than the one that caused us to write this.\n"
													},
													"parameters": [
														{
															"id": 897,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 455,
													"character": 30
												}
											]
										},
										{
											"id": 886,
											"name": "unsafeNativizeVariables",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 887,
													"name": "unsafeNativizeVariables",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "WARNING! Do NOT use this function in real code unless you\nabsolutely have to!  Using it in controlled tests is fine,\nbut do NOT use it in real code if you have any better option!\nSee [[unsafeNativize]] for why!"
													},
													"parameters": [
														{
															"id": 888,
															"name": "variables",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 889,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"indexSignature": [
																		{
																			"id": 890,
																			"name": "__index",
																			"kind": 8192,
																			"kindString": "Index signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 891,
																					"name": "name",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "Format.Values.Result",
																				"id": 359
																			}
																		}
																	],
																	"sources": [
																		{
																			"fileName": "codec/lib/format/utils/inspect.ts",
																			"line": 414,
																			"character": 50
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 892,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 893,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 894,
																			"name": "name",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/format/utils/inspect.ts",
																	"line": 416,
																	"character": 3
																}
															]
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 414,
													"character": 39
												}
											]
										},
										{
											"id": 898,
											"name": "unsafeNativizeWithTable",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 899,
													"name": "unsafeNativizeWithTable",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 900,
															"name": "result",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359
															}
														},
														{
															"id": 901,
															"name": "seenSoFar",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/inspect.ts",
													"line": 459,
													"character": 32
												}
											]
										}
									],
									"groups": [
										{
											"title": "Classes",
											"kind": 128,
											"children": [
												867,
												858
											]
										},
										{
											"title": "Interfaces",
											"kind": 256,
											"children": [
												847
											]
										},
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												846
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												855,
												883,
												876,
												879,
												895,
												886,
												898
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 10,
											"character": 8
										}
									]
								},
								{
									"id": 914,
									"name": "Serial",
									"kind": 2,
									"kindString": "Module",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 915,
											"name": "debug",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isConst": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 2,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "Debugger"
											},
											"defaultValue": " debugModule(\"codec:format:utils:serial\")"
										},
										{
											"id": 943,
											"name": "deserializeContractValueInfo",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 944,
													"name": "deserializeContractValueInfo",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 945,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.ContractValueInfo",
																"id": 347,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 347
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 951,
													"character": 37
												}
											]
										},
										{
											"id": 946,
											"name": "deserializeRange",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 947,
													"name": "deserializeRange",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 948,
															"name": "range",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Range",
																"id": 1695,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Range",
														"id": 1695
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 965,
													"character": 25
												}
											]
										},
										{
											"id": 934,
											"name": "deserializeResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 935,
													"name": "deserializeResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 936,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 509,
													"character": 33
												}
											]
										},
										{
											"id": 949,
											"name": "deserializeSlot",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 950,
													"name": "deserializeSlot",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 951,
															"name": "slot",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Storage.Slot",
																"id": 1704,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Storage.Slot",
														"id": 1704
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 983,
													"character": 24
												}
											]
										},
										{
											"id": 940,
											"name": "deserializeToUntiedResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 941,
													"name": "deserializeToUntiedResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 942,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 638,
													"character": 34
												}
											]
										},
										{
											"id": 937,
											"name": "deserializeType",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 938,
													"name": "deserializeType",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 939,
															"name": "dataType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Types.Type",
																"id": 5,
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "SerialFormatConfig"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 515,
													"character": 31
												}
											]
										},
										{
											"id": 925,
											"name": "serializeContractValueInfo",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 926,
													"name": "serializeContractValueInfo",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 927,
															"name": "info",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.ContractValueInfo",
																"id": 347
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.ContractValueInfo",
														"id": 347,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 460,
													"character": 35
												}
											]
										},
										{
											"id": 928,
											"name": "serializeRange",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 929,
													"name": "serializeRange",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 930,
															"name": "range",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Range",
																"id": 1695
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Range",
														"id": 1695,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 476,
													"character": 23
												}
											]
										},
										{
											"id": 916,
											"name": "serializeResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 917,
													"name": "serializeResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 918,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 14,
													"character": 31
												}
											]
										},
										{
											"id": 931,
											"name": "serializeSlot",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 932,
													"name": "serializeSlot",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 933,
															"name": "slot",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Storage.Slot",
																"id": 1704
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Storage.Slot",
														"id": 1704,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 494,
													"character": 22
												}
											]
										},
										{
											"id": 919,
											"name": "serializeType",
											"kind": 64,
											"kindString": "Function",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 920,
													"name": "serializeType",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 921,
															"name": "dataType",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Types.Type",
																"id": 5
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 20,
													"character": 29
												}
											]
										},
										{
											"id": 922,
											"name": "serializeUntiedResult",
											"kind": 64,
											"kindString": "Function",
											"flags": {},
											"signatures": [
												{
													"id": 923,
													"name": "serializeUntiedResult",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 924,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Format.Values.Result",
																"id": 359
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359,
														"typeArguments": [
															{
																"type": "reference",
																"name": "SerialFormatConfig"
															}
														]
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/format/utils/serial.ts",
													"line": 145,
													"character": 30
												}
											]
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												915
											]
										},
										{
											"title": "Functions",
											"kind": 64,
											"children": [
												943,
												946,
												934,
												949,
												940,
												937,
												925,
												928,
												916,
												931,
												919,
												922
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/utils/index.ts",
											"line": 16,
											"character": 8
										}
									]
								}
							],
							"groups": [
								{
									"title": "Modules",
									"kind": 2,
									"children": [
										902,
										831,
										845,
										914
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 21,
									"character": 9
								}
							]
						},
						{
							"id": 242,
							"name": "Values",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Contains the types for value and result objects."
							},
							"children": [
								{
									"id": 289,
									"name": "AddressValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An address value"
									},
									"typeParameter": [
										{
											"id": 290,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 292,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 134,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 291,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 133,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.AddressType",
												"id": 35,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 293,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 135,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 294,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 295,
															"name": "asAddress",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "has leading \"0x\" and is checksum-cased"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 139,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 296,
															"name": "rawAsHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"comment": {
																"shortText": "just a hex string, so no checksum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 143,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																295,
																296
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 135,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												292,
												291,
												293
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 130,
											"character": 29
										}
									]
								},
								{
									"id": 391,
									"name": "ArrayValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An array value (may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 392,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 394,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 235,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 395,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 239,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 393,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 234,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ArrayType",
												"id": 64,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 396,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 240,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Result",
													"id": 359,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												394,
												395,
												393,
												396
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 231,
											"character": 27
										}
									]
								},
								{
									"id": 267,
									"name": "BoolValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A boolean value"
									},
									"typeParameter": [
										{
											"id": 268,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 270,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 82,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 269,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 81,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BoolType",
												"id": 17,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 271,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 83,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 272,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 273,
															"name": "asBoolean",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 84,
																	"character": 13
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																273
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 83,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												270,
												269,
												271
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 78,
											"character": 26
										}
									]
								},
								{
									"id": 282,
									"name": "BytesDynamicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (dynamic length)"
									},
									"typeParameter": [
										{
											"id": 283,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 285,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 116,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 284,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 115,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeDynamic",
												"id": 29,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 286,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 117,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 287,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 288,
															"name": "asHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 121,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																288
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 117,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												285,
												284,
												286
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 112,
											"character": 34
										}
									]
								},
								{
									"id": 274,
									"name": "BytesStaticValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (static length)"
									},
									"typeParameter": [
										{
											"id": 275,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 277,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 97,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 276,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 96,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "BytesTypeStatic",
												"id": 23,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 278,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 98,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 279,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 280,
															"name": "asHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "hex-formatted, with leading \"0x\""
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 102,
																	"character": 9
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 281,
															"name": "rawAsHex",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 103,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																280,
																281
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 98,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												277,
												276,
												278
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 93,
											"character": 33
										}
									]
								},
								{
									"id": 342,
									"name": "ContractValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract value; see [[ContractValueInfo]] for more detail"
									},
									"typeParameter": [
										{
											"id": 343,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 345,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 268,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 344,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 267,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 346,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 269,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfo",
												"id": 347,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												345,
												344,
												346
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 264,
											"character": 30
										}
									]
								},
								{
									"id": 349,
									"name": "ContractValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can identify the class."
									},
									"typeParameter": [
										{
											"id": 350,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 352,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 295,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 354,
											"name": "class",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 300,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 351,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 290,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "known"
											}
										},
										{
											"id": 353,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 299,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												352,
												354,
												351,
												353
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 287,
											"character": 39
										}
									]
								},
								{
									"id": 355,
									"name": "ContractValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of ContractValueInfo is used when we can't identify the class."
									},
									"children": [
										{
											"id": 357,
											"name": "address",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as address (leading \"0x\", checksum-cased);\nnote that this is not an AddressResult!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 315,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 356,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 310,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										},
										{
											"id": 358,
											"name": "rawAddress",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "this is just a hexstring; no checksum (also may have padding beforehand)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 319,
													"character": 12
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												357,
												356,
												358
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 309,
											"character": 41
										}
									]
								},
								{
									"id": 314,
									"name": "DecimalValueInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 315,
											"name": "Big",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 204,
													"character": 5
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 316,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 317,
															"name": "asBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 205,
																	"character": 9
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														},
														{
															"id": 318,
															"name": "rawAsBig",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 206,
																	"character": 12
																}
															],
															"type": {
																"type": "reference",
																"name": "Big"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																317,
																318
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 204,
															"character": 6
														}
													]
												}
											}
										},
										{
											"id": 319,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 208,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 320,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 321,
															"name": "asString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 209,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 322,
															"name": "rawAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 210,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																321,
																322
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 208,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												315,
												319
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 203,
											"character": 26
										}
									]
								},
								{
									"id": 328,
									"name": "EnumValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum value"
									},
									"typeParameter": [
										{
											"id": 329,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 331,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 236,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 330,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 235,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.EnumType",
												"id": 159,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 332,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 237,
													"character": 7
												}
											],
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"name": "EnumValueBaseFields",
														"id": 333
													},
													{
														"type": "unknown",
														"name": "EnumValueNumericFields[C[\"integerType\"]]"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												331,
												330,
												332
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 232,
											"character": 26
										}
									]
								},
								{
									"id": 333,
									"name": "EnumValueBaseFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 334,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 241,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												334
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 240,
											"character": 29
										}
									]
								},
								{
									"id": 335,
									"name": "EnumValueNumericFields",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 336,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 245,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 337,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 338,
															"name": "numericAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "the numeric value of the enum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 249,
																	"character": 15
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																338
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 245,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 339,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 251,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 340,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 341,
															"name": "numericAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"comment": {
																"shortText": "the numeric value of the enum"
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 255,
																	"character": 19
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																341
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 251,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												336,
												339
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 244,
											"character": 32
										}
									]
								},
								{
									"id": 309,
									"name": "FixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed fixed-point value"
									},
									"typeParameter": [
										{
											"id": 310,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 312,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 199,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 311,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 198,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FixedType",
												"id": 52,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 313,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 200,
													"character": 7
												}
											],
											"type": {
												"type": "unknown",
												"name": "DecimalValueInfo[C[\"decimalType\"]]"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												312,
												311,
												313
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 195,
											"character": 27
										}
									]
								},
								{
									"id": 457,
									"name": "FunctionExternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external function pointer value; see [[FunctionExternalValueInfo]] for more detail"
									},
									"typeParameter": [
										{
											"id": 458,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 460,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 445,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 459,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 444,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.FunctionExternalType",
												"id": 106,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 461,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 446,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionExternalValueInfo",
												"id": 462,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												460,
												459,
												461
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 441,
											"character": 38
										}
									]
								},
								{
									"id": 470,
									"name": "FunctionExternalValueInfoInvalid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can identify the class but can't locate the function."
									},
									"typeParameter": [
										{
											"id": 471,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 473,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 491,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 349,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 472,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 490,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "invalid"
											}
										},
										{
											"id": 474,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 495,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												473,
												472,
												474
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 487,
											"character": 49
										}
									]
								},
								{
									"id": 464,
									"name": "FunctionExternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used for a known function of a known class."
									},
									"typeParameter": [
										{
											"id": 465,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 469,
											"name": "abi",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 478,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 467,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 473,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 349,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 466,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 472,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "known"
											}
										},
										{
											"id": 468,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 477,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												469,
												467,
												466,
												468
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 469,
											"character": 47
										}
									]
								},
								{
									"id": 475,
									"name": "FunctionExternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionExternalValueInfo is used when we can't even locate the class."
									},
									"children": [
										{
											"id": 477,
											"name": "contract",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 505,
													"character": 10
												}
											],
											"type": {
												"type": "reference",
												"name": "ContractValueInfoUnknown",
												"id": 355
											}
										},
										{
											"id": 476,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 504,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										},
										{
											"id": 478,
											"name": "selector",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "formatted as a hex string"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 509,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												477,
												476,
												478
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 503,
											"character": 49
										}
									]
								},
								{
									"id": 481,
									"name": "FunctionInternalValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal function pointer value; see [[FunctionInternalValueInfo]] for more detail"
									},
									"typeParameter": [
										{
											"id": 482,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 484,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 534,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 483,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 533,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalType",
												"id": 99,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 485,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 535,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "FunctionInternalValueInfo",
												"id": 486,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												484,
												483,
												485
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 530,
											"character": 38
										}
									]
								},
								{
									"id": 498,
									"name": "FunctionInternalValueInfoException",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A default value -- internal functions have two default values\ndepending on whether they live in storage or elsewhere.\nIn storage the default value is 0 for both program counters.\nElsewhere they're both nonzero."
									},
									"typeParameter": [
										{
											"id": 499,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 503,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 592,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 501,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 590,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 502,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 591,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 500,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 589,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "exception"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												503,
												501,
												502,
												500
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 586,
											"character": 51
										}
									]
								},
								{
									"id": 488,
									"name": "FunctionInternalValueInfoKnown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of FunctionInternalValueInfo is used for an actual internal function."
									},
									"typeParameter": [
										{
											"id": 489,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 493,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 564,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 491,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 562,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 495,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "Is null for a free function"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 569,
													"character": 11
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Types.ContractType",
														"id": 177,
														"typeArguments": [
															{
																"type": "typeParameter",
																"name": "C",
																"constraint": {
																	"type": "reference",
																	"name": "FormatConfig"
																}
															}
														]
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										},
										{
											"id": 492,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 563,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 496,
											"name": "id",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "An internal opaque ID"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 573,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 490,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 561,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "function"
											}
										},
										{
											"id": 497,
											"name": "mutability",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 574,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "Common.Mutability"
											}
										},
										{
											"id": 494,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 565,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												493,
												491,
												495,
												492,
												496,
												490,
												497,
												494
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 558,
											"character": 47
										}
									]
								},
								{
									"id": 504,
									"name": "FunctionInternalValueInfoUnknown",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type is used when decoding internal functions in contexts that don't\nsupport full decoding of such functions.  The high-level decoding interface\ncan currently only sometimes perform such a full decoding.",
										"text": "In contexts where such full decoding isn't supported, you'll get one of\nthese; so you'll still get the program counter values, but further\ninformation will be absent.  Note you'll get this even if really it should\ndecode to an error, because if there's insufficient information to determine\nadditional function information, there's necessarily insufficient\ninformation to determine if it should be an error.\n"
									},
									"typeParameter": [
										{
											"id": 505,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 509,
											"name": "constructorProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 615,
													"character": 27
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 507,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 613,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.ContractType",
												"id": 177,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 508,
											"name": "deployedProgramCounter",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 614,
													"character": 24
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 506,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 612,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "unknown"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												509,
												507,
												508,
												506
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 609,
											"character": 49
										}
									]
								},
								{
									"id": 262,
									"name": "IntValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed integer value"
									},
									"typeParameter": [
										{
											"id": 263,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 265,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 69,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 264,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 68,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "IntType",
												"id": 12,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 266,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 70,
													"character": 7
												}
											],
											"type": {
												"type": "unknown",
												"name": "IntegerValueInfo[C[\"integerType\"]]"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												265,
												264,
												266
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 65,
											"character": 25
										}
									]
								},
								{
									"id": 253,
									"name": "IntegerValueInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 254,
											"name": "BN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 50,
													"character": 4
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 255,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 256,
															"name": "asBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 51,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														},
														{
															"id": 257,
															"name": "rawAsBN",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 52,
																	"character": 11
																}
															],
															"type": {
																"type": "reference",
																"name": "BN"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																256,
																257
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 50,
															"character": 5
														}
													]
												}
											}
										},
										{
											"id": 258,
											"name": "string",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 54,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 259,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 260,
															"name": "asString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 55,
																	"character": 12
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 261,
															"name": "rawAsString",
															"kind": 32,
															"kindString": "Variable",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "codec/lib/format/elementary.ts",
																	"line": 56,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																260,
																261
															]
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/elementary.ts",
															"line": 54,
															"character": 9
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												254,
												258
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 49,
											"character": 26
										}
									]
								},
								{
									"id": 404,
									"name": "KeyValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 405,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 406,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 273,
													"character": 5
												}
											],
											"type": {
												"type": "reference",
												"name": "ElementaryValue",
												"id": 244,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 407,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 274,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 359,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												406,
												407
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 270,
											"character": 29
										}
									]
								},
								{
									"id": 433,
									"name": "MagicValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic variable's value (may contain errors?)"
									},
									"typeParameter": [
										{
											"id": 434,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 436,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 362,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 435,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 361,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MagicType",
												"id": 195,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 437,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 364,
													"character": 7
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 438,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 439,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 440,
																	"name": "field",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "Result",
																"id": 359,
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "C",
																		"constraint": {
																			"type": "reference",
																			"name": "FormatConfig"
																		}
																	}
																]
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/format/values.ts",
															"line": 364,
															"character": 8
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												436,
												435,
												437
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 358,
											"character": 27
										}
									]
								},
								{
									"id": 399,
									"name": "MappingValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping value (may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 400,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 402,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 261,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 401,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 260,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "MappingType",
												"id": 91,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 403,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "order is irrelevant; also note keys must be values, not errors"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 267,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "KeyValuePair",
													"id": 404,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												402,
												401,
												403
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 257,
											"character": 29
										}
									]
								},
								{
									"id": 416,
									"name": "NameValuePair",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 417,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 418,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 311,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 419,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 312,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 359,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												418,
												419
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 308,
											"character": 30
										}
									]
								},
								{
									"id": 427,
									"name": "OptionallyNamedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"typeParameter": [
										{
											"id": 428,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 429,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 340,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 430,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 341,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "Result",
												"id": 359,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												429,
												430
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 337,
											"character": 37
										}
									]
								},
								{
									"id": 297,
									"name": "StringValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string value; see [[StringValueInfo]] for more detail"
									},
									"typeParameter": [
										{
											"id": 298,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 300,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 156,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 299,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 155,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "StringType",
												"id": 47,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 301,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 157,
													"character": 7
												}
											],
											"type": {
												"type": "reference",
												"name": "StringValueInfo",
												"id": 302
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												300,
												299,
												301
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 152,
											"character": 28
										}
									]
								},
								{
									"id": 306,
									"name": "StringValueInfoMalformed",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of StringValueInfo represents a malformed string."
									},
									"children": [
										{
											"id": 308,
											"name": "asHex",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "hex-formatted, with leading \"0x\""
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 187,
													"character": 7
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 307,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 183,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "malformed"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												308,
												307
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 182,
											"character": 41
										}
									]
								},
								{
									"id": 303,
									"name": "StringValueInfoValid",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This type of StringValueInfo represents a valid UTF-8 string."
									},
									"children": [
										{
											"id": 305,
											"name": "asString",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 174,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 304,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 173,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "valid"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												305,
												304
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 172,
											"character": 37
										}
									]
								},
								{
									"id": 410,
									"name": "StructValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct value (may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 411,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 413,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 295,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 414,
											"name": "reference",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "will be used in the future for circular vales"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 299,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 412,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 294,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Types.StructType",
												"id": 126,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 415,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!\nmoreover, any mappings *must* be included, even\nif this is a memory struct (such mappings will be empty)"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 305,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameValuePair",
													"id": 416,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												413,
												414,
												412,
												415
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 291,
											"character": 28
										}
									]
								},
								{
									"id": 422,
									"name": "TupleValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple value (may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 423,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 425,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 333,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 424,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 332,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TupleType",
												"id": 154,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 426,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 334,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "OptionallyNamedValue",
													"id": 427,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												425,
												424,
												426
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 329,
											"character": 27
										}
									]
								},
								{
									"id": 445,
									"name": "TypeValueContract",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract type's value (see [[TypeValue]])"
									},
									"typeParameter": [
										{
											"id": 446,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 448,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 400,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 447,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 399,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TypeTypeContract",
												"id": 205
											}
										},
										{
											"id": 449,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 404,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "NameValuePair",
													"id": 416,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												448,
												447,
												449
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 396,
											"character": 34
										}
									]
								},
								{
									"id": 450,
									"name": "TypeValueEnum",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum type's value (see [[TypeValue]])"
									},
									"typeParameter": [
										{
											"id": 451,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 453,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 416,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 452,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 415,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "TypeTypeEnum",
												"id": 210
											}
										},
										{
											"id": 454,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"comment": {
												"shortText": "these must be stored in order!"
											},
											"sources": [
												{
													"fileName": "codec/lib/format/values.ts",
													"line": 420,
													"character": 7
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "EnumValue",
													"id": 328,
													"typeArguments": [
														{
															"type": "typeParameter",
															"name": "C",
															"constraint": {
																"type": "reference",
																"name": "FormatConfig"
															}
														}
													]
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												453,
												452,
												454
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 412,
											"character": 30
										}
									]
								},
								{
									"id": 323,
									"name": "UfixedValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned fixed-point value"
									},
									"typeParameter": [
										{
											"id": 324,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 326,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 223,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 325,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 222,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UfixedType",
												"id": 58
											}
										},
										{
											"id": 327,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 224,
													"character": 7
												}
											],
											"type": {
												"type": "unknown",
												"name": "DecimalValueInfo[C[\"decimalType\"]]"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												326,
												325,
												327
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 219,
											"character": 28
										}
									]
								},
								{
									"id": 248,
									"name": "UintValue",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned integer value"
									},
									"typeParameter": [
										{
											"id": 249,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"children": [
										{
											"id": 251,
											"name": "kind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 45,
													"character": 6
												}
											],
											"type": {
												"type": "stringLiteral",
												"value": "value"
											}
										},
										{
											"id": 250,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 44,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "UintType",
												"id": 7,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										},
										{
											"id": 252,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/format/elementary.ts",
													"line": 46,
													"character": 7
												}
											],
											"type": {
												"type": "unknown",
												"name": "IntegerValueInfo[C[\"integerType\"]]"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												251,
												250,
												252
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 41,
											"character": 26
										}
									]
								},
								{
									"id": 377,
									"name": "AddressResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An address value or error"
									},
									"typeParameter": [
										{
											"id": 378,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 160,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AddressValue",
												"id": 289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressErrorResult",
												"id": 586,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 389,
									"name": "ArrayResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An array value or error"
									},
									"typeParameter": [
										{
											"id": 390,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 222,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ArrayValue",
												"id": 391,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayErrorResult",
												"id": 666,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 371,
									"name": "BoolResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A boolean value or error"
									},
									"typeParameter": [
										{
											"id": 372,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 133,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BoolValue",
												"id": 267,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolErrorResult",
												"id": 544,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 375,
									"name": "BytesDynamicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (dynamic-length)"
									},
									"typeParameter": [
										{
											"id": 376,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 151,
											"character": 30
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesDynamicValue",
												"id": 282,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicErrorResult",
												"id": 579,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 365,
									"name": "BytesResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (static or dynamic)"
									},
									"typeParameter": [
										{
											"id": 366,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 106,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticResult",
												"id": 373,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicResult",
												"id": 375,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 373,
									"name": "BytesStaticResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value or error (static-length)"
									},
									"typeParameter": [
										{
											"id": 374,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 142,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticValue",
												"id": 274,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesStaticErrorResult",
												"id": 567,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 246,
									"name": "BytesValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A bytestring value (static or dynamic)"
									},
									"typeParameter": [
										{
											"id": 247,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 32,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "BytesStaticValue",
												"id": 274,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesDynamicValue",
												"id": 282,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 387,
									"name": "ContractResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A contract value or error"
									},
									"typeParameter": [
										{
											"id": 388,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 209,
											"character": 26
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractValue",
												"id": 342,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractErrorResult",
												"id": 654,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 347,
									"name": "ContractValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "There are two types -- one for contracts whose class we can identify, and one\nfor when we can't identify the class."
									},
									"typeParameter": [
										{
											"id": 348,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 278,
											"character": 29
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ContractValueInfoKnown",
												"id": 349,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractValueInfoUnknown",
												"id": 355
											}
										]
									}
								},
								{
									"id": 363,
									"name": "ElementaryResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An elementary value or error"
									},
									"typeParameter": [
										{
											"id": 364,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 87,
											"character": 28
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintResult",
												"id": 367,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntResult",
												"id": 369,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolResult",
												"id": 371,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesResult",
												"id": 365,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressResult",
												"id": 377,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringResult",
												"id": 379,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedResult",
												"id": 381,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedResult",
												"id": 383,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumResult",
												"id": 385,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractResult",
												"id": 387,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 244,
									"name": "ElementaryValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An elementary value"
									},
									"typeParameter": [
										{
											"id": 245,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 13,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintValue",
												"id": 248,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntValue",
												"id": 262,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BoolValue",
												"id": 267,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "BytesValue",
												"id": 246,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "AddressValue",
												"id": 289,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringValue",
												"id": 297,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedValue",
												"id": 309,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedValue",
												"id": 323,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumValue",
												"id": 328,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ContractValue",
												"id": 342,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 385,
									"name": "EnumResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An enum value or error"
									},
									"typeParameter": [
										{
											"id": 386,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 200,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "EnumValue",
												"id": 328,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "EnumErrorResult",
												"id": 629,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 381,
									"name": "FixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed fixed-point value or error"
									},
									"typeParameter": [
										{
											"id": 382,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 178,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FixedValue",
												"id": 309,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FixedErrorResult",
												"id": 605,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 455,
									"name": "FunctionExternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An external function pointer value or error"
									},
									"typeParameter": [
										{
											"id": 456,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 432,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalValue",
												"id": 457,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalErrorResult",
												"id": 708,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 462,
									"name": "FunctionExternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "External function values come in 3 types:\n1. known function of known class\n2. known class, but can't locate function\n3. can't determine class"
									},
									"typeParameter": [
										{
											"id": 463,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 457,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoKnown",
												"id": 464,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoInvalid",
												"id": 470,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalValueInfoUnknown",
												"id": 475
											}
										]
									}
								},
								{
									"id": 479,
									"name": "FunctionInternalResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An internal function pointer value or error"
									},
									"typeParameter": [
										{
											"id": 480,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 521,
											"character": 34
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalValue",
												"id": 481,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalErrorResult",
												"id": 725,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 486,
									"name": "FunctionInternalValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Internal functions come in three types:\n1. An actual function,\n2. A default value,\n3. A special value to indicate that decoding internal functions isn't supported in this context."
									},
									"typeParameter": [
										{
											"id": 487,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 546,
											"character": 37
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoKnown",
												"id": 488,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoException",
												"id": 498,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalValueInfoUnknown",
												"id": 504,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 369,
									"name": "IntResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A signed integer value or error"
									},
									"typeParameter": [
										{
											"id": 370,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 124,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "IntValue",
												"id": 262,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "IntErrorResult",
												"id": 532,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 431,
									"name": "MagicResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A magic variable's value (or error)"
									},
									"typeParameter": [
										{
											"id": 432,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 349,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "MagicValue",
												"id": 433,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicErrorResult",
												"id": 694,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 397,
									"name": "MappingResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A mapping value or error"
									},
									"typeParameter": [
										{
											"id": 398,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 248,
											"character": 25
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "MappingValue",
												"id": 399,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingErrorResult",
												"id": 673,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 359,
									"name": "Result",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "This is the overall Result type.  It may encode an actual value or an error."
									},
									"typeParameter": [
										{
											"id": 360,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 46,
											"character": 18
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryResult",
												"id": 363,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayResult",
												"id": 389,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingResult",
												"id": 397,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructResult",
												"id": 408,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleResult",
												"id": 420,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicResult",
												"id": 431,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeResult",
												"id": 441,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalResult",
												"id": 455,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalResult",
												"id": 479,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 379,
									"name": "StringResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A string value or error"
									},
									"typeParameter": [
										{
											"id": 380,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 169,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StringValue",
												"id": 297,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StringErrorResult",
												"id": 598,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 302,
									"name": "StringValueInfo",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "These come in two types: valid strings and malformed strings."
									},
									"sources": [
										{
											"fileName": "codec/lib/format/elementary.ts",
											"line": 165,
											"character": 27
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StringValueInfoValid",
												"id": 303
											},
											{
												"type": "reference",
												"name": "StringValueInfoMalformed",
												"id": 306
											}
										]
									}
								},
								{
									"id": 408,
									"name": "StructResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A struct value or error"
									},
									"typeParameter": [
										{
											"id": 409,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 282,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StructValue",
												"id": 410,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructErrorResult",
												"id": 680,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 420,
									"name": "TupleResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A tuple value or error"
									},
									"typeParameter": [
										{
											"id": 421,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 320,
											"character": 23
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TupleValue",
												"id": 422,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleErrorResult",
												"id": 687,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 441,
									"name": "TypeResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type's value (or error); currently only allows contract types and\nenum types"
									},
									"typeParameter": [
										{
											"id": 442,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 375,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TypeValue",
												"id": 443,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeErrorResult",
												"id": 701,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 443,
									"name": "TypeValue",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "A type's value -- for now, we consider the value of a contract type to\nconsist of the values of its non-inherited state variables in the current\ncontext, and the value of an enum type to be an array of its possible options\n(as Values).  May contain errors."
									},
									"typeParameter": [
										{
											"id": 444,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 387,
											"character": 21
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "TypeValueContract",
												"id": 445,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeValueEnum",
												"id": 450,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 383,
									"name": "UfixedResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned fixed-point value or error"
									},
									"typeParameter": [
										{
											"id": 384,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 187,
											"character": 24
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UfixedValue",
												"id": 323,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UfixedErrorResult",
												"id": 610,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 367,
									"name": "UintResult",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An unsigned integer value or error"
									},
									"typeParameter": [
										{
											"id": 368,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 115,
											"character": 22
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "UintValue",
												"id": 248,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "UintErrorResult",
												"id": 520,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 361,
									"name": "Value",
									"kind": 4194304,
									"kindString": "Type alias",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "An actual value, not an error (although if a container type it may contain errors!)"
									},
									"typeParameter": [
										{
											"id": 362,
											"name": "C",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FormatConfig"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 63,
											"character": 17
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ElementaryValue",
												"id": 244,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "ArrayValue",
												"id": 391,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MappingValue",
												"id": 399,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "StructValue",
												"id": 410,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TupleValue",
												"id": 422,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "MagicValue",
												"id": 433,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "TypeValue",
												"id": 443,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionExternalValue",
												"id": 457,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											},
											{
												"type": "reference",
												"name": "FunctionInternalValue",
												"id": 481,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "C",
														"constraint": {
															"type": "reference",
															"name": "FormatConfig"
														}
													}
												]
											}
										]
									}
								},
								{
									"id": 243,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/values.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:format:values\")"
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										289,
										391,
										267,
										282,
										274,
										342,
										349,
										355,
										314,
										328,
										333,
										335,
										309,
										457,
										470,
										464,
										475,
										481,
										498,
										488,
										504,
										262,
										253,
										404,
										433,
										399,
										416,
										427,
										297,
										306,
										303,
										410,
										422,
										445,
										450,
										323,
										248
									],
									"categories": [
										{
											"title": "Elementary types",
											"children": [
												289,
												267,
												282,
												274,
												309,
												262,
												297,
												306,
												303,
												323,
												248
											]
										},
										{
											"title": "Container types",
											"children": [
												391,
												399,
												410,
												422
											]
										},
										{
											"title": "Function types",
											"children": [
												457,
												470,
												464,
												475,
												481,
												498,
												488,
												504
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												433,
												445,
												450
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												342,
												349,
												355,
												328
											]
										},
										{
											"title": "Other",
											"children": [
												314,
												333,
												335,
												253,
												404,
												416,
												427
											]
										}
									]
								},
								{
									"title": "Type aliases",
									"kind": 4194304,
									"children": [
										377,
										389,
										371,
										375,
										365,
										373,
										246,
										387,
										347,
										363,
										244,
										385,
										381,
										455,
										462,
										479,
										486,
										369,
										431,
										397,
										359,
										379,
										302,
										408,
										420,
										441,
										443,
										383,
										367,
										361
									],
									"categories": [
										{
											"title": "General categories",
											"children": [
												363,
												244,
												359,
												361
											]
										},
										{
											"title": "Elementary types",
											"children": [
												377,
												371,
												375,
												365,
												373,
												246,
												381,
												369,
												379,
												302,
												383,
												367
											]
										},
										{
											"title": "Container types",
											"children": [
												389,
												397,
												408,
												420
											]
										},
										{
											"title": "Function types",
											"children": [
												455,
												462,
												479,
												486
											]
										},
										{
											"title": "Special container types (debugger-only)",
											"children": [
												431,
												441,
												443
											]
										},
										{
											"title": "User-defined elementary types",
											"children": [
												387,
												347,
												385
											]
										}
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										243
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/index.ts",
									"line": 11,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								510,
								3,
								830,
								242
							],
							"categories": [
								{
									"title": "Main Format",
									"children": [
										510,
										3,
										242
									]
								},
								{
									"title": "Other",
									"children": [
										830
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 67,
							"character": 8
						}
					]
				},
				{
					"id": 1598,
					"name": "MappingKey",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For encoding mapping keys"
					},
					"children": [
						{
							"id": 1599,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1600,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:mapping-key:encode\")"
								},
								{
									"id": 1601,
									"name": "encodeMappingKey",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1602,
											"name": "encodeMappingKey",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1603,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.ElementaryValue",
														"id": 244
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 16,
											"character": 32
										}
									]
								},
								{
									"id": 1604,
									"name": "mappingKeyAsHex",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1605,
											"name": "mappingKeyAsHex",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {},
											"parameters": [
												{
													"id": 1606,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.ElementaryValue",
														"id": 244
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/mapping-key/encode/index.ts",
											"line": 34,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1600
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1601,
										1604
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1601,
												1604
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/mapping-key/index.ts",
									"line": 2,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1599
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 338,
							"character": 8
						}
					]
				},
				{
					"id": 1607,
					"name": "Memory",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation and decoding of memory data"
					},
					"children": [
						{
							"id": 1608,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1613,
									"name": "MemoryAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1614,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 16,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "MemoryMemberAllocation",
													"id": 1615
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1614
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 15,
											"character": 33
										}
									]
								},
								{
									"id": 1610,
									"name": "MemoryAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1611,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1612,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocation",
												"id": 1613
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 11,
											"character": 34
										}
									]
								},
								{
									"id": 1615,
									"name": "MemoryMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1616,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1618,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 22,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryPointer",
												"id": 2393
											}
										},
										{
											"id": 1617,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/memory/allocate/types.ts",
													"line": 21,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1616,
												1618,
												1617
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/types.ts",
											"line": 19,
											"character": 39
										}
									]
								},
								{
									"id": 1609,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:memory:allocate\")"
								},
								{
									"id": 1625,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1626,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1627,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 126
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocation",
												"id": 1613
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 38,
											"character": 23
										}
									]
								},
								{
									"id": 1619,
									"name": "getMemoryAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1620,
											"name": "getMemoryAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1621,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "MemoryAllocations",
												"id": 1610
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 14,
											"character": 36
										}
									]
								},
								{
									"id": 1622,
									"name": "isSkippedInMemoryStructs",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1623,
											"name": "isSkippedInMemoryStructs",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1624,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/allocate/index.ts",
											"line": 26,
											"character": 40
										}
									]
								}
							],
							"groups": [
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1613,
										1610,
										1615
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1609
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1625,
										1619,
										1622
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1628,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1629,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:memory:decode\")"
								},
								{
									"id": 1630,
									"name": "decodeMemory",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1631,
											"name": "decodeMemory",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1632,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1633,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "MemoryPointer",
														"id": 2393
													}
												},
												{
													"id": 1634,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1635,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 16,
											"character": 29
										}
									]
								},
								{
									"id": 1639,
									"name": "decodeMemoryReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1640,
											"name": "decodeMemoryReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1641,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 214
													}
												},
												{
													"id": 1642,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 2383
													}
												},
												{
													"id": 1643,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1644,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 59,
											"character": 47
										}
									]
								},
								{
									"id": 1636,
									"name": "decodeMemorySkippedType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1637,
											"name": "decodeMemorySkippedType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1638,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Values.Result",
												"id": 359
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/memory/decode/index.ts",
											"line": 39,
											"character": 32
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1629
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1630,
										1639,
										1636
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/memory/index.ts",
									"line": 5,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1608,
								1628
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 345,
							"character": 13
						}
					]
				},
				{
					"id": 2382,
					"name": "Pointer",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 2397,
							"name": "CalldataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2400,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 38,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2398,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 36,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "calldata"
									}
								},
								{
									"id": 2399,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 37,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2400,
										2398,
										2399
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 35,
									"character": 32
								}
							]
						},
						{
							"id": 2416,
							"name": "CodePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2419,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 67,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2417,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 65,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "code"
									}
								},
								{
									"id": 2418,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 66,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2419,
										2417,
										2418
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 64,
									"character": 28
								}
							]
						},
						{
							"id": 2426,
							"name": "ConstantDefinitionPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2428,
									"name": "definition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 82,
											"character": 12
										}
									],
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 2427,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 81,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "definition"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2428,
										2427
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 80,
									"character": 42
								}
							]
						},
						{
							"id": 2405,
							"name": "EventDataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2408,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 50,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2406,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 48,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "eventdata"
									}
								},
								{
									"id": 2407,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 49,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2408,
										2406,
										2407
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 47,
									"character": 33
								}
							]
						},
						{
							"id": 2409,
							"name": "EventTopicPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2410,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 54,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "eventtopic"
									}
								},
								{
									"id": 2411,
									"name": "topic",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 55,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2410,
										2411
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 53,
									"character": 34
								}
							]
						},
						{
							"id": 2412,
							"name": "GenericAbiPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2415,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 61,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2413,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 59,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "abi"
									}
								},
								{
									"id": 2414,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 60,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2415,
										2413,
										2414
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 58,
									"character": 34
								}
							]
						},
						{
							"id": 2393,
							"name": "MemoryPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2396,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 32,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2394,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 30,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "memory"
									}
								},
								{
									"id": 2395,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 31,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2396,
										2394,
										2395
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 29,
									"character": 30
								}
							]
						},
						{
							"id": 2401,
							"name": "ReturndataPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2404,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 44,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2402,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 42,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "returndata"
									}
								},
								{
									"id": 2403,
									"name": "start",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 43,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2404,
										2402,
										2403
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 41,
									"character": 34
								}
							]
						},
						{
							"id": 2429,
							"name": "SpecialPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2430,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 86,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "special"
									}
								},
								{
									"id": 2431,
									"name": "special",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 87,
											"character": 9
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2430,
										2431
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 85,
									"character": 31
								}
							]
						},
						{
							"id": 2423,
							"name": "StackLiteralPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2425,
									"name": "literal",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 77,
											"character": 9
										}
									],
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								},
								{
									"id": 2424,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 76,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "stackliteral"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2425,
										2424
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 75,
									"character": 36
								}
							]
						},
						{
							"id": 2389,
							"name": "StackPointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2391,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 25,
											"character": 6
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 2390,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 24,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "stack"
									}
								},
								{
									"id": 2392,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 26,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2391,
										2390,
										2392
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 23,
									"character": 29
								}
							]
						},
						{
							"id": 2420,
							"name": "StoragePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2421,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 71,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "storage"
									}
								},
								{
									"id": 2422,
									"name": "range",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 72,
											"character": 7
										}
									],
									"type": {
										"type": "reference",
										"name": "Range",
										"id": 1695
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2421,
										2422
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 70,
									"character": 31
								}
							]
						},
						{
							"id": 2432,
							"name": "UnreadablePointer",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 2433,
									"name": "location",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/pointer/types.ts",
											"line": 91,
											"character": 10
										}
									],
									"type": {
										"type": "stringLiteral",
										"value": "nowhere"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										2433
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 90,
									"character": 34
								}
							]
						},
						{
							"id": 2386,
							"name": "AbiDataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 16,
									"character": 26
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CalldataPointer",
										"id": 2397
									},
									{
										"type": "reference",
										"name": "ReturndataPointer",
										"id": 2401
									},
									{
										"type": "reference",
										"name": "EventDataPointer",
										"id": 2405
									}
								]
							}
						},
						{
							"id": 2385,
							"name": "AbiPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 15,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 2386
									},
									{
										"type": "reference",
										"name": "GenericAbiPointer",
										"id": 2412
									}
								]
							}
						},
						{
							"id": 2387,
							"name": "BytesPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 20,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "MemoryPointer",
										"id": 2393
									},
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 2386
									},
									{
										"type": "reference",
										"name": "CodePointer",
										"id": 2416
									}
								]
							}
						},
						{
							"id": 2388,
							"name": "CodeFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 21,
									"character": 27
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CodePointer",
										"id": 2416
									},
									{
										"type": "reference",
										"name": "UnreadablePointer",
										"id": 2432
									}
								]
							}
						},
						{
							"id": 2383,
							"name": "DataPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 4,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "StackFormPointer",
										"id": 2384
									},
									{
										"type": "reference",
										"name": "MemoryPointer",
										"id": 2393
									},
									{
										"type": "reference",
										"name": "StoragePointer",
										"id": 2420
									},
									{
										"type": "reference",
										"name": "AbiDataPointer",
										"id": 2386
									},
									{
										"type": "reference",
										"name": "CodeFormPointer",
										"id": 2388
									},
									{
										"type": "reference",
										"name": "ConstantDefinitionPointer",
										"id": 2426
									},
									{
										"type": "reference",
										"name": "SpecialPointer",
										"id": 2429
									},
									{
										"type": "reference",
										"name": "EventTopicPointer",
										"id": 2409
									}
								]
							}
						},
						{
							"id": 2384,
							"name": "StackFormPointer",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/pointer/types.ts",
									"line": 14,
									"character": 28
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "StackPointer",
										"id": 2389
									},
									{
										"type": "reference",
										"name": "StackLiteralPointer",
										"id": 2423
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								2397,
								2416,
								2426,
								2405,
								2409,
								2412,
								2393,
								2401,
								2429,
								2423,
								2389,
								2420,
								2432
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								2386,
								2385,
								2387,
								2388,
								2383,
								2384
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 395,
							"character": 8
						}
					]
				},
				{
					"id": 1645,
					"name": "Special",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of special/magic variables"
					},
					"children": [
						{
							"id": 1646,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1647,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:special:decode\")"
								},
								{
									"id": 1661,
									"name": "coinbaseType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1662,
											"name": "coinbaseType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1663,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.AddressType",
												"id": 35
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 155,
											"character": 21
										}
									]
								},
								{
									"id": 1653,
									"name": "decodeMagic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1654,
											"name": "decodeMagic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1655,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "MagicType",
														"id": 195
													}
												},
												{
													"id": 1656,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 2429
													}
												},
												{
													"id": 1657,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.MagicResult",
														"id": 431
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 24,
											"character": 28
										}
									]
								},
								{
									"id": 1648,
									"name": "decodeSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1649,
											"name": "decodeSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1650,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1651,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 2429
													}
												},
												{
													"id": 1652,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 12,
											"character": 30
										}
									]
								},
								{
									"id": 1658,
									"name": "senderType",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1659,
											"name": "senderType",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1660,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.AddressType",
												"id": 35
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 130,
											"character": 19
										}
									]
								},
								{
									"id": 1664,
									"name": "solidityVersionHasChainId",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1665,
											"name": "solidityVersionHasChainId",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1666,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/decode/index.ts",
											"line": 175,
											"character": 34
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1647
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1661,
										1653,
										1648,
										1658,
										1664
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1667,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1668,
									"name": "readSpecial",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1669,
											"name": "readSpecial",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1670,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "SpecialPointer",
														"id": 2429
													}
												},
												{
													"id": 1671,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2435
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/special/read/index.ts",
											"line": 4,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1668
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/special/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1646,
								1667
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 351,
							"character": 9
						}
					]
				},
				{
					"id": 1672,
					"name": "Stack",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding stack variables"
					},
					"children": [
						{
							"id": 1673,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1674,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:stack:decode\")"
								},
								{
									"id": 1680,
									"name": "decodeLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1681,
											"name": "decodeLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1682,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1683,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackLiteralPointer",
														"id": 2423
													}
												},
												{
													"id": 1684,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 34,
											"character": 30
										}
									]
								},
								{
									"id": 1675,
									"name": "decodeStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1676,
											"name": "decodeStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1677,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1678,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackPointer",
														"id": 2389
													}
												},
												{
													"id": 1679,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/decode/index.ts",
											"line": 16,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1674
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1680,
										1675
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1685,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1686,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:stack:read\")"
								},
								{
									"id": 1687,
									"name": "readStack",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1688,
											"name": "readStack",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1689,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackPointer",
														"id": 2389
													}
												},
												{
													"id": 1690,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2435
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 8,
											"character": 25
										}
									]
								},
								{
									"id": 1691,
									"name": "readStackLiteral",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1692,
											"name": "readStackLiteral",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1693,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StackLiteralPointer",
														"id": 2423
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/stack/read/index.ts",
											"line": 35,
											"character": 32
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1686
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1687,
										1691
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/stack/index.ts",
									"line": 10,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1673,
								1685
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 358,
							"character": 10
						}
					]
				},
				{
					"id": 1694,
					"name": "Storage",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "For allocation and decoding of storage variables"
					},
					"children": [
						{
							"id": 1726,
							"name": "Allocate",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1751,
									"name": "UnknownBaseContractIdError",
									"kind": 128,
									"kindString": "Class",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1756,
											"name": "constructor",
											"kind": 512,
											"kindString": "Constructor",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 1757,
													"name": "new UnknownBaseContractIdError",
													"kind": 16384,
													"kindString": "Constructor signature",
													"flags": {},
													"parameters": [
														{
															"id": 1758,
															"name": "derivedId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 1759,
															"name": "derivedName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1760,
															"name": "derivedKind",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 1761,
															"name": "baseId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "UnknownBaseContractIdError",
														"id": 1751
													}
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 39,
													"character": 24
												}
											]
										},
										{
											"id": 1755,
											"name": "baseId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 39,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1752,
											"name": "derivedId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 36,
													"character": 18
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 1754,
											"name": "derivedKind",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 38,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1753,
											"name": "derivedName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isPublic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 37,
													"character": 20
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1763,
											"name": "message",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 974,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.message"
											}
										},
										{
											"id": 1762,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 973,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.name"
											}
										},
										{
											"id": 1764,
											"name": "stack",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 975,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"overwrites": {
												"type": "reference",
												"name": "Error.stack"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "Error.stack"
											}
										},
										{
											"id": 1765,
											"name": "Error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isStatic": true,
												"isExported": true
											},
											"sources": [
												{
													"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
													"line": 984,
													"character": 17
												}
											],
											"type": {
												"type": "reference",
												"name": "ErrorConstructor"
											}
										}
									],
									"groups": [
										{
											"title": "Constructors",
											"kind": 512,
											"children": [
												1756
											]
										},
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1755,
												1752,
												1754,
												1753,
												1763,
												1762,
												1764,
												1765
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 35,
											"character": 39
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "Error"
										}
									]
								},
								{
									"id": 1738,
									"name": "StateAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1739,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 35,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StateVariableAllocation",
													"id": 1746
												}
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1739
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 34,
											"character": 32
										}
									]
								},
								{
									"id": 1740,
									"name": "StateAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1741,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1742,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1743,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 1744,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 1745,
																	"name": "id",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "StateAllocation",
																"id": 1738
															}
														}
													],
													"sources": [
														{
															"fileName": "codec/lib/storage/allocate/types.ts",
															"line": 27,
															"character": 26
														}
													]
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 26,
											"character": 33
										}
									]
								},
								{
									"id": 1746,
									"name": "StateVariableAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1749,
											"name": "compilationId",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 42,
													"character": 15
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1748,
											"name": "definedIn",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 41,
													"character": 11
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										},
										{
											"id": 1747,
											"name": "definition",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 40,
													"character": 12
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNode",
												"id": 1860
											}
										},
										{
											"id": 1750,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 43,
													"character": 9
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "StoragePointer",
														"id": 2420
													},
													{
														"type": "reference",
														"name": "ConstantDefinitionPointer",
														"id": 2426
													},
													{
														"type": "reference",
														"name": "Pointer.CodeFormPointer",
														"id": 2388
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1749,
												1748,
												1747,
												1750
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 39,
											"character": 40
										}
									]
								},
								{
									"id": 1728,
									"name": "StorageAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1730,
											"name": "members",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 14,
													"character": 9
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StorageMemberAllocation",
													"id": 1734
												}
											}
										},
										{
											"id": 1729,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 13,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1706
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1730,
												1729
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 12,
											"character": 34
										}
									]
								},
								{
									"id": 1766,
									"name": "StorageAllocationInfo",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 1768,
											"name": "allocations",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 58,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1731
											}
										},
										{
											"id": 1767,
											"name": "size",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/index.ts",
													"line": 57,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1706
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1768,
												1767
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 56,
											"character": 31
										}
									]
								},
								{
									"id": 1731,
									"name": "StorageAllocations",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 1732,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 1733,
													"name": "id",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocation",
												"id": 1728
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 7,
											"character": 35
										}
									]
								},
								{
									"id": 1734,
									"name": "StorageMemberAllocation",
									"kind": 256,
									"kindString": "Interface",
									"flags": {
										"isExported": true
									},
									"children": [
										{
											"id": 1735,
											"name": "name",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 19,
													"character": 6
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1737,
											"name": "pointer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 21,
													"character": 9
												}
											],
											"type": {
												"type": "reference",
												"name": "StoragePointer",
												"id": 2420
											}
										},
										{
											"id": 1736,
											"name": "type",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "codec/lib/storage/allocate/types.ts",
													"line": 20,
													"character": 6
												}
											],
											"type": {
												"type": "reference",
												"name": "Format.Types.Type",
												"id": 5
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												1735,
												1737,
												1736
											]
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/types.ts",
											"line": 18,
											"character": 40
										}
									]
								},
								{
									"id": 1727,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:storage:allocate\")"
								},
								{
									"id": 1796,
									"name": "allocateContractState",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1797,
											"name": "allocateContractState",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1798,
													"name": "contract",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												},
												{
													"id": 1799,
													"name": "immutableReferences",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ImmutableReferences"
													}
												},
												{
													"id": 1800,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1801,
													"name": "compiler",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "CompilerVersion",
														"id": 2126
													}
												},
												{
													"id": 1802,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												},
												{
													"id": 1803,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1804,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1731
													}
												},
												{
													"id": 1805,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StateAllocations",
														"id": 1740
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "StateAllocations",
												"id": 1740
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 270,
											"character": 30
										}
									]
								},
								{
									"id": 1787,
									"name": "allocateMembers",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1788,
											"name": "allocateMembers",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1789,
													"name": "parentId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 1790,
													"name": "members",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "NameTypePair",
															"id": 128
														}
													}
												},
												{
													"id": 1791,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1792,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1731
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1731
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 140,
											"character": 24
										}
									]
								},
								{
									"id": 1782,
									"name": "allocateStruct",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1783,
											"name": "allocateStruct",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1784,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.StructType",
														"id": 126
													}
												},
												{
													"id": 1785,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1786,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1731
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1731
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 125,
											"character": 23
										}
									]
								},
								{
									"id": 1772,
									"name": "getStateAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1773,
											"name": "getStateAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "This function gets allocations for the state variables of the contracts;\nthis is distinct from getStorageAllocations, which gets allocations for\nstorage structs.",
												"text": "While mostly state variables are kept in storage, constant ones are not.\nAnd immutable ones, once those are introduced, will be kept in code!\n(But those don't exist yet so this function doesn't handle them yet.)\n"
											},
											"parameters": [
												{
													"id": 1774,
													"name": "contracts",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "ContractAllocationInfo",
															"id": 1280
														}
													}
												},
												{
													"id": 1775,
													"name": "referenceDeclarations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 1776,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 1777,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 1778,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1907
																	}
																}
															],
															"sources": [
																{
																	"fileName": "codec/lib/storage/allocate/index.ts",
																	"line": 94,
																	"character": 24
																}
															]
														}
													}
												},
												{
													"id": 1779,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1780,
													"name": "storageAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1731
													}
												},
												{
													"id": 1781,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StateAllocations",
														"id": 1740
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "StateAllocations",
												"id": 1740
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 92,
											"character": 35
										}
									]
								},
								{
									"id": 1793,
									"name": "getStateVariables",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1794,
											"name": "getStateVariables",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1795,
													"name": "contractNode",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "AstNode",
														"id": 1860
													}
												}
											],
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "AstNode",
													"id": 1860
												}
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 262,
											"character": 26
										}
									]
								},
								{
									"id": 1769,
									"name": "getStorageAllocations",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1770,
											"name": "getStorageAllocations",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1771,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocations",
												"id": 1731
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 63,
											"character": 37
										}
									]
								},
								{
									"id": 1806,
									"name": "storageSize",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1807,
											"name": "storageSize",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1808,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1809,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1810,
													"name": "allocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1731
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Storage.StorageLength",
												"id": 1706
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 433,
											"character": 27
										}
									]
								},
								{
									"id": 1811,
									"name": "storageSizeAndAllocate",
									"kind": 64,
									"kindString": "Function",
									"flags": {},
									"signatures": [
										{
											"id": 1812,
											"name": "storageSizeAndAllocate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1813,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1814,
													"name": "userDefinedTypes",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												},
												{
													"id": 1815,
													"name": "existingAllocations",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reference",
														"name": "StorageAllocations",
														"id": 1731
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "StorageAllocationInfo",
												"id": 1766
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/allocate/index.ts",
											"line": 441,
											"character": 31
										}
									]
								}
							],
							"groups": [
								{
									"title": "Classes",
									"kind": 128,
									"children": [
										1751
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										1738,
										1740,
										1746,
										1728,
										1766,
										1731,
										1734
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1727
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1796,
										1787,
										1782,
										1772,
										1793,
										1769,
										1806,
										1811
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 7,
									"character": 8
								}
							]
						},
						{
							"id": 1816,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1817,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:storage:decode\")"
								},
								{
									"id": 1818,
									"name": "decodeStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1819,
											"name": "decodeStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1820,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1821,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 2420
													}
												},
												{
													"id": 1822,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 18,
											"character": 30
										}
									]
								},
								{
									"id": 1828,
									"name": "decodeStorageReference",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1829,
											"name": "decodeStorageReference",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1830,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 214
													}
												},
												{
													"id": 1831,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 2420
													}
												},
												{
													"id": 1832,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 79,
											"character": 39
										}
									]
								},
								{
									"id": 1823,
									"name": "decodeStorageReferenceByAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1824,
											"name": "decodeStorageReferenceByAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1825,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.ReferenceType",
														"id": 214
													}
												},
												{
													"id": 1826,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Pointer.DataPointer",
														"id": 2383
													}
												},
												{
													"id": 1827,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/decode/index.ts",
											"line": 33,
											"character": 48
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1817
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1818,
										1828,
										1823
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1833,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1834,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:storage:read\")"
								},
								{
									"id": 1835,
									"name": "readSlot",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1836,
											"name": "readSlot",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1837,
													"name": "storage",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "WordMapping",
														"id": 2448
													}
												},
												{
													"id": 1838,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Storage.Slot",
														"id": 1704
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 13,
											"character": 25
										}
									]
								},
								{
									"id": 1839,
									"name": "readStorage",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1840,
											"name": "readStorage",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1841,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StoragePointer",
														"id": 2420
													}
												},
												{
													"id": 1842,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2435
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/read/index.ts",
											"line": 37,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1834
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1835,
										1839
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 18,
									"character": 8
								}
							]
						},
						{
							"id": 1711,
							"name": "Utils",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isExported": true
							},
							"children": [
								{
									"id": 1712,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:storage:utils\")"
								},
								{
									"id": 1722,
									"name": "equalSlots",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1723,
											"name": "equalSlots",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1724,
													"name": "slot1",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Slot",
																"id": 1704
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												},
												{
													"id": 1725,
													"name": "slot2",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "Slot",
																"id": 1704
															},
															{
																"type": "intrinsic",
																"name": "undefined"
															}
														]
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 50,
											"character": 26
										}
									]
								},
								{
									"id": 1713,
									"name": "isWordsLength",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1714,
											"name": "isWordsLength",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1715,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageLength",
														"id": 1706
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 9,
											"character": 29
										}
									]
								},
								{
									"id": 1719,
									"name": "slotAddress",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1720,
											"name": "slotAddress",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "convert a slot to a word corresponding to actual storage address",
												"text": "if `slot` is an array, return hash of array values.\nif `slot` array is nested, recurse on sub-arrays\n"
											},
											"parameters": [
												{
													"id": 1721,
													"name": "slot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"comment": {
														"text": "number or possibly-nested array of numbers\n"
													},
													"type": {
														"type": "reference",
														"name": "Slot",
														"id": 1704
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "BN"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 30,
											"character": 27
										}
									]
								},
								{
									"id": 1716,
									"name": "storageLengthToBytes",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1717,
											"name": "storageLengthToBytes",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1718,
													"name": "size",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "StorageLength",
														"id": 1706
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/storage/utils.ts",
											"line": 13,
											"character": 36
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1712
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1722,
										1713,
										1719,
										1716
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/storage/index.ts",
									"line": 4,
									"character": 8
								}
							]
						},
						{
							"id": 1695,
							"name": "Range",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 1696,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FormatConfig"
									}
								}
							],
							"children": [
								{
									"id": 1697,
									"name": "from",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 8,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "StoragePosition",
										"id": 1700,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								},
								{
									"id": 1699,
									"name": "length",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 10,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1698,
									"name": "to",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 9,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "StoragePosition",
										"id": 1700,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1697,
										1699,
										1698
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 5,
									"character": 22
								}
							]
						},
						{
							"id": 1700,
							"name": "StoragePosition",
							"kind": 256,
							"kindString": "Interface",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 1701,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FormatConfig"
									}
								}
							],
							"children": [
								{
									"id": 1703,
									"name": "index",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 17,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1702,
									"name": "slot",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "codec/lib/format/storage.ts",
											"line": 16,
											"character": 6
										}
									],
									"type": {
										"type": "reference",
										"name": "Slot",
										"id": 1704,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										1703,
										1702
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 13,
									"character": 32
								}
							]
						},
						{
							"id": 1704,
							"name": "Slot",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 1705,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FormatConfig"
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/format/storage.ts",
									"line": 20,
									"character": 16
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"name": "SlotBaseFields",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C",
												"constraint": {
													"type": "reference",
													"name": "FormatConfig"
												}
											}
										]
									},
									{
										"type": "unknown",
										"name": "SlotOffsetFields[C[\"integerType\"]]"
									}
								]
							}
						},
						{
							"id": 1706,
							"name": "StorageLength",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/storage/types.ts",
									"line": 6,
									"character": 25
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 1707,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1708,
													"name": "bytes",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 6,
															"character": 35
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1708
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 6,
													"character": 27
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1709,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1710,
													"name": "words",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "codec/lib/storage/types.ts",
															"line": 6,
															"character": 55
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														1710
													]
												}
											],
											"sources": [
												{
													"fileName": "codec/lib/storage/types.ts",
													"line": 6,
													"character": 47
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1726,
								1816,
								1833,
								1711
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								1695,
								1700
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								1704,
								1706
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 364,
							"character": 8
						}
					]
				},
				{
					"id": 1579,
					"name": "Topic",
					"kind": 2,
					"kindString": "Module",
					"flags": {
						"isProtected": true,
						"isExported": true
					},
					"comment": {
						"shortText": "For decoding of event topics"
					},
					"children": [
						{
							"id": 1580,
							"name": "Decode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1581,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:topic:decode\")"
								},
								{
									"id": 1582,
									"name": "decodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1583,
											"name": "decodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1584,
													"name": "dataType",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													}
												},
												{
													"id": 1585,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventTopicPointer",
														"id": 2409
													}
												},
												{
													"id": 1586,
													"name": "info",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmInfo",
														"id": 2451
													}
												},
												{
													"id": 1587,
													"name": "options",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "DecoderOptions"
													},
													"defaultValue": " {}"
												}
											],
											"type": {
												"type": "reference",
												"name": "Generator",
												"typeArguments": [
													{
														"type": "reference",
														"name": "DecoderRequest",
														"id": 1084
													},
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "reference",
														"name": "Uint8Array"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/decode/index.ts",
											"line": 12,
											"character": 28
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1581
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1582
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 2,
									"character": 8
								}
							]
						},
						{
							"id": 1588,
							"name": "Encode",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1589,
									"name": "debug",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isConst": true
									},
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 2,
											"character": 11
										}
									],
									"type": {
										"type": "reference",
										"name": "Debugger"
									},
									"defaultValue": " debugModule(\"codec:topic:encode\")"
								},
								{
									"id": 1590,
									"name": "encodeTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1591,
											"name": "encodeTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Encodes for event topics (indexed parameters).\nWarning: This function is not fully implemented yet!"
											},
											"parameters": [
												{
													"id": 1592,
													"name": "input",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Uint8Array"
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/encode/index.ts",
											"line": 14,
											"character": 27
										}
									]
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										1589
									]
								},
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1590
									],
									"categories": [
										{
											"title": "Encoding (low-level)",
											"children": [
												1590
											]
										}
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 10,
									"character": 8
								}
							]
						},
						{
							"id": 1593,
							"name": "Read",
							"kind": 2,
							"kindString": "Module",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"children": [
								{
									"id": 1594,
									"name": "readTopic",
									"kind": 64,
									"kindString": "Function",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1595,
											"name": "readTopic",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 1596,
													"name": "pointer",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EventTopicPointer",
														"id": 2409
													}
												},
												{
													"id": 1597,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "EvmState",
														"id": 2435
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "Uint8Array"
											}
										}
									],
									"sources": [
										{
											"fileName": "codec/lib/topic/read/index.ts",
											"line": 4,
											"character": 25
										}
									]
								}
							],
							"groups": [
								{
									"title": "Functions",
									"kind": 64,
									"children": [
										1594
									]
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/topic/index.ts",
									"line": 18,
									"character": 8
								}
							]
						}
					],
					"groups": [
						{
							"title": "Modules",
							"kind": 2,
							"children": [
								1580,
								1588,
								1593
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/index.ts",
							"line": 320,
							"character": 10
						}
					]
				},
				{
					"id": 1102,
					"name": "UnknownUserDefinedTypeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the decoder was unable to locate a user-defined\ntype (struct, enum, or contract type) via its ID.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in\nthe future with Truffle DB.  In the meantime, it is at least worth noting that\nyou should not encounter this error if your entire project was written in\nSolidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 1105,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 1106,
									"name": "new UnknownUserDefinedTypeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 1107,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1108,
											"name": "typeString",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "UnknownUserDefinedTypeError",
										"id": 1102
									}
								}
							],
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 45,
									"character": 20
								}
							]
						},
						{
							"id": 1104,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 45,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1110,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 1109,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 1111,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 1103,
							"name": "typeString",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/common/types.ts",
									"line": 44,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1112,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1105
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1104,
								1110,
								1109,
								1111,
								1103,
								1112
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 43,
							"character": 40
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 1076,
					"name": "AbiArgument",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoded argument passed to a transaction or event,\nor returned from a call."
					},
					"children": [
						{
							"id": 1078,
							"name": "indexed",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether this is an indexed paramter.  Only included for event parameters."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 527,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 1077,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The name of the parameter.  Excluded if the parameter is nameless."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 523,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1079,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the argument.  Note that this is a [[Format.Values.Result|Format.Values.Result]], so it\nmay contain errors (although event decodings should typically not contain errors;\nsee the [[DecodedLog]] documentation for why)."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 533,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Values.Result",
								"id": 359
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1078,
								1077,
								1079
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 519,
							"character": 28
						}
					]
				},
				{
					"id": 1036,
					"name": "AnonymousDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of a log as an anonymous event."
					},
					"children": [
						{
							"id": 1041,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 296,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventEntry"
							}
						},
						{
							"id": 1040,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 291,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1076
								}
							}
						},
						{
							"id": 1038,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 282,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1042,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 301,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1039,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 287,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1037,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an AnonymousDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 275,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "anonymous"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1041,
								1040,
								1038,
								1042,
								1039,
								1037
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 271,
							"character": 34
						}
					]
				},
				{
					"id": 1048,
					"name": "BytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for a known\nclass returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 1055,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If the contract created was a library, and was compiled with Solidity\n0.4.20 or later, this field will be included, which gives the address of\nthe created contract (checksummed).  This field will not be included\notherwise!"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 480,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1054,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 473,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1052,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 464,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1051,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 460,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1053,
							"name": "immutables",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Decodings for any immutable state variables the created contract contains.\nOmitted in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 469,
									"character": 12
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StateVariable",
									"id": 1080
								}
							}
						},
						{
							"id": 1049,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a BytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 451,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "bytecode"
							}
						},
						{
							"id": 1050,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 455,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1055,
								1054,
								1052,
								1051,
								1053,
								1049,
								1050
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 447,
							"character": 33
						}
					]
				},
				{
					"id": 1088,
					"name": "CodeRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A request for code"
					},
					"children": [
						{
							"id": 1090,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 558,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1089,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 557,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "code"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1090,
								1089
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 556,
							"character": 28
						}
					]
				},
				{
					"id": 1007,
					"name": "ConstructorDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a transaction decoding for a constructor call.\nIt's even possible to decode a library constructor call with this.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 1011,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the constructor that was called.  Note that although\ndefault constructors don't actually get an ABI entry, we still return an\nABI entry regardless in that case."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 136,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ConstructorEntry"
							}
						},
						{
							"id": 1010,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the constructor.  This will be empty for a\ndefault constructor."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 130,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1076
								}
							}
						},
						{
							"id": 1012,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the constructor that was called."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 140,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1009,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract being constructed, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 125,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1013,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 145,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1008,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ConstructorDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 121,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "constructor"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1011,
								1010,
								1012,
								1009,
								1013,
								1008
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 117,
							"character": 36
						}
					]
				},
				{
					"id": 1072,
					"name": "EmptyFailureDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of empty return data from an unsuccessful\ncall, a reversion with no message."
					},
					"children": [
						{
							"id": 1075,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 393,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1073,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EmptyFailureDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 384,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "failure"
							}
						},
						{
							"id": 1074,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 388,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "false"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1075,
								1073,
								1074
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 380,
							"character": 37
						}
					]
				},
				{
					"id": 1028,
					"name": "EventDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of a log as a non-anonymous event."
					},
					"children": [
						{
							"id": 1033,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the event.  You can use this to extract the name, for\ninstance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 254,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "EventEntry"
							}
						},
						{
							"id": 1032,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the event."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 249,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1076
								}
							}
						},
						{
							"id": 1030,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) emitted the event, as a Format.Types.ContractType.\nThis may be a library!  When a library emits an event, the EVM records it as the calling contract\nhaving emitted the event, but we decode it as if the library emitted the event, for clarity.\n(The address of the contract the EVM thinks emitted the event can of course be found in the original log.)"
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 240,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1035,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 263,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1031,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the event, as a Format.Types.ContractType.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 245,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1029,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an EventDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 233,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "event"
							}
						},
						{
							"id": 1034,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The selector for the event, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 258,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1033,
								1032,
								1030,
								1035,
								1031,
								1029,
								1034
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 229,
							"character": 30
						}
					]
				},
				{
					"id": 1000,
					"name": "FunctionDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a transaction decoding for an ordinary function call to a known class;\nnot a constructor call, not a fallback call."
					},
					"children": [
						{
							"id": 1004,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the function that was called.  You can use this\nto extract the name, for instance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 95,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "FunctionEntry"
							}
						},
						{
							"id": 1003,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments to the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 90,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1076
								}
							}
						},
						{
							"id": 1002,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 86,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1006,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 104,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1001,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a FunctionDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 82,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "function"
							}
						},
						{
							"id": 1005,
							"name": "selector",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The selector for the function that was called, as a hexadecimal string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 99,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1004,
								1003,
								1002,
								1006,
								1001,
								1005
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 78,
							"character": 33
						}
					]
				},
				{
					"id": 1091,
					"name": "LogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of the options parameter to [[decodeEvent]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 1093,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 601,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ExtrasAllowed",
								"id": 1095
							}
						},
						{
							"id": 1094,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If passed, restricts to events with the given ID.  This is meant for\ninternal use by Truffle Debugger; you probably don't want to bother\nwith this option."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 607,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1092,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If passed, restricts to events with the given name."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 595,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1093,
								1094,
								1092
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 591,
							"character": 27
						}
					]
				},
				{
					"id": 1014,
					"name": "MessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding for a call to a known class that does not appear\nto be a function call, i.e., one that will result in the fallback function being invoked\nif there is one."
					},
					"children": [
						{
							"id": 1017,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the contract's fallback or receive function that would\nhandle this message; will be null if there is none."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 168,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "FallbackEntry"
									},
									{
										"type": "reference",
										"name": "ReceiveEntry"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1016,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of contract that was called, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 163,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1018,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 172,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1019,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 177,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1015,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a MessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 159,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "message"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1017,
								1016,
								1018,
								1019,
								1015
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 155,
							"character": 32
						}
					]
				},
				{
					"id": 1043,
					"name": "ReturnDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a collection of\nreturn values from a successful call."
					},
					"children": [
						{
							"id": 1046,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded return values from the function."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 321,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1076
								}
							}
						},
						{
							"id": 1047,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 326,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1044,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a ReturnDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 313,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "return"
							}
						},
						{
							"id": 1045,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 317,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1046,
								1047,
								1044,
								1045
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 309,
							"character": 31
						}
					]
				},
				{
					"id": 1065,
					"name": "RevertMessageDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of the return data as a revert message.\nFor forward-compatibility, we do not assume that the revert message is\na string."
					},
					"children": [
						{
							"id": 1067,
							"name": "abi",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The ABI entry for the error that was thrown.  You can use this\nto extract the name, for instance.  This may be spoofed for built-in\ntypes of errors."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 412,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorEntry"
							}
						},
						{
							"id": 1070,
							"name": "arguments",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The list of decoded arguments passed to revert(); currently, this will\nalways contain just a single string."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 429,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "AbiArgument",
									"id": 1076
								}
							}
						},
						{
							"id": 1071,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 434,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1068,
							"name": "definedIn",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The class of the contract that (according to this decoding) defined the\nerror type, as a Format.Types.ContractType.  This will be `null` if the\nerror was defined outside of the contract or it's one of the builtin\n`Error(string)` or `Panic(uint)` types.\nMay be omitted if we can't determine it, as may occur in ABI mode."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 420,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "Types.ContractType",
										"id": 177
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 1066,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is a RevertMessageDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 406,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "revert"
							}
						},
						{
							"id": 1069,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates an unsuccessful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 424,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "false"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1067,
								1070,
								1071,
								1068,
								1066,
								1069
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 402,
							"character": 38
						}
					]
				},
				{
					"id": 1061,
					"name": "SelfDestructDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of unexpectedly empty return data from a\nsuccessful call, indicating that the contract self-destructed."
					},
					"children": [
						{
							"id": 1064,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 372,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1062,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an SelfDestructDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 363,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "selfdestruct"
							}
						},
						{
							"id": 1063,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 367,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1064,
								1062,
								1063
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 359,
							"character": 37
						}
					]
				},
				{
					"id": 1080,
					"name": "StateVariable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Used for representing decoded state variables."
					},
					"children": [
						{
							"id": 1082,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that defined the variable, as a Format.Types.ContractType.\nNote that this class may differ from that of the contract being decoded, due\nto inheritance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 66,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 1081,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the variable.  Note that due to inheritance, this may not be unique\namong the contract's state variables."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 60,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1083,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the variable.  Note this is a Format.Values.Result, so it may be an error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 70,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Values.Result",
								"id": 359
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1082,
								1081,
								1083
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 55,
							"character": 30
						}
					]
				},
				{
					"id": 1085,
					"name": "StorageRequest",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A request for storage"
					},
					"children": [
						{
							"id": 1087,
							"name": "slot",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 548,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 1086,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 547,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "storage"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1087,
								1086
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 546,
							"character": 31
						}
					]
				},
				{
					"id": 1056,
					"name": "UnknownBytecodeDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a decoding of the return data as bytecode for an\nunknown class returned from a constructor.",
						"text": "NOTE: In the future, this type will also contain information about\nany linked libraries the contract being constructed uses.  However,\nthis is not implemented at present.\n"
					},
					"children": [
						{
							"id": 1060,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the contract that was created."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 510,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1059,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 506,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1057,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownBytecodeDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 497,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unknownbytecode"
							}
						},
						{
							"id": 1058,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Indicates that this kind of decoding indicates a successful return."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 501,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1060,
								1059,
								1057,
								1058
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 493,
							"character": 40
						}
					]
				},
				{
					"id": 1020,
					"name": "UnknownCallDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a function call to an unknown class.  In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 1023,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The data that was sent to the contract."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 199,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1022,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 195,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1021,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 190,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "unknown"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1023,
								1022,
								1021
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 186,
							"character": 36
						}
					]
				},
				{
					"id": 1024,
					"name": "UnknownCreationDecoding",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a contract creation for an unknown class. In this case,\nit's simply not possible to return much information."
					},
					"children": [
						{
							"id": 1027,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The bytecode of the contract creation."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 221,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1026,
							"name": "decodingMode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoding mode that was used; [see the README](../#decoding-modes) for\nmore on these."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 217,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "DecodingMode",
								"id": 996
							}
						},
						{
							"id": 1025,
							"name": "kind",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The kind of decoding; indicates that this is an UnknownCreationDecoding."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 212,
									"character": 6
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": "create"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1027,
								1026,
								1025
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 208,
							"character": 40
						}
					]
				},
				{
					"id": 997,
					"name": "CalldataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a transaction (calldata) decoding.  As you can see, these come in five types,\neach of which is documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 13,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "FunctionDecoding",
								"id": 1000
							},
							{
								"type": "reference",
								"name": "ConstructorDecoding",
								"id": 1007
							},
							{
								"type": "reference",
								"name": "MessageDecoding",
								"id": 1014
							},
							{
								"type": "reference",
								"name": "UnknownCallDecoding",
								"id": 1020
							},
							{
								"type": "reference",
								"name": "UnknownCreationDecoding",
								"id": 1024
							}
						]
					}
				},
				{
					"id": 1099,
					"name": "ContractKind",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 16,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "contract"
							},
							{
								"type": "stringLiteral",
								"value": "library"
							},
							{
								"type": "stringLiteral",
								"value": "interface"
							}
						]
					}
				},
				{
					"id": 1084,
					"name": "DecoderRequest",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 539,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "StorageRequest",
								"id": 1085
							},
							{
								"type": "reference",
								"name": "CodeRequest",
								"id": 1088
							}
						]
					}
				},
				{
					"id": 996,
					"name": "DecodingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This is a type for recording what decoding mode a given decoding was produced in.  There are two\ndecoding modes, full mode and ABI mode.  In ABI mode, decoding is done purely based on the ABI JSON.\nFull mode, by contrast, additionally uses AST information to produce a more informative decoding.\nFor more on full mode and ABI mode, see the notes on [Decoding modes](../#decoding-modes)."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 49,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "full"
							},
							{
								"type": "stringLiteral",
								"value": "abi"
							}
						]
					}
				},
				{
					"id": 1095,
					"name": "ExtrasAllowed",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.",
						"text": "* `\"off\"`: Exclude extra decodings (the default).\n* `\"on\"`: Include extra decodings.\n* `\"necessary\"`: Include extra decodings only if there are no others.\n\nExtra decodings will always be returned after other decodings.\n"
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 583,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "off"
							},
							{
								"type": "stringLiteral",
								"value": "on"
							},
							{
								"type": "stringLiteral",
								"value": "necessary"
							}
						]
					}
				},
				{
					"id": 1096,
					"name": "Location",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "storage"
							},
							{
								"type": "stringLiteral",
								"value": "memory"
							},
							{
								"type": "stringLiteral",
								"value": "calldata"
							}
						]
					}
				},
				{
					"id": 998,
					"name": "LogDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a log (event) decoding.  As you can see, these come in two types, each of which\nis documented separately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 25,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "EventDecoding",
								"id": 1028
							},
							{
								"type": "reference",
								"name": "AnonymousDecoding",
								"id": 1036
							}
						]
					}
				},
				{
					"id": 1098,
					"name": "Mutability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 12,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "pure"
							},
							{
								"type": "stringLiteral",
								"value": "view"
							},
							{
								"type": "stringLiteral",
								"value": "nonpayable"
							},
							{
								"type": "stringLiteral",
								"value": "payable"
							}
						]
					}
				},
				{
					"id": 1100,
					"name": "PaddingMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 21,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "default"
							},
							{
								"type": "stringLiteral",
								"value": "permissive"
							},
							{
								"type": "stringLiteral",
								"value": "zero"
							},
							{
								"type": "stringLiteral",
								"value": "right"
							}
						]
					}
				},
				{
					"id": 1101,
					"name": "PaddingType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 30,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "left"
							},
							{
								"type": "stringLiteral",
								"value": "right"
							},
							{
								"type": "stringLiteral",
								"value": "signed"
							}
						]
					}
				},
				{
					"id": 999,
					"name": "ReturndataDecoding",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "A type representing a returndata (return value or revert message) decoding.\nAs you can see, these come in six types, each of which is documented\nseparately."
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 33,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ReturnDecoding",
								"id": 1043
							},
							{
								"type": "reference",
								"name": "RawReturnDecoding"
							},
							{
								"type": "reference",
								"name": "BytecodeDecoding",
								"id": 1048
							},
							{
								"type": "reference",
								"name": "UnknownBytecodeDecoding",
								"id": 1056
							},
							{
								"type": "reference",
								"name": "SelfDestructDecoding",
								"id": 1061
							},
							{
								"type": "reference",
								"name": "RevertMessageDecoding",
								"id": 1065
							},
							{
								"type": "reference",
								"name": "EmptyFailureDecoding",
								"id": 1072
							}
						]
					}
				},
				{
					"id": 1097,
					"name": "Visibility",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {},
					"sources": [
						{
							"fileName": "codec/lib/common/types.ts",
							"line": 8,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "internal"
							},
							{
								"type": "stringLiteral",
								"value": "external"
							}
						]
					}
				},
				{
					"id": 1113,
					"name": "abifyCalldataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1114,
							"name": "abifyCalldataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1115,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 997
									}
								},
								{
									"id": 1116,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 216
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "CalldataDecoding",
								"id": 997
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 303,
							"character": 37
						}
					]
				},
				{
					"id": 1117,
					"name": "abifyLogDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1118,
							"name": "abifyLogDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1119,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 998
									}
								},
								{
									"id": 1120,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 216
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "LogDecoding",
								"id": 998
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 330,
							"character": 32
						}
					]
				},
				{
					"id": 1121,
					"name": "abifyReturndataDecoding",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1122,
							"name": "abifyReturndataDecoding",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 1123,
									"name": "decoding",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ReturndataDecoding",
										"id": 999
									}
								},
								{
									"id": 1124,
									"name": "userDefinedTypes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 216
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ReturndataDecoding",
								"id": 999
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/abify.ts",
							"line": 348,
							"character": 39
						}
					]
				},
				{
					"id": 963,
					"name": "decodeCalldata",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 964,
							"name": "decodeCalldata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 965,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 2451
									}
								},
								{
									"id": 966,
									"name": "isConstructor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 1084
									},
									{
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 997
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 54,
							"character": 31
						}
					]
				},
				{
					"id": 958,
					"name": "decodeEvent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 959,
							"name": "decodeEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 960,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 2451
									}
								},
								{
									"id": 961,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 962,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "LogOptions",
										"id": 1091
									},
									"defaultValue": " {}"
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 1084
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "LogDecoding",
											"id": 998
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 202,
							"character": 28
						}
					]
				},
				{
					"id": 967,
					"name": "decodeReturndata",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 968,
							"name": "decodeReturndata",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "If there are multiple possibilities, they're always returned in\nthe order: return, revert, returnmessage, failure, empty, bytecode, unknownbytecode\nMoreover, within \"revert\", builtin ones are put above custom ones"
							},
							"parameters": [
								{
									"id": 969,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 2451
									}
								},
								{
									"id": 970,
									"name": "successAllocation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "AbiData.Allocate.ReturndataAllocation",
												"id": 1250
											},
											{
												"type": "intrinsic",
												"name": "null"
											}
										]
									}
								},
								{
									"id": 971,
									"name": "status",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 972,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 1084
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "ReturndataDecoding",
											"id": 999
										}
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 592,
							"character": 33
						}
					]
				},
				{
					"id": 973,
					"name": "decodeRevert",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 974,
							"name": "decodeRevert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Decodes the return data from a failed call.",
								"returns": "An array of possible decodings.  At the moment it's\n  impossible for there to be more than one.  (If the call didn't actually\n  fail, or failed in a nonstandard way, you may get no decodings at all, though!)\n\n  Decodings can either be decodings of revert messages, or decodings\n  indicating that there was no revert message.  If somehow both were to be\n  possible, they'd go in that order, although as mentioned, there (at least\n  currently) isn't any way for that to occur."
							},
							"parameters": [
								{
									"id": 975,
									"name": "returndata",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The returned data, as a Uint8Array."
									},
									"type": {
										"type": "reference",
										"name": "Uint8Array"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ReturndataDecoding",
									"id": 999
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 905,
							"character": 28
						}
					]
				},
				{
					"id": 952,
					"name": "decodeVariable",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 953,
							"name": "decodeVariable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 954,
									"name": "definition",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "AstNode",
										"id": 1860
									}
								},
								{
									"id": 955,
									"name": "pointer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Pointer.DataPointer",
										"id": 2383
									}
								},
								{
									"id": 956,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "EvmInfo",
										"id": 2451
									}
								},
								{
									"id": 957,
									"name": "compilationId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Generator",
								"typeArguments": [
									{
										"type": "reference",
										"name": "DecoderRequest",
										"id": 1084
									},
									{
										"type": "reference",
										"name": "Format.Values.Result",
										"id": 359
									},
									{
										"type": "reference",
										"name": "Uint8Array"
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/core.ts",
							"line": 36,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Modules",
					"kind": 2,
					"children": [
						1235,
						1856,
						1843,
						1125,
						1207,
						2135,
						2125,
						2273,
						2346,
						2434,
						2511,
						2,
						1598,
						1607,
						2382,
						1645,
						1672,
						1694,
						1579
					],
					"categories": [
						{
							"title": "Data",
							"children": [
								2
							]
						},
						{
							"title": "ABI data location",
							"children": [
								1235,
								1579
							]
						},
						{
							"title": "Solidity data location",
							"children": [
								1843,
								1598,
								1607,
								1645,
								1672,
								1694
							]
						},
						{
							"title": "Other",
							"children": [
								1856,
								1125,
								1207,
								2135,
								2125,
								2273,
								2346,
								2434,
								2511,
								2382
							]
						}
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1102
					],
					"categories": [
						{
							"title": "Errors",
							"children": [
								1102
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1076,
						1036,
						1048,
						1088,
						1007,
						1072,
						1028,
						1000,
						1091,
						1014,
						1043,
						1065,
						1061,
						1080,
						1085,
						1056,
						1020,
						1024
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								1076,
								1036,
								1048,
								1007,
								1072,
								1028,
								1000,
								1014,
								1043,
								1065,
								1061,
								1080,
								1056,
								1020,
								1024
							]
						},
						{
							"title": "Requests",
							"children": [
								1088,
								1085
							]
						},
						{
							"title": "Inputs",
							"children": [
								1091
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						997,
						1099,
						1084,
						996,
						1095,
						1096,
						998,
						1098,
						1100,
						1101,
						999,
						1097
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								997,
								996,
								998,
								999
							]
						},
						{
							"title": "Enumerations",
							"children": [
								1099,
								1096,
								1098,
								1100,
								1101,
								1097
							]
						},
						{
							"title": "Requests",
							"children": [
								1084
							]
						},
						{
							"title": "Inputs",
							"children": [
								1095
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1113,
						1117,
						1121,
						963,
						958,
						967,
						973,
						952
					],
					"categories": [
						{
							"title": "Decoding",
							"children": [
								963,
								958,
								967,
								952
							]
						},
						{
							"title": "Decoding convenience",
							"children": [
								973
							]
						},
						{
							"title": "ABIfication",
							"children": [
								1113,
								1117,
								1121
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "codec/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 2785,
			"name": "@truffle/decoder",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gnidan/src/work/truffle/packages/decoder/lib/index.ts",
			"comment": {
				"shortText": "# Truffle Decoder",
				"text": "This module provides an interface for decoding contract state, transaction\ncalldata, events, and return values and revert strings.  It's an interface to\nthe same low-level decoding functionality that Truffle Debugger uses.  However,\nit has additional functionality that the debugger does not need, and the\ndebugger has additional functionality that this decoder does not need.\n\nThe interface is split into three classes: The wire decoder, the contract\ndecoder, and the contract instance decoder.  The wire decoder is associated to\nthe project as a whole and decodes transaction calldata and events.  The\ncontract decoder is associated to a specific contract class.  It has all the\ncapabilities of the wire decoder, but in addition it acts as a factory for\ncontract instance decoders.  The contract instance decoder is associated to a\nspecific contract instance; it too has all the capabilities of the wire decoder,\nbut it can also decode the state variables for the specific instance.  (In\naddition, in the case that the contract does not include a `deployedBytecode`\nfield in its artifact, which can hinder decoding certain things, the contract\ninstance decoder can sometimes work around this where the other decoders\ncannot.)\n\nThis documentation describes the current state of the decoder, but you should\nexpect to see improvements soon.\n\n## Usage\n\n### Initialization\n\nCreate a decoder with one of the various constructor functions.\n\nFor a wire decoder, use the [[forProject|`forProject`]] function.\n\nFor a contract decoder, use the [[forArtifact|`forArtifact`]] or\n[[forContract|`forContract`]] function.\n\nFor a contract instance decoder, use one of the following:\n[[forDeployedArtifact|`forDeployedArtifact`]]\n[[forDeployedContract|`forDeployedContract`]]\n[[forArtifactAt|`forArtifactAt`]]\n[[forContractAt|`forContractAt`]]\n[[forContractInstance|`forContractInstance`]]\n[[forAddress|`forAddress`]]\n\nSee the documentation of these functions for details, or below for usage\nexamples.\n\nAll of these functions take a final argument in which information about the\nproject is specified; currently only a few methods for specifying project\ninformation are allowed, but more are planned.\n\nOne can also spawn decoders from other decoders by supplying additional\ninformation.  See the documentation for the individual decoder classes for a\nmethod listing.\n\n### Decoder methods\n\nSee the documentation for the individual decoder classes for a method listing.\n\n### Output format information\n\nThe decoder outputs lossless, machine-readable [[Format.Values.Result]] objects\ncontaining individual decoded values. See the [[Format|format documentation]]\nfor an overview and complete module listing.\n\n### Decoding modes, abification, and caveats\n\nThe decoder runs in either of two modes: full mode or ABI mode. Full mode\nrequires some additional constraints but returns substantially more detailed\ninformation. Please see the notes on [decoding modes](../#decoding-modes) for\nmore about this distinction.\n\nSee also the notes about [decoding state variables](../#additional-notes-on-decoding-state-variables) for additional\ncaveats about what may or may not be fully decodable.\n\n### Basic usage examples\n\n#### Decoding a log with the wire decoder\n\nThis usage example is for a project with two contracts, `Contract1` and\n`Contract2`.\n\n```typescript\nimport { forProject } from \"@truffle/decoder\";\nconst contract1 = artifacts.require(\"Contract1\");\nconst contract2 = artifacts.require(\"Contract2\");\nconst provider = web3.currentProvider;\nconst decoder = await Decoder.forProject(provider, [contract1, contract2]);\nconst decodings = await decoder.decodeLog(log);\n```\n\nThe usage of [[WireDecoder.decodeTransaction|decodeTransaction]] is similar.\n\nFor getting already-decoded logs meeting appropriate conditions, see\n[[WireDecoder.events]].\n\n#### Decoding state variables with the contract instance decoder\n\nThis usage example is for decoding the state variables of a contract `Contract`\nin a project that also contains a contract `OtherContract`.\n\n```typescript\nimport { forContract } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst decoder = await Decoder.forContract(contract, [otherContract]);\nconst instanceDecoder = await decoder.forInstance();\nconst variables = await instanceDecoder.variables();\n```\n\nIn this example, we use the deployed version of `Contract`.  If we wanted an\ninstance at a different address, we could pass the address to `forInstance`.\n\nIn addition, rather than using `forContract` and then `forInstance`, we could\nalso use [[forDeployedContract|`forContractInstance`]] to perform both of these\nin one step.  If we wanted to do this with a specified address, we could use\n[[forContractAt|`forContractAt`]].\n\nYet another way would be:\n```typescript\nimport { forContractInstance } from \"@truffle/decoder\";\nconst contract = artifacts.require(\"Contract\");\nconst otherContract = artifacts.require(\"OtherContract\");\nconst deployedContract = await contract.deployed();\nconst instanceDecoder = await Decoder.forContractInstance(deployedContract, [otherContract]);\nconst variables = await instanceDecoder.variables();\n```\n\nThese examples are not exhaustive.\n\nOne can find more advanced decoding examples with\n[[ContractInstanceDecoder.variable|`variable`]] and\n[[ContractInstanceDecoder.watchMappingKey|`watchMappingKey`]] at the\ndocumentation for these individual functions.\n"
			},
			"children": [
				{
					"id": 3081,
					"name": "ContractAllocationFailedError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that something went wrong while attempting to determine the location\nof this contract's state variables.  This error will be thrown if you attempt to use\ndecoding functions after something went wrong during setup.  Unfortunately, we can't\nalways avoid this at the moment; we're hoping to make this more robust in the future\nwith Truffle DB.  In the meantime, it is at least worth noting that you should not encounter\nthis error if your entire project was written in Solidity and all compiled at once.  Sorry."
					},
					"children": [
						{
							"id": 3085,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3086,
									"name": "new ContractAllocationFailedError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3087,
											"name": "id",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 3088,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3089,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractAllocationFailedError",
										"id": 3081
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 63,
									"character": 31
								}
							]
						},
						{
							"id": 3084,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 63,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3083,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 62,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3082,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 61,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 3091,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 3090,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 3092,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 3093,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3085
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3084,
								3083,
								3082,
								3091,
								3090,
								3092,
								3093
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 60,
							"character": 42
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 3055,
					"name": "ContractBeingDecodedHasNoNodeError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode does not have AST\ninformation associated with it, or that the decoder cannot find it.  This error will\nbe thrown if you attempt to use functions that require AST information with such a contract."
					},
					"children": [
						{
							"id": 3058,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3059,
									"name": "new ContractBeingDecodedHasNoNodeError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3060,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3061,
											"name": "compilationId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractBeingDecodedHasNoNodeError",
										"id": 3055
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 9,
									"character": 31
								}
							]
						},
						{
							"id": 3057,
							"name": "compilationId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 9,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3056,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 8,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3063,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 3062,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 3064,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 3065,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3058
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3057,
								3056,
								3063,
								3062,
								3064,
								3065
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 7,
							"character": 47
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2786,
					"name": "ContractDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The ContractDecoder class.  Spawns the [[ContractInstanceDecoder]] class.\nAlso, decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2803,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2804,
									"name": "new ContractDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2805,
											"name": "contract",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Contract",
												"id": 2149
											}
										},
										{
											"id": 2806,
											"name": "compilation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Compilation",
												"id": 2136
											}
										},
										{
											"id": 2807,
											"name": "wireDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "WireDecoder",
												"id": 2960
											}
										},
										{
											"id": 2808,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2786
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 781,
									"character": 35
								}
							]
						},
						{
							"id": 2795,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 774,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 2459
							}
						},
						{
							"id": 2791,
							"name": "artifact",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 769,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Artifact"
							}
						},
						{
							"id": 2789,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 767,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Compilation",
								"id": 2136
							}
						},
						{
							"id": 2794,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 772,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2788,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 765,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contexts",
								"id": 2274
							}
						},
						{
							"id": 2790,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 768,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contract",
								"id": 2149
							}
						},
						{
							"id": 2793,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 771,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2792,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 770,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AstNode",
								"id": 1860
							}
						},
						{
							"id": 2796,
							"name": "noBytecodeAllocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 775,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2797,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 2798,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2799,
													"name": "selector",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AbiData.Allocate.CalldataAndReturndataAllocation",
												"id": 1279
											}
										}
									],
									"sources": [
										{
											"fileName": "decoder/lib/decoders.ts",
											"line": 775,
											"character": 32
										}
									]
								}
							}
						},
						{
							"id": 2801,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 779,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StateVariableAllocation",
									"id": 1746
								}
							}
						},
						{
							"id": 2800,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 778,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "TypesById",
								"id": 216
							}
						},
						{
							"id": 2787,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 763,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2802,
							"name": "wireDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 781,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WireDecoder",
								"id": 2960
							}
						},
						{
							"id": 2811,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2812,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 2277
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 881,
									"character": 21
								}
							]
						},
						{
							"id": 2844,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2845,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2846,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 997
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 997
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1051,
									"character": 30
								}
							]
						},
						{
							"id": 2847,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2848,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2849,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 998
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 998
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1058,
									"character": 25
								}
							]
						},
						{
							"id": 2850,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2851,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyReturndataDecoding]]."
									},
									"parameters": [
										{
											"id": 2852,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReturndataDecoding",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ReturndataDecoding",
										"id": 999
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1065,
									"character": 32
								}
							]
						},
						{
							"id": 2837,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2838,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeLog]]."
									},
									"parameters": [
										{
											"id": 2839,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 3163
											}
										},
										{
											"id": 2840,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecodeLogOptions",
												"id": 3148
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 998
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1028,
									"character": 24
								}
							]
						},
						{
							"id": 2813,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2814,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the return value of a call.  Return values can be ambiguous, so this so\nthis function returns an array of [[ReturndataDecoding|ReturndataDecodings]].\n\nNote that return values are decoded in strict mode, so none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n1. The decoded return value from a successful call.\n2. The decoded revert message from a call that reverted with a message.\n3. A decoding indicating that the call reverted with no message.\n4. A decoding indicating that the call self-destructed.\n\nYou can check the kind and field to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nDecoding creation calls with this method is not supported.  If you simply\nwant to decode a revert message from an arbitrary call that you know\nfailed, you may also want to see the [[decodeRevert]] function in\n`@truffle/codec`.\n"
									},
									"parameters": [
										{
											"id": 2815,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The abi entry for the function call whose return value is being decoded."
											},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2816,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The data to be decoded, as a hex string (beginning with \"0x\")."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2817,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Additional options, such as the block the call occurred in.\n  See [[ReturnOptions]] for more information.\n"
											},
											"type": {
												"type": "reference",
												"name": "ReturnOptions",
												"id": 3145
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataDecoding",
													"id": 999
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 917,
									"character": 32
								}
							]
						},
						{
							"id": 2818,
							"name": "decodeReturnValueWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2819,
									"name": "decodeReturnValueWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2820,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2821,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2822,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReturnOptions",
												"id": 3145
											},
											"defaultValue": " {}"
										},
										{
											"id": 2823,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Contexts",
												"id": 2274
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataDecoding",
													"id": 999
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 932,
									"character": 54
								}
							]
						},
						{
							"id": 2834,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2835,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeTransaction]]."
									},
									"parameters": [
										{
											"id": 2836,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 3151
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 997
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1016,
									"character": 32
								}
							]
						},
						{
							"id": 2841,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2842,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.events]]."
									},
									"parameters": [
										{
											"id": 2843,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch and how to decode them;\n  see the documentation on the EventOptions type for more.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 3139
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 3129
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1042,
									"character": 21
								}
							]
						},
						{
							"id": 2824,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2825,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of this contract."
									},
									"parameters": [
										{
											"id": 2826,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 2861
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 991,
									"character": 26
								}
							]
						},
						{
							"id": 2853,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2854,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 2459
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1074,
									"character": 23
								}
							]
						},
						{
							"id": 2827,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2828,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2829,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2830,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 997,
									"character": 23
								}
							]
						},
						{
							"id": 2859,
							"name": "getContractInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2860,
									"name": "getContractInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ContractInfo"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1095,
									"character": 24
								}
							]
						},
						{
							"id": 2855,
							"name": "getStateVariableReferences",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2856,
									"name": "getStateVariableReferences",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "StateVariableAllocation",
											"id": 1746
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1081,
									"character": 35
								}
							]
						},
						{
							"id": 2857,
							"name": "getWireDecoder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2858,
									"name": "getWireDecoder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 2960
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1088,
									"character": 23
								}
							]
						},
						{
							"id": 2809,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2810,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 877,
									"character": 19
								}
							]
						},
						{
							"id": 2831,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2832,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2833,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1004,
									"character": 31
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2803
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2795,
								2791,
								2789,
								2794,
								2788,
								2790,
								2793,
								2792,
								2796,
								2801,
								2800,
								2787,
								2802
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2811
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2844,
								2847,
								2850,
								2837,
								2813,
								2818,
								2834,
								2841,
								2824,
								2853,
								2827,
								2859,
								2855,
								2857,
								2809,
								2831
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 762,
							"character": 28
						}
					]
				},
				{
					"id": 2861,
					"name": "ContractInstanceDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The ContractInstanceDecoder class.  Decodes storage for a specified\ninstance.  Also, decodes transactions and logs.  See below for a method\nlisting.",
						"text": "Note that when using this class to decode transactions, logs, and return\nvalues, it does have one advantage over using the WireDecoder or\nContractDecoder.  If the artifact for the class does not have a\ndeployedBytecode field, the WireDecoder (and therefore also the\nContractDecoder) will not be able to tell that this instance is of that\nclass, and so will fail to decode transactions sent to it or logs\noriginating from it, and will fall back to ABI mode when decoding return\nvalues received from it.  However, the ContractInstanceDecoder has that\ninformation and will make use of it, making it possible for it to decode\ntransactions sent to this instance, or logs originating from it, or decode\nreturn values received from it in full mode, even if the deployedBytecode\nfield is misssing."
					},
					"children": [
						{
							"id": 2885,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2886,
									"name": "new ContractInstanceDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2887,
											"name": "contractDecoder",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ContractDecoder",
												"id": 2786
											}
										},
										{
											"id": 2888,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2861
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1153,
									"character": 35
								}
							]
						},
						{
							"id": 2872,
							"name": "additionalContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1139,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "Contexts",
								"id": 2274
							}
						},
						{
							"id": 2878,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1143,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 2459
							}
						},
						{
							"id": 2863,
							"name": "compilation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1129,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Compilation",
								"id": 2136
							}
						},
						{
							"id": 2870,
							"name": "compiler",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1136,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "CompilerVersion",
								"id": 2126
							}
						},
						{
							"id": 2869,
							"name": "contextHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1135,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2871,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1138,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contexts",
								"id": 2274
							}
						},
						{
							"id": 2864,
							"name": "contract",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1130,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contract",
								"id": 2149
							}
						},
						{
							"id": 2867,
							"name": "contractAddress",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1133,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2868,
							"name": "contractCode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1134,
									"character": 22
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2883,
							"name": "contractDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1152,
									"character": 25
								}
							],
							"type": {
								"type": "reference",
								"name": "ContractDecoder",
								"id": 2786
							}
						},
						{
							"id": 2866,
							"name": "contractNetwork",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1132,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2865,
							"name": "contractNode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1131,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "AstNode",
								"id": 1860
							}
						},
						{
							"id": 2880,
							"name": "internalFunctionsTable",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1146,
									"character": 32
								}
							],
							"type": {
								"type": "reference",
								"name": "InternalFunctions",
								"id": 2467
							}
						},
						{
							"id": 2881,
							"name": "mappingKeys",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1148,
									"character": 21
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Storage.Slot",
									"id": 1704
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 2873,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1141,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2874,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 2875,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2876,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNodes",
												"id": 1907
											}
										}
									],
									"sources": [
										{
											"fileName": "decoder/lib/decoders.ts",
											"line": 1141,
											"character": 32
										}
									]
								}
							}
						},
						{
							"id": 2879,
							"name": "stateVariableReferences",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1145,
									"character": 33
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StateVariableAllocation",
									"id": 1746
								}
							}
						},
						{
							"id": 2882,
							"name": "storageCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1150,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "StorageCache"
							}
						},
						{
							"id": 2877,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1142,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "TypesById",
								"id": 216
							}
						},
						{
							"id": 2862,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1127,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 2884,
							"name": "wireDecoder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1153,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "WireDecoder",
								"id": 2960
							}
						},
						{
							"id": 2891,
							"name": "context",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"getSignature": [
								{
									"id": 2892,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Context",
										"id": 2277
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1281,
									"character": 21
								}
							]
						},
						{
							"id": 2944,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2945,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyCalldataDecoding]]."
									},
									"parameters": [
										{
											"id": 2946,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 997
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 997
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1729,
									"character": 30
								}
							]
						},
						{
							"id": 2947,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2948,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyLogDecoding]]."
									},
									"parameters": [
										{
											"id": 2949,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 998
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 998
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1736,
									"character": 25
								}
							]
						},
						{
							"id": 2950,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2951,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "See [[WireDecoder.abifyReturndataDecoding]]."
									},
									"parameters": [
										{
											"id": 2952,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReturndataDecoding",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ReturndataDecoding",
										"id": 999
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1743,
									"character": 32
								}
							]
						},
						{
							"id": 2893,
							"name": "checkAllocationSuccess",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2894,
									"name": "checkAllocationSuccess",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1285,
									"character": 32
								}
							]
						},
						{
							"id": 2956,
							"name": "constructSlot",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2957,
									"name": "constructSlot",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2958,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2959,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "tuple",
										"elements": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Storage.Slot",
														"id": 1704
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											},
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Format.Types.Type",
														"id": 5
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1775,
									"character": 23
								}
							]
						},
						{
							"id": 2935,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2936,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeLog]].\n"
									},
									"parameters": [
										{
											"id": 2937,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 3163
											}
										},
										{
											"id": 2938,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecodeLogOptions",
												"id": 3148
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 998
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1693,
									"character": 24
								}
							]
						},
						{
							"id": 2939,
							"name": "decodeReturnValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2940,
									"name": "decodeReturnValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[ContractDecoder.decodeReturnValue]].\n\nIf the contract artifact is missing its bytecode, using this method,\nrather than the one in [[ContractDecoder]], can sometimes provide\nadditional decoding information.\n"
									},
									"parameters": [
										{
											"id": 2941,
											"name": "abi",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "FunctionEntry"
											}
										},
										{
											"id": 2942,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2943,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "ReturnOptions",
												"id": 3145
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "ReturndataDecoding",
													"id": 999
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1713,
									"character": 32
								}
							]
						},
						{
							"id": 2932,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2933,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "See [[WireDecoder.decodeTransaction]].\n"
									},
									"parameters": [
										{
											"id": 2934,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 3151
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 997
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1679,
									"character": 32
								}
							]
						},
						{
							"id": 2895,
							"name": "decodeVariable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2896,
									"name": "decodeVariable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2897,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "StateVariableAllocation",
												"id": 1746
											}
										},
										{
											"id": 2898,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "StateVariable",
												"id": 1080
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1301,
									"character": 30
								}
							]
						},
						{
							"id": 2953,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2954,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "This mostly behaves as [[WireDecoder.events]].\nHowever, unlike other variants of this function, this one, by default, restricts to events originating from this instance's address.\nIf you don't want to restrict like that, you can explicitly use `address: undefined` in the options to disable this.\n(You can also of course set a different address to restrict to that.)"
									},
									"parameters": [
										{
											"id": 2955,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch; see the documentation on the [[EventOptions]] type for more.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 3139
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 3129
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1756,
									"character": 21
								}
							]
						},
						{
							"id": 2909,
							"name": "findVariableByNameOrId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2910,
									"name": "findVariableByNameOrId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2911,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "StateVariableAllocation",
												"id": 1746
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1467,
									"character": 32
								}
							]
						},
						{
							"id": 2917,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2918,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2919,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2920,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1533,
									"character": 23
								}
							]
						},
						{
							"id": 2912,
							"name": "getStorage",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2913,
									"name": "getStorage",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2914,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2915,
											"name": "slot",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BN"
											}
										},
										{
											"id": 2916,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1500,
									"character": 26
								}
							]
						},
						{
							"id": 2889,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2890,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1197,
									"character": 19
								}
							]
						},
						{
							"id": 2921,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2922,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 2923,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1540,
									"character": 31
								}
							]
						},
						{
							"id": 2899,
							"name": "state",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2900,
									"name": "state",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Returns information about the state of the contract, but does not include\ninformation about the storage or decoded variables.  See the documentation\nfor the [[ContractState]] type for more."
									},
									"parameters": [
										{
											"id": 2901,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractState",
												"id": 3119
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1369,
									"character": 20
								}
							]
						},
						{
							"id": 2928,
							"name": "unwatchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2929,
									"name": "unwatchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Opposite of [[watchMappingKey]]; unwatches the specified mapping key.  See\nwatchMappingKey for more on how watching mapping keys works, and on how\nthe parameters work.\n\nNote that unwatching a mapping key will also unwatch all its descendants.\nE.g., if `m` is of type `mapping(uint => mapping(uint => uint))`, then\nunwatching `m[0]` will also unwatch `m[0][0]`, `m[0][1]`, etc, if these\nare currently watched.\n\nThis function has the same caveats as watchMappingKey.\n"
									},
									"parameters": [
										{
											"id": 2930,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2931,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1647,
									"character": 32
								}
							]
						},
						{
							"id": 2905,
							"name": "variable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2906,
									"name": "variable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes an individual contract variable; returns its value as a\n[[Format.Values.Result|Result]].  See the documentation for\n[[variables|variables()]] for various caveats that also apply here.\n\nIf the variable can't be located, throws an exception.",
										"tags": [
											{
												"tag": "example",
												"text": "Consider a contract `Derived` inheriting from a contract `Base`.\n  Suppose `Derived` has a variable `x` and `Base` has variables `x` and\n  `y`.  One can access `Derived.x` as `variable(\"x\")` or\n  `variable(\"Derived.x\")`, can access `Base.x` as `variable(\"Base.x\")`,\n  and can access `Base.y` as `variable(\"y\")` or `variable(\"Base.y\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2907,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The name (or numeric ID, if you know that) of the\n  variable.  Can be given as a qualified name, allowing one to get at\n  shadowed variables from base contracts.  If given by ID, can be given as a\n  number or numeric string."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 2908,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values."
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Format.Values.Result",
														"id": 359
													},
													{
														"type": "intrinsic",
														"name": "undefined"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1449,
									"character": 23
								}
							]
						},
						{
							"id": 2902,
							"name": "variables",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2903,
									"name": "variables",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Decodes the contract's variables; returns an array of these decoded variables.\nSee the documentation of the [[DecodedVariable]] type for more.\n\nNote that variable decoding can only operate in full mode; if the decoder wasn't able to\nstart up in full mode, this method will throw a [[ContractAllocationFailedError]].\n\nNote that decoding mappings requires first watching mapping keys in order to get any results;\nsee the documentation for [[watchMappingKey]].\nAdditional methods to make mapping decoding a less manual affair are planned for the future.\n\nAlso, due to a technical limitation, it is not currently possible to\nusefully decode internal function pointers.  See the\n[[Format.Values.FunctionInternalValue|FunctionInternalValue]]\ndocumentation and the README for more on how these are handled."
									},
									"parameters": [
										{
											"id": 2904,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The block to inspect the contract's state at.  Defaults to latest.\n  See [[BlockSpecifier]] for legal values.\n"
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "StateVariable",
													"id": 1080
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1409,
									"character": 24
								}
							]
						},
						{
							"id": 2924,
							"name": "watchMappingKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2925,
									"name": "watchMappingKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Watches a mapping key; adds it to the decoder's list of watched mapping\nkeys.  This affects the results of both [[variables|variables()]] and\n[[variable|variable()]].  When a mapping is decoded, only the values at\nits watched keys will be included in its value.\n\nNote that it is possible\nto watch mappings that are inside structs, arrays, other mappings, etc;\nsee below for more on how to do this.\n\nNote that watching mapping keys is\nonly possible in full mode; if the decoder wasn't able to start up in full\nmode, this method will throw an exception.\n\n**Warning**: At the moment, this function does very little to check its\ninput.  Bad input may have unpredictable results.  This will be remedied\nin the future (by having it throw exceptions on bad input), but right now\nessentially no checking is implemented.  Also, there may be slight changes\nto the format of indices in the future.\n\n(A bad variable name will cause an exception though; that input is checked.)",
										"tags": [
											{
												"tag": "example",
												"text": "First, a simple example.  Say we have a mapping `m` of type\n  `mapping(uint => uint)`.  You could call `watchMappingKey(\"m\", 0)` to\n  watch `m[0]`."
											},
											{
												"tag": "example",
												"text": "Now for a slightly more complicated example.  Say `m` is of type\n  `mapping(uint => mapping(uint => uint))`, then to watch `m[3][5]`, you\n  can call `watchMappingKey(\"m\", 3, 5)`.  This will also automatically\n  watch `m[3]`; otherwise, watching `m[3][5]` wouldn't do much of\n  anything."
											},
											{
												"tag": "example",
												"text": "Now for a well more complicated example.  Say we have a struct\n  type `MapStruct` with a member called `map` which is a `mapping(string => string)`,\n  and say we have a variable `arr` of type `MapStruct[]`, then one could\n  watch `arr[3].map[\"hello\"]` by calling `watchMappingKey(\"arr\", 3, \"map\", \"hello\")`.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 2926,
											"name": "variable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The variable that the mapping lives under; this works like\n  the nameOrId argument to [[variable|variable()]].  If the mapping is a\n  top-level state variable, put the mapping itself here.  Otherwise, put the\n  top-level state variable it lives under."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 2927,
											"name": "indices",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Further arguments to watchMappingKey, if given, will be\n  interpreted as indices into or members of the variable identified by the\n  variable argument; see the example.  Array indices and mapping\n  keys are specified by value; struct members are specified by name.\n\n  Numeric values can be given as number, BN, or\n  numeric string.  Bytestring values are given as hex strings.  Boolean\n  values are given as booleans, or as the strings \"true\" or \"false\".\n  Address values are given as hex strings; they are currently not required\n  to be in checksum case, but this will likely change in the future, so\n  don't rely on that.  Contract values work like address values.\n  Enum values can be given either as a numeric value or by name;\n  in the latter case you can use either a qualified name or just the\n  name of the option (i.e., you can just write `\"Option\"` rather than\n  `\"Enum.Option\"` or `\"Contract.Enum.Option\"`, but those will work too).\n\n  Note that if the path to a given mapping key\n  includes mapping keys above it, any ancestors will also be watched\n  automatically."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 1605,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2885
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2872,
								2878,
								2863,
								2870,
								2869,
								2871,
								2864,
								2867,
								2868,
								2883,
								2866,
								2865,
								2880,
								2881,
								2873,
								2879,
								2882,
								2877,
								2862,
								2884
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								2891
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								2944,
								2947,
								2950,
								2893,
								2956,
								2935,
								2939,
								2932,
								2895,
								2953,
								2909,
								2917,
								2912,
								2889,
								2921,
								2899,
								2928,
								2905,
								2902,
								2924
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 1126,
							"character": 36
						}
					]
				},
				{
					"id": 3066,
					"name": "ContractNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the contract you are attempting to decode could not be found in\nthe project info.  This error will be thrown if you attempt to spawn a contract decoder or\ncontract instance decoder for a contract not appearing in the project info."
					},
					"children": [
						{
							"id": 3071,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3072,
									"name": "new ContractNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3073,
											"name": "contractName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3074,
											"name": "bytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3075,
											"name": "deployedBytecode",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3076,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ContractNotFoundError",
										"id": 3066
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 29,
									"character": 25
								}
							]
						},
						{
							"id": 3070,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 29,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3068,
							"name": "bytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 27,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3067,
							"name": "contractName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 26,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3069,
							"name": "deployedBytecode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 28,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3078,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 3077,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 3079,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 3080,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3071
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3070,
								3068,
								3067,
								3069,
								3078,
								3077,
								3079,
								3080
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 25,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 3094,
					"name": "InvalidAddressError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that an invalid address was passed to one of the\ncontract instance decoder spawners ([[forContractInstance]], etc).  Valid\naddresses are those that Web3 accepts; i.e., either those with correct\nchecksums, or those that are all-lowercase or all-uppercase to deliberately\ncircumvent the checksum."
					},
					"children": [
						{
							"id": 3096,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3097,
									"name": "new InvalidAddressError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3098,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "InvalidAddressError",
										"id": 3094
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 84,
									"character": 25
								}
							]
						},
						{
							"id": 3095,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 84,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3100,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 3099,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 3101,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 3102,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3096
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3095,
								3100,
								3099,
								3101,
								3102
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 83,
							"character": 32
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 3112,
					"name": "NoProjectInfoError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the user attempted to instantiate a decoder\nwith no project information (by explicitly overriding the default)."
					},
					"children": [
						{
							"id": 3113,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3114,
									"name": "new NoProjectInfoError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NoProjectInfoError",
										"id": 3112
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 110,
									"character": 47
								}
							]
						},
						{
							"id": 3116,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 3115,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 3117,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 3118,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3113
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3116,
								3115,
								3117,
								3118
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 110,
							"character": 31
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 3103,
					"name": "VariableNotFoundError",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This error indicates that the user requested a variable that does not exist."
					},
					"children": [
						{
							"id": 3105,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 3106,
									"name": "new VariableNotFoundError",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 3107,
											"name": "nameOrId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "VariableNotFoundError",
										"id": 3103
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 97,
									"character": 35
								}
							]
						},
						{
							"id": 3109,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 974,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.message"
							}
						},
						{
							"id": 3108,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 973,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.name"
							}
						},
						{
							"id": 3104,
							"name": "nameOrId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/errors.ts",
									"line": 97,
									"character": 17
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 3110,
							"name": "stack",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 975,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"overwrites": {
								"type": "reference",
								"name": "Error.stack"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Error.stack"
							}
						},
						{
							"id": 3111,
							"name": "Error",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isStatic": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "/Users/gnidan/src/work/truffle/node_modules/@gnd/typedoc/node_modules/typescript/lib/lib.es5.d.ts",
									"line": 984,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"name": "ErrorConstructor"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								3105
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3109,
								3108,
								3104,
								3110,
								3111
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/errors.ts",
							"line": 96,
							"character": 34
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Error"
						}
					]
				},
				{
					"id": 2960,
					"name": "WireDecoder",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The WireDecoder class.  Decodes transactions and logs.  See below for a method listing."
					},
					"children": [
						{
							"id": 2974,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 2975,
									"name": "new WireDecoder",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2976,
											"name": "compilations",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Compilation",
													"id": 2136
												}
											}
										},
										{
											"id": 2977,
											"name": "provider",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Provider"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "WireDecoder",
										"id": 2960
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 58,
									"character": 49
								}
							]
						},
						{
							"id": 2972,
							"name": "allocations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 56,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "AllocationInfo",
								"id": 2459
							}
						},
						{
							"id": 2973,
							"name": "codeCache",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 58,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "CodeCache"
							}
						},
						{
							"id": 2963,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 49,
									"character": 22
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 2136
								}
							}
						},
						{
							"id": 2964,
							"name": "contexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 50,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "Contexts",
								"id": 2274
							}
						},
						{
							"id": 2966,
							"name": "contractsAndContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 52,
									"character": 30
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "ContractAndContexts"
								}
							},
							"defaultValue": " []"
						},
						{
							"id": 2965,
							"name": "deployedContexts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 51,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "Contexts",
								"id": 2274
							}
						},
						{
							"id": 2962,
							"name": "network",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 47,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 2967,
							"name": "referenceDeclarations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 54,
									"character": 31
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 2968,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 2969,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 2970,
													"name": "compilationId",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "reference",
												"name": "AstNodes",
												"id": 1907
											}
										}
									],
									"sources": [
										{
											"fileName": "decoder/lib/decoders.ts",
											"line": 54,
											"character": 32
										}
									]
								}
							}
						},
						{
							"id": 2971,
							"name": "userDefinedTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 55,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "TypesById",
								"id": 216
							}
						},
						{
							"id": 2961,
							"name": "web3",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 45,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"name": "Web3"
							}
						},
						{
							"id": 3016,
							"name": "abifyCalldataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3017,
									"name": "abifyCalldataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[CalldataDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 3018,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 997
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "CalldataDecoding",
										"id": 997
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 519,
									"character": 30
								}
							]
						},
						{
							"id": 3019,
							"name": "abifyLogDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3020,
									"name": "abifyLogDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[LogDecoding]], which may have been produced in full mode or ABI mode,\nand converts it to its ABI mode equivalent.  See the README for more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 3021,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"name": "LogDecoding",
												"id": 998
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "LogDecoding",
										"id": 998
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 531,
									"character": 25
								}
							]
						},
						{
							"id": 3022,
							"name": "abifyReturndataDecoding",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3023,
									"name": "abifyReturndataDecoding",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Takes a [[ReturndataDecoding]], which may have been produced in full mode\nor ABI mode, and converts it to its ABI mode equivalent.  See the README\nfor more information.",
										"text": "Please only use on decodings produced by this same decoder instance; use\non decodings produced by other instances may not work consistently."
									},
									"parameters": [
										{
											"id": 3024,
											"name": "decoding",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The decoding to abify\n"
											},
											"type": {
												"type": "reference",
												"name": "ReturndataDecoding",
												"id": 999
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ReturndataDecoding",
										"id": 999
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 544,
									"character": 32
								}
							]
						},
						{
							"id": 2978,
							"name": "collectUserDefinedTypesAndTaggedOutputs",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2979,
									"name": "collectUserDefinedTypesAndTaggedOutputs",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 2980,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 2981,
													"name": "definitions",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "decoder/lib/decoders.ts",
															"line": 195,
															"character": 15
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 2982,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 2983,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 2984,
																			"name": "compilationId",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "AstNodes",
																		"id": 1907
																	}
																}
															],
															"sources": [
																{
																	"fileName": "decoder/lib/decoders.ts",
																	"line": 195,
																	"character": 16
																}
															]
														}
													}
												},
												{
													"id": 2985,
													"name": "types",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "decoder/lib/decoders.ts",
															"line": 196,
															"character": 9
														}
													],
													"type": {
														"type": "reference",
														"name": "TypesById",
														"id": 216
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														2981,
														2985
													]
												}
											],
											"sources": [
												{
													"fileName": "decoder/lib/decoders.ts",
													"line": 194,
													"character": 52
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 194,
									"character": 49
								}
							]
						},
						{
							"id": 3000,
							"name": "decodeLog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3001,
									"name": "decodeLog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Log]] object and decodes it.  Logs can be ambiguous, so this so\nthis function returns an array of [[LogDecoding|LogDecodings]].\n\nNote that logs are decoded in strict mode, so (with one exception) none of the decodings should\ncontain errors; if a decoding would contain an error, instead it is simply excluded from the\nlist of possible decodings.  The one exception to this is that indexed parameters of reference\ntype cannot meaningfully be decoded, so those will decode to an error.\n\nIf there are multiple possible decodings, they will always be listed in the following order:\n\n1. Non-anonymous events coming from the contract itself (these will moreover be ordered\n  from most derived to most base)\n2. Non-anonymous events coming from libraries\n3. Anonymous events coming from the contract itself (again, ordered from most derived\n  to most base)\n4. Anonymous events coming from libraries\n\nYou can check the kind and class.contractKind fields to distinguish between these.\n\nIf no possible decodings are found, the returned array of decodings will be empty.\n\nNote that different decodings may use different decoding modes.\n\nChanging `options.extras = \"on\"` or `options.extras = \"necessary\"` will change the\nabove behavior; see the documentation on [[ExtrasAllowed]] for more.\n"
									},
									"parameters": [
										{
											"id": 3002,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The log to be decoded."
											},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 3163
											}
										},
										{
											"id": 3003,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Options for controlling decoding.\n"
											},
											"type": {
												"type": "reference",
												"name": "DecodeLogOptions",
												"id": 3148
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 998
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 398,
									"character": 24
								}
							]
						},
						{
							"id": 3004,
							"name": "decodeLogWithAdditionalOptions",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3005,
									"name": "decodeLogWithAdditionalOptions",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 3006,
											"name": "log",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Log",
												"id": 3163
											}
										},
										{
											"id": 3007,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 3139
											},
											"defaultValue": " {}"
										},
										{
											"id": 3008,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Contexts",
												"id": 2274
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "LogDecoding",
													"id": 998
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 408,
									"character": 45
								}
							]
						},
						{
							"id": 2993,
							"name": "decodeTransaction",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2994,
									"name": "decodeTransaction",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Takes a [[Transaction]] object and decodes it.  The result is a\n[[CalldataDecoding]]; see the documentation on that interface for more.\n\nNote that decoding of transactions sent to libraries is presently not\nsupported and may have unreliable results.  Limited support for this is\nplanned for future versions."
									},
									"parameters": [
										{
											"id": 2995,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The transaction to be decoded.\n"
											},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 3151
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 997
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 314,
									"character": 32
								}
							]
						},
						{
							"id": 2996,
							"name": "decodeTransactionWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2997,
									"name": "decodeTransactionWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2998,
											"name": "transaction",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Transaction",
												"id": 3151
											}
										},
										{
											"id": 2999,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Contexts",
												"id": 2274
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "CalldataDecoding",
												"id": 997
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 323,
									"character": 54
								}
							]
						},
						{
							"id": 3009,
							"name": "events",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3010,
									"name": "events",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Gets all events meeting certain conditions and decodes them.\nThis function is fairly rudimentary at the moment but more functionality\nwill be added in the future.",
										"returns": "An array of [[DecodedLog|DecodedLogs]].\n  These consist of a log together with its possible decodings; see that\n  type for more info.  And see [[decodeLog]] for more info on how log\n  decoding works in general.",
										"tags": [
											{
												"tag": "example",
												"text": "`events({name: \"TestEvent\"})` -- get events named \"TestEvent\"\n  from the most recent block\n"
											}
										]
									},
									"parameters": [
										{
											"id": 3011,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to determine what events to fetch and how to decode\n  them; see the documentation on the [[EventOptions]] type for more."
											},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 3139
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 3129
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 460,
									"character": 21
								}
							]
						},
						{
							"id": 3012,
							"name": "eventsWithAdditionalContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3013,
									"name": "eventsWithAdditionalContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 3014,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventOptions",
												"id": 3139
											},
											"defaultValue": " {}"
										},
										{
											"id": 3015,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Contexts",
												"id": 2274
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "DecodedLog",
													"id": 3129
												}
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 469,
									"character": 43
								}
							]
						},
						{
							"id": 3038,
							"name": "forAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3039,
									"name": "forAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike [[forInstance]], this method doesn't require an artifact; it\nwill automatically detect the class of the given contract.  If it's not in\nthe project, or the decoder can't identify it, you'll get an exception."
									},
									"parameters": [
										{
											"id": 3040,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3041,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "You can include this argument to specify that this should be\n  based on the addresses content's at a specific block (if say the contract\n  has since self-destructed).\n"
											},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.BlockSpecifier"
											},
											"defaultValue": "\"latest\""
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 2861
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 683,
									"character": 25
								}
							]
						},
						{
							"id": 3031,
							"name": "forArtifact",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3032,
									"name": "forArtifact",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract decoder for a given contract artifact."
									},
									"parameters": [
										{
											"id": 3033,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems.\n"
											},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractDecoder",
												"id": 2786
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 584,
									"character": 26
								}
							]
						},
						{
							"id": 3034,
							"name": "forInstance",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3035,
									"name": "forInstance",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "**This method is asynchronous.**",
										"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject."
									},
									"parameters": [
										{
											"id": 3036,
											"name": "artifact",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK.\n\n  Note: The artifact must be for a contract that the decoder knows about;\n  otherwise you will have problems."
											},
											"type": {
												"type": "reference",
												"name": "Artifact"
											}
										},
										{
											"id": 3037,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The address of the contract instance to decode.  If left out, it will be autodetected.\n  If an invalid address is provided, this method will throw an exception.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ContractInstanceDecoder",
												"id": 2861
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 662,
									"character": 26
								}
							]
						},
						{
							"id": 3049,
							"name": "getAllocations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3050,
									"name": "getAllocations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "AllocationInfo",
										"id": 2459
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 738,
									"character": 23
								}
							]
						},
						{
							"id": 2986,
							"name": "getCode",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2987,
									"name": "getCode",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2988,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 2989,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "Uint8Array"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 264,
									"character": 22
								}
							]
						},
						{
							"id": 3025,
							"name": "getContextByAddress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3026,
									"name": "getContextByAddress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 3027,
											"name": "address",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3028,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										},
										{
											"id": 3029,
											"name": "constructorBinary",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 3030,
											"name": "additionalContexts",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Contexts",
												"id": 2274
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "Context",
														"id": 2277
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 552,
									"character": 35
								}
							]
						},
						{
							"id": 3053,
							"name": "getDeployedContexts",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3054,
									"name": "getDeployedContexts",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Contexts",
										"id": 2274
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 752,
									"character": 28
								}
							]
						},
						{
							"id": 3042,
							"name": "getReferenceDeclarations",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3043,
									"name": "getReferenceDeclarations",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 3044,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": [
												{
													"id": 3045,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {},
													"parameters": [
														{
															"id": 3046,
															"name": "compilationId",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "AstNodes",
														"id": 1907
													}
												}
											],
											"sources": [
												{
													"fileName": "decoder/lib/decoders.ts",
													"line": 724,
													"character": 36
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 724,
									"character": 33
								}
							]
						},
						{
							"id": 3047,
							"name": "getUserDefinedTypes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3048,
									"name": "getUserDefinedTypes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "TypesById",
										"id": 216
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 731,
									"character": 28
								}
							]
						},
						{
							"id": 3051,
							"name": "getWeb3",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 3052,
									"name": "getWeb3",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "Web3"
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 745,
									"character": 16
								}
							]
						},
						{
							"id": 2990,
							"name": "regularizeBlock",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isProtected": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 2991,
									"name": "regularizeBlock",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isProtected": true
									},
									"comment": {},
									"parameters": [
										{
											"id": 2992,
											"name": "block",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "DecoderTypes.BlockSpecifier"
													},
													{
														"type": "intrinsic",
														"name": "null"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "reference",
												"name": "DecoderTypes.RegularizedBlockSpecifier"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "decoder/lib/decoders.ts",
									"line": 290,
									"character": 30
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								2974
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								2972,
								2973,
								2963,
								2964,
								2966,
								2965,
								2962,
								2967,
								2971,
								2961
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								3016,
								3019,
								3022,
								2978,
								3000,
								3004,
								2993,
								2996,
								3009,
								3012,
								3038,
								3031,
								3034,
								3049,
								2986,
								3025,
								3053,
								3042,
								3047,
								3051,
								2990
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/decoders.ts",
							"line": 44,
							"character": 24
						}
					]
				},
				{
					"id": 3119,
					"name": "ContractState",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents the state of a contract aside from its storage."
					},
					"children": [
						{
							"id": 3121,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's address, as a checksummed hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 64,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3122,
							"name": "balanceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's balance, in Wei, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 68,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						},
						{
							"id": 3120,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's class, as a Format.Types.ContractType."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 60,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Format.Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 3124,
							"name": "code",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's code, as a hexidecimal string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 76,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3123,
							"name": "nonceAsBN",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The contract's nonce, as a BN."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 72,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BN"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3121,
								3122,
								3120,
								3124,
								3123
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 56,
							"character": 30
						}
					]
				},
				{
					"id": 3148,
					"name": "DecodeLogOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.decodeLog|decodeLog()]].\nThis type may be expanded in the future."
					},
					"children": [
						{
							"id": 3149,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 177,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ExtrasAllowed",
								"id": 3150
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3149
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 171,
							"character": 33
						}
					]
				},
				{
					"id": 3129,
					"name": "DecodedLog",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents a web3 Log object that has been decoded.\nNote that it extends the Log type and just adds an additional field\nwith the decoding."
					},
					"children": [
						{
							"id": 3131,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 271,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.address",
								"id": 3164
							}
						},
						{
							"id": 3137,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 296,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.blockHash",
								"id": 3170
							}
						},
						{
							"id": 3138,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 300,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.blockNumber",
								"id": 3171
							}
						},
						{
							"id": 3132,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 275,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.data",
								"id": 3165
							}
						},
						{
							"id": 3130,
							"name": "decodings",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "An array of possible decodings of the given log -- it's an array because logs can be ambiguous.",
								"text": "This field works just like the output of [[WireDecoder.decodeLog]], so see that for more\ninformation.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 92,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "LogDecoding",
									"id": 998
								}
							}
						},
						{
							"id": 3134,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 283,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.logIndex",
								"id": 3167
							}
						},
						{
							"id": 3133,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 279,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.topics",
								"id": 3166
							}
						},
						{
							"id": 3136,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 292,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.transactionHash",
								"id": 3169
							}
						},
						{
							"id": 3135,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 288,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "Log.transactionIndex",
								"id": 3168
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3131,
								3137,
								3138,
								3132,
								3130,
								3134,
								3133,
								3136,
								3135
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 85,
							"character": 27
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "Log",
							"id": 3163
						}
					]
				},
				{
					"id": 3139,
					"name": "EventOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of the options parameter to [[WireDecoder.events|events()]].  This type will be expanded in the future\nas more filtering options are added."
					},
					"children": [
						{
							"id": 3143,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, will restrict to events emitted by the given address.",
								"text": "NOTE: In the contract instance decoder, if omitted, defaults to the\naddress of the contract instance being decoded, rather than not filtering\nby address.  However, this behavior can be turned off by explicitly specifying\naddress as undefined.\n"
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 157,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3144,
							"name": "extras",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.  Defaults to `\"off\"`."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 163,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "ExtrasAllowed",
								"id": 3150
							}
						},
						{
							"id": 3141,
							"name": "fromBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The earliest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 144,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockSpecifier",
								"id": 3172
							}
						},
						{
							"id": 3140,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, the name parameter will restrict to events with the given name."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 140,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3142,
							"name": "toBlock",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The latest block to include events from.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 148,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockSpecifier",
								"id": 3172
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3143,
								3144,
								3141,
								3140,
								3142
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 136,
							"character": 29
						}
					]
				},
				{
					"id": 3163,
					"name": "Log",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Log](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-getpastlogs-return)\ntype."
					},
					"children": [
						{
							"id": 3164,
							"name": "address",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the emitter (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 271,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3170,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The block hash (as hex string).  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 296,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 3171,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The block number.  Null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 300,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 3165,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's data section (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 275,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3167,
							"name": "logIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of the log within the block."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 283,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 3166,
							"name": "topics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The log's topics; each is a hex string representing 32 bytes."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 279,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 3169,
							"name": "transactionHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The emitting transaction's hash (as hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 292,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3168,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index within the block of the emitting transaction; null if\nblock is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 288,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3164,
								3170,
								3171,
								3165,
								3167,
								3166,
								3169,
								3168
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 267,
							"character": 20
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "DecodedLog",
							"id": 3129
						}
					]
				},
				{
					"id": 3173,
					"name": "ProjectInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "This type represents information about a Truffle project that can be used to\nconstruct and initialize a decoder for that project.  This information may\nbe passed in various ways; this type is given here as an interface rahter\nthan a union, but note that really you only need to include one of these\nfields.  (The `compilations` field will be used if present, then `artifacts`\nif not, etc.)  Further options for how to specify project information are\nintended to be added in the future."
					},
					"children": [
						{
							"id": 3175,
							"name": "artifacts",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "A list of contract artifacts for contracts in the project.\nContract constructor objects may be substituted for artifacts, so if\nyou're not sure which you're dealing with, it's OK."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 41,
									"character": 11
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Artifact"
								}
							}
						},
						{
							"id": 3174,
							"name": "compilations",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "An list of compilations, as specified in codec; this method of specifying\na project is mostly intended for internal Truffle use for now, but you can\nsee the documentation of the Compilations type if you want to use it."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 35,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 2136
								}
							}
						},
						{
							"id": 3176,
							"name": "config",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The project's config object.  If present, and it has the\n`contracts_build_directory` property, the decoder will automatically read\nall the artifacts from there and use those as the project information.\nFurther, smarter use of the config object are intended to be added in\nthe future."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 49,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "TruffleConfig"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3175,
								3174,
								3176
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 29,
							"character": 28
						}
					]
				},
				{
					"id": 3145,
					"name": "ReturnOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The type of the options parameter to [[ContractDecoder.decodeReturnValue|decodeReturnValue()]]."
					},
					"children": [
						{
							"id": 3146,
							"name": "block",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The block in which the call was made.  Defaults to \"latest\"."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 188,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "BlockSpecifier",
								"id": 3172
							}
						},
						{
							"id": 3147,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "If included, tells the decoder to interpret the return data as\nthe return data from a successful call (if `true` is passed) or\nas the return data from a failed call (if `false` is passed). If\nomitted or set to `undefined`, the decoder will account for both\npossibilities."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 196,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "undefined"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3146,
								3147
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 184,
							"character": 30
						}
					]
				},
				{
					"id": 3125,
					"name": "StateVariable",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Used for representing decoded state variables."
					},
					"children": [
						{
							"id": 3127,
							"name": "class",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The class of the contract that defined the variable, as a Format.Types.ContractType.\nNote that this class may differ from that of the contract being decoded, due\nto inheritance."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 66,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Types.ContractType",
								"id": 177
							}
						},
						{
							"id": 3126,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The name of the variable.  Note that due to inheritance, this may not be unique\namong the contract's state variables."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 60,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3128,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The decoded value of the variable.  Note this is a Format.Values.Result, so it may be an error."
							},
							"sources": [
								{
									"fileName": "codec/lib/types.ts",
									"line": 70,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"name": "Values.Result",
								"id": 359
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3127,
								3126,
								3128
							]
						}
					],
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 55,
							"character": 30
						}
					]
				},
				{
					"id": 3151,
					"name": "Transaction",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Contains information about a transaction.  Most of the fields have\nbeen made optional; only those needed by the decoder have been made\nmandatory.",
						"text": "Intended to work like Web3's\n[Transaction](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#eth-gettransaction-return)\ntype."
					},
					"children": [
						{
							"id": 3154,
							"name": "blockHash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Hash of this transaction's block as hex string; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 221,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 3155,
							"name": "blockNumber",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "This transaction's block number; null if pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 225,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 3157,
							"name": "from",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Address of the sender (as checksummed hex string)."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 233,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3161,
							"name": "gas",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas provided by the sender, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 250,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3160,
							"name": "gasPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Gas price for this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 246,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3152,
							"name": "hash",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The transaction hash as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 213,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3162,
							"name": "input",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Data sent with the transaction, as hex string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 254,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 3153,
							"name": "nonce",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The nonce of the sender before this transaction was sent."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 217,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 3158,
							"name": "to",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Address of the recipient (as checksummed hex string), or null for a\ncontract creation."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 238,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 3156,
							"name": "transactionIndex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Index of transaction in block; null if block is pending."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 229,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 3159,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Wei sent with this transaction, as numeric string."
							},
							"sources": [
								{
									"fileName": "decoder/lib/types.ts",
									"line": 242,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								3154,
								3155,
								3157,
								3161,
								3160,
								3152,
								3162,
								3153,
								3158,
								3156,
								3159
							]
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 209,
							"character": 28
						}
					]
				},
				{
					"id": 3172,
					"name": "BlockSpecifier",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Specifies a block.  Can be given by number, or can be given via the\nspecial strings \"genesis\", \"latest\", or \"pending\".",
						"text": "Intended to work like Web3's\n[BlockType](https://web3js.readthedocs.io/en/v1.2.1/web3-eth.html#id14).\n\n*Warning*: Using \"pending\", while allowed, is not advised, as it may lead\nto internally inconsistent results.  Use of \"latest\" is safe and will not\nlead to inconsistent results from a single decoder call due to the decoder's\ncaching system, but pending blocks cannot be cached under this system, which\nmay cause inconsistencies."
					},
					"sources": [
						{
							"fileName": "decoder/lib/types.ts",
							"line": 317,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "stringLiteral",
								"value": "genesis"
							},
							{
								"type": "stringLiteral",
								"value": "latest"
							},
							{
								"type": "stringLiteral",
								"value": "pending"
							}
						]
					}
				},
				{
					"id": 3150,
					"name": "ExtrasAllowed",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Used to indicate whether \"extra\" event decodings -- event decodings from\nnon-library contracts other than the one that appears to have emitted\nthe event -- should be returned.",
						"text": "* `\"off\"`: Exclude extra decodings (the default).\n* `\"on\"`: Include extra decodings.\n* `\"necessary\"`: Include extra decodings only if there are no others.\n\nExtra decodings will always be returned after other decodings.\n"
					},
					"sources": [
						{
							"fileName": "codec/lib/types.ts",
							"line": 583,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "off"
							},
							{
								"type": "stringLiteral",
								"value": "on"
							},
							{
								"type": "stringLiteral",
								"value": "necessary"
							}
						]
					}
				},
				{
					"id": 3214,
					"name": "forAddress",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3215,
							"name": "forAddress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given instance of a contract in this\nproject.  Unlike the other functions, this method doesn't require giving an\nartifact for the address itself; however, the address had better correspond to\na contract of a type given in the project info, or you'll get an exception."
							},
							"parameters": [
								{
									"id": 3216,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n  If an invalid address is provided, this method will throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3217,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 3218,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. See the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forProject]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2861
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 415,
							"character": 32
						}
					]
				},
				{
					"id": 3181,
					"name": "forArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3182,
							"name": "forArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract artifact."
							},
							"parameters": [
								{
									"id": 3183,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact for the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 3184,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 3185,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms; see the [[ProjectInfo]] documentation for more\n  information.\n\n  Alternatively, instead of a [[ProjectInfo]], one may simply pass a list of\n  artifacts.  Contract constructor objects may be substituted for artifacts,\n  so if you're not sure which you're dealing with, it's OK.\n\n  If this latter option is used, one may omit `artifact` itself from the\n  list of artifacts and only include the *other* relevant artifacts; note\n  that omission this is not allowed when passing a `ProjectInfo`.\n\n  If this parameter is omitted, it's treated as if one had passed `[]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2786
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 229,
							"character": 33
						}
					]
				},
				{
					"id": 3199,
					"name": "forArtifactAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3200,
							"name": "forArtifactAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 3201,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 3202,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 3203,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3204,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2861
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 335,
							"character": 35
						}
					]
				},
				{
					"id": 3186,
					"name": "forContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3187,
							"name": "forContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract decoder for a given contract."
							},
							"parameters": [
								{
									"id": 3188,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 3189,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. See the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractDecoder",
										"id": 2786
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 254,
							"character": 33
						}
					]
				},
				{
					"id": 3205,
					"name": "forContractAt",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3206,
							"name": "forContractAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a contract instance at a given address."
							},
							"parameters": [
								{
									"id": 3207,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 3208,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The address of the contract instance to decode.\n\n  Address must either be checksummed, or in all one case to circumvent the checksum.\n  Mixed-case with bad checksum will cause this function to throw an exception."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 3209,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2861
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 363,
							"character": 35
						}
					]
				},
				{
					"id": 3210,
					"name": "forContractInstance",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3211,
							"name": "forContractInstance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a given contract instance."
							},
							"parameters": [
								{
									"id": 3212,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract abstraction object corresponding to the contract instance."
									},
									"type": {
										"type": "reference",
										"name": "ContractInstanceObject"
									}
								},
								{
									"id": 3213,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2861
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 386,
							"character": 41
						}
					]
				},
				{
					"id": 3190,
					"name": "forDeployedArtifact",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3191,
							"name": "forDeployedArtifact",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 3192,
									"name": "artifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The artifact corresponding to the type of the contract.\n\n  A contract constructor object may be substituted for the artifact, so if\n  you're not sure which you're dealing with, it's OK."
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								},
								{
									"id": 3193,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 3194,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2861
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 282,
							"character": 41
						}
					]
				},
				{
					"id": 3195,
					"name": "forDeployedContract",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3196,
							"name": "forDeployedContract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a contract instance decoder for a deployed contract instance."
							},
							"parameters": [
								{
									"id": 3197,
									"name": "contract",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The contract constructor object corresponding to the type of the contract."
									},
									"type": {
										"type": "reference",
										"name": "ContractConstructorObject"
									}
								},
								{
									"id": 3198,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project being decoded, or just the\n  contracts relevant to the contract being decoded (e.g., by providing struct\n  or enum definitions, or even just appearing as a contract type).  This may\n  come in several forms. see the [[ProjectInfo]] documentation for more\n  information.  See the projectInfo parameter documentation on [[forArtifact]]\n  for more detail."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ContractInstanceDecoder",
										"id": 2861
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 305,
							"character": 41
						}
					]
				},
				{
					"id": 3177,
					"name": "forProject",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 3178,
							"name": "forProject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "**This function is asynchronous.**",
								"text": "Constructs a wire decoder for the project."
							},
							"parameters": [
								{
									"id": 3179,
									"name": "provider",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The Web3 provider object to use."
									},
									"type": {
										"type": "reference",
										"name": "Provider"
									}
								},
								{
									"id": 3180,
									"name": "projectInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Information about the project or contracts being decoded.\n  This may come in several forms; see the [[ProjectInfo]] documentation for\n  more information.\n\n  Alternatively, instead of a [[ProjectInfo]], one may simply pass a list of\n  artifacts.  Contract constructor objects may be substituted for artifacts,\n  so if you're not sure which you're dealing with, it's OK.  If this parameter\n  is omitted, it's treated as if one had passed `[]`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Promise",
								"typeArguments": [
									{
										"type": "reference",
										"name": "WireDecoder",
										"id": 2960
									}
								]
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 195,
							"character": 32
						}
					]
				},
				{
					"id": 3219,
					"name": "infoToCompilations",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 3220,
							"name": "infoToCompilations",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {},
							"parameters": [
								{
									"id": 3221,
									"name": "info",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ProjectInfo",
												"id": 3173
											},
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "Artifact"
												}
											}
										]
									}
								},
								{
									"id": 3222,
									"name": "primaryArtifact",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "Artifact"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "Compilation",
									"id": 2136
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "decoder/lib/index.ts",
							"line": 430,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						3081,
						3055,
						2786,
						2861,
						3066,
						3094,
						3112,
						3103,
						2960
					],
					"categories": [
						{
							"title": "Decoder",
							"children": [
								2786,
								2861,
								2960
							]
						},
						{
							"title": "Exception",
							"children": [
								3081,
								3055,
								3066,
								3094,
								3112,
								3103
							]
						}
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						3119,
						3148,
						3129,
						3139,
						3163,
						3173,
						3145,
						3125,
						3151
					],
					"categories": [
						{
							"title": "Output",
							"children": [
								3125
							]
						},
						{
							"title": "Inputs",
							"children": [
								3148,
								3139,
								3163,
								3173,
								3145,
								3151
							]
						},
						{
							"title": "Results",
							"children": [
								3119,
								3129
							]
						}
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						3172,
						3150
					],
					"categories": [
						{
							"title": "Inputs",
							"children": [
								3172,
								3150
							]
						}
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						3214,
						3181,
						3199,
						3186,
						3205,
						3210,
						3190,
						3195,
						3177,
						3219
					],
					"categories": [
						{
							"title": "Provider-based Constructor",
							"children": [
								3214,
								3181,
								3199,
								3190,
								3177,
								3219
							]
						},
						{
							"title": "Truffle Contract-based Constructor",
							"children": [
								3186,
								3205,
								3210,
								3195
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "decoder/lib/index.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				1,
				2785
			]
		}
	]
}